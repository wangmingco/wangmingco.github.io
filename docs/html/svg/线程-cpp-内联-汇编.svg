<svg xmlns="http://www.w3.org/2000/svg" xmlns:ev="http://www.w3.org/2001/xml-events" viewBox="0 0 3377 1597" width="3377" xmlns:xlink="http://www.w3.org/1999/xlink" height="1597"><defs/><g transform="translate(5.5,5.5)" id="page8"><rect width="3368" height="1587" x="0" y="0" fill="none"/><g transform="translate(1202.004000,63.050000)" id="table1"><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,.0L500.4,.0L500.4,140.0L.0,140.0L.0,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="9.0" y="18.5">int a=10, b;</tspan><tspan style="font-size:10.00pt" x="9.0" y="37.5">asm ("movl %1, %%eax; </tspan><tspan style="font-size:10.00pt" x="9.0" y="56.5">         movl %%eax, %0;"</tspan><tspan style="font-size:10.00pt" x="9.0" y="75.5">         :"=r"(b)                    /* output */</tspan><tspan style="font-size:10.00pt" x="9.0" y="94.5">         :"r"(a)                      /* input */</tspan><tspan style="font-size:10.00pt" x="9.0" y="113.5">         :"%eax"                   /* clobbered register */</tspan><tspan style="font-size:10.00pt" x="9.0" y="132.5">       );   </tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M500.4,.0L1231.4,.0L1231.4,140.0L500.4,140.0L500.4,.0z" fill="#ffffff"/><circle r="3.0" cy="13.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="32.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="51.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="70.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="89.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="108.0" cx="522.1" fill="#191919"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="529.4" y="18.5">%0 引用的输出操作数 b</tspan><tspan style="font-size:10.00pt" x="529.4" y="37.5">%1 引用的输入操作数a</tspan><tspan style="font-size:10.00pt" x="529.4" y="56.5">“r”是对操作数的约束。当前，“r”向GCC表示使用任何寄存器来存储操作数</tspan><tspan style="font-size:10.00pt" x="529.4" y="75.5">输出操作数约束有约束修饰符“=”，表示它是输出操作数并且是只写的</tspan><tspan style="font-size:10.00pt" x="529.4" y="94.5">寄存器名称前面有两个％的前缀。这有助于GCC区分操作数和寄存器。操作数具有单个％作为前缀</tspan><tspan style="font-size:10.00pt" x="529.4" y="113.5">第三个冒号后的修改后的寄存器％eax告诉GCC％eax的值将在“asm”内修改，因此GCC不会使用该寄存器来存储任何</tspan><tspan style="font-size:10.00pt" x="529.4" y="132.5">其他值。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,140.0L500.4,140.0L500.4,334.0L.0,334.0L.0,140.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="9.0" y="157.0">inline jint Atomic::cmpxchg (jint exchange_value, volatile jint*  dest, jint  </tspan><tspan style="font-size:10.00pt" x="9.0" y="176.0">compare_value) {</tspan><tspan style="font-size:10.00pt" x="9.0" y="195.0">  int mp = os::is_MP();</tspan><tspan style="font-size:10.00pt" x="9.0" y="214.0">  __asm__ volatile (LOCK_IF_MP(%4) "cmpxchgl %1,(%3)"</tspan><tspan style="font-size:10.00pt" x="9.0" y="233.0">                    : "=a" (exchange_value)</tspan><tspan style="font-size:10.00pt" x="9.0" y="252.0">                    : "r" (exchange_value), "a" (compare_value), "r" (dest), "r" (mp)</tspan><tspan style="font-size:10.00pt" x="9.0" y="271.0">                    : "cc", "memory");</tspan><tspan style="font-size:10.00pt" x="9.0" y="290.0">  return exchange_value;</tspan><tspan style="font-size:10.00pt" x="9.0" y="309.0">}</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M500.4,140.0L1231.4,140.0L1231.4,334.0L500.4,334.0L500.4,140.0z" fill="#ffffff"/><circle r="3.0" cy="199.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="218.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="237.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="275.0" cx="522.1" fill="#191919"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="529.4" y="204.5">mp表示是否属于多核cpu环境，如果是则LOCK_IF_MP会插入lock指令；</tspan><tspan style="font-size:10.00pt" x="529.4" y="223.5">%0为exchange_value,%1为exchange_value,%2为compare_value,%3为dest,%4为mp;</tspan><tspan style="font-size:10.00pt" x="529.4" y="242.5">"a" (compare_value)表示将compare_value读入eax寄存器,与%3(dest)进行比较，如果相等则将%1(exchange_value)写</tspan><tspan style="font-size:10.00pt" x="529.4" y="261.5">入dest;</tspan><tspan style="font-size:10.00pt" x="529.4" y="280.5">"=a" (exchange_value)表示将eax寄存器的内容写入到exchange_value；</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,334.0L500.4,334.0L500.4,546.0L.0,546.0L.0,334.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="9.0" y="388.5">inline jint     Atomic::xchg    (jint     exchange_value, volatile jint*     dest) {</tspan><tspan style="font-size:10.00pt" x="9.0" y="407.5">  __asm__ volatile (  "xchgl (%2),%0"</tspan><tspan style="font-size:10.00pt" x="9.0" y="426.5">                    : "=r" (exchange_value)</tspan><tspan style="font-size:10.00pt" x="9.0" y="445.5">                    : "0" (exchange_value), "r" (dest)</tspan><tspan style="font-size:10.00pt" x="9.0" y="464.5">                    : "memory");</tspan><tspan style="font-size:10.00pt" x="9.0" y="483.5">  return exchange_value;</tspan><tspan style="font-size:10.00pt" x="9.0" y="502.5">}</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M500.4,334.0L1231.4,334.0L1231.4,546.0L500.4,546.0L500.4,334.0z" fill="#ffffff"/><circle r="3.0" cy="345.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="364.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="383.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="402.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="421.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="459.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="478.0" cx="522.1" fill="#191919"/><circle r="3.0" cy="497.0" cx="522.1" fill="#191919"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="529.4" y="350.5">将exchange_value(%0)的值放入通用寄存器，与dest(%2)所指的内容进行交换,返回dest指针原指向内容的值;</tspan><tspan style="font-size:10.00pt" x="529.4" y="369.5">%0为exchange_value,%1为exchange_value,%2为dest;</tspan><tspan style="font-size:10.00pt" x="529.4" y="388.5">"r"表示将dest的值读到一个通用寄存器；</tspan><tspan style="font-size:10.00pt" x="529.4" y="407.5">"0"表示和％0使用同样的通用寄存器，此处表示将exchange_value值读入通用寄存器;</tspan><tspan style="font-size:10.00pt" x="529.4" y="426.5">"=r"表示将结果写入到exchange_value，而且要使用通用寄存器,由于通用寄存器的内容已经被设置为dest所指向的内</tspan><tspan style="font-size:10.00pt" x="529.4" y="445.5">容，因此exchange_value等于原dest所指向的内容；</tspan><tspan style="font-size:10.00pt" x="529.4" y="464.5">asm指示编译器在此插入汇编语句;</tspan><tspan style="font-size:10.00pt" x="529.4" y="483.5">volatile告诉编译器，严禁将此处的汇编语句与其它的语句重组合优化,即原原本本按原来的样子处理这里的汇编;</tspan><tspan style="font-size:10.00pt" x="529.4" y="502.5">memory强制gcc编译器假设RAM所有内存单元均被汇编指令修改，这样cpu中的registers和cache中已缓存的内存单元</tspan><tspan style="font-size:10.00pt" x="529.4" y="521.5">中的数据将作废。cpu将不得不在需要的时候重新读取内存中的数据。</tspan></text></g></g><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,19.6C1.8,19.6,-5.1,-19.6,12.5,-19.6" transform="translate(467.20,1104.95)" fill="none" id="shape2"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,-19.6C1.8,-19.6,-5.1,19.6,12.5,19.6" transform="translate(467.20,1144.15)" fill="none" id="shape3"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(580.20,1085.35)" fill="none" id="shape4"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(580.20,1163.75)" fill="none" id="shape5"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,9.8C-0.2,9.8,-0.3,-9.8,12.5,-9.8" transform="translate(654.20,1075.55)" fill="none" id="shape6"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,-9.8C-0.2,-9.8,-0.3,9.8,12.5,9.8" transform="translate(654.20,1095.15)" fill="none" id="shape7"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,9.8C-0.2,9.8,-0.3,-9.8,12.5,-9.8" transform="translate(654.20,1153.95)" fill="none" id="shape8"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,-9.8C-0.2,-9.8,-0.3,9.8,12.5,9.8" transform="translate(654.20,1173.55)" fill="none" id="shape9"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(729.31,1065.75)" fill="none" id="shape10"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(733.92,1104.95)" fill="none" id="shape11"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(726.86,1144.15)" fill="none" id="shape12"/><path stroke="#454545" stroke-width="1" stroke-linecap="round" d="M-12.5,.0C-2.5,.0,5.0,.0,12.5,.0" transform="translate(732.52,1183.35)" fill="none" id="shape13"/><g transform="translate(378.000450,1102.550000)" id="shape14"><path stroke="#e65b4e" stroke-width="2" d="M4.0,.0L72.7,.0C74.9,.0,76.7,1.8,76.7,4.0L76.7,40.0C76.7,42.2,74.9,44.0,72.7,44.0L4.0,44.0C1.8,44.0,.0,42.2,.0,40.0L.0,4.0C.0,1.8,1.8,.0,4.0,.0z" fill-rule="nonzero" fill="#e65b4e"/><text xml:space="preserve" style="fill:#ffffff;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:15.00pt;font-weight:bold"><tspan style="font-size:12.00pt" x="22.2" y="28.0">CPU</tspan></text></g><g transform="translate(479.703500,1054.850000)" id="shape15"><path d="M.0,.0L88.0,.0L88.0,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L88.0,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.5" y="20.8">复杂指令集</tspan></text></g><g transform="translate(479.703500,1133.250000)" id="shape16"><path d="M.0,.0L88.0,.0L88.0,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L88.0,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.5" y="20.8">精简指令集</tspan></text></g><g transform="translate(592.703500,1054.850000)" id="shape17"><path d="M.0,.0L49.0,.0L49.0,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L49.0,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.5" y="20.8">公司</tspan></text></g><g transform="translate(592.703500,1133.250000)" id="shape18"><path d="M.0,.0L49.0,.0L49.0,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L49.0,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.5" y="20.8">公司</tspan></text></g><g transform="translate(666.703500,1035.250000)" id="shape19"><path d="M.0,.0L50.1,.0L50.1,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L50.1,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="13.1" y="20.8">intel</tspan></text></g><g transform="translate(666.703500,1074.450000)" id="shape20"><path d="M.0,.0L54.7,.0L54.7,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L54.7,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.4" y="20.8">AMD</tspan></text></g><g transform="translate(666.703500,1113.650000)" id="shape21"><path d="M.0,.0L47.7,.0L47.7,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L47.7,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.3" y="20.8">IBM</tspan></text></g><g transform="translate(666.703500,1152.850000)" id="shape22"><path d="M.0,.0L53.3,.0L53.3,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L53.3,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.7" y="20.8">ARM</tspan></text></g><g transform="translate(741.812900,1035.250000)" id="shape23"><path d="M.0,.0L72.6,.0L72.6,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L72.6,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.3" y="20.8">X86架构</tspan></text></g><g transform="translate(746.422300,1074.450000)" id="shape24"><path d="M.0,.0L72.6,.0L72.6,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L72.6,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.3" y="20.8">X86架构</tspan></text></g><g transform="translate(739.359750,1113.650000)" id="shape25"><path d="M.0,.0L104.4,.0L104.4,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L104.4,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.7" y="20.8">PowerPC架构</tspan></text></g><g transform="translate(745.015950,1152.850000)" id="shape26"><path d="M.0,.0L79.3,.0L79.3,30.5L.0,30.5L.0,.0z" fill-rule="nonzero" fill="#ffffff"/><path stroke="#454545" stroke-width="1" d="M.0,30.5L79.3,30.5" fill="none"/><text xml:space="preserve" style="fill:#303030;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="12.7" y="20.8">ARM架构</tspan></text></g><g transform="translate(65.276000,63.050000)" id="table27"><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,.0L133.9,.0L133.9,40.0L.0,40.0L.0,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,.0L237.1,.0L237.1,40.0L133.9,40.0L133.9,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="25.5">32位</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,.0L328.8,.0L328.8,40.0L237.1,40.0L237.1,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="25.5">16位</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,.0L427.7,.0L427.7,40.0L328.8,40.0L328.8,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="337.8" y="25.5">8位</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,.0L1062.2,.0L1062.2,40.0L427.7,40.0L427.7,.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,40.0L133.9,40.0L133.9,454.0L.0,454.0L.0,40.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei UI,PingFang SC,Mircrosoft YaHei,Arial;font-size:11.25pt"><tspan style="font-size:9.00pt" x="9.0" y="251.5">通用寄存器</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,40.0L237.1,40.0L237.1,108.0L133.9,108.0L133.9,40.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="79.5">EAX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,40.0L328.8,40.0L328.8,108.0L237.1,108.0L237.1,40.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="79.5">AX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,40.0L427.7,40.0L427.7,108.0L328.8,108.0L328.8,40.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="337.8" y="79.5">AH、AL</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,40.0L1062.2,40.0L1062.2,108.0L427.7,108.0L427.7,40.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="436.7" y="60.5">累加器(Accumulator), 它的低16位即是AX，而AX又可分为高8位AH和低8位AL。</tspan><tspan style="font-size:10.00pt" x="436.7" y="79.5">EAX是很多加法乘法的缺省寄存器，存放函数的返回值，用累加器进行的操作可能需要更少时间，在80386</tspan><tspan style="font-size:10.00pt" x="436.7" y="98.5">及其以上的微处理器中可以用来存放存储单元的偏移地址。AX寄存器是算术运算的主要寄存器。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,108.0L237.1,108.0L237.1,158.0L133.9,158.0L133.9,108.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="138.5">EBX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,108.0L328.8,108.0L328.8,158.0L237.1,158.0L237.1,108.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="138.5">BX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,108.0L427.7,108.0L427.7,158.0L328.8,158.0L328.8,108.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="337.8" y="138.5">BH、BL</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,108.0L1062.2,108.0L1062.2,158.0L427.7,158.0L427.7,108.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="436.7" y="129.0">基地址寄存器(Base Register), 它的低16位即是BX，而BX又可分为高8位BH和低8位BL。主要用于在内存寻</tspan><tspan style="font-size:10.00pt" x="436.7" y="148.0">址时存放基地址。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,158.0L237.1,158.0L237.1,226.0L133.9,226.0L133.9,158.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="197.5">ECX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,158.0L328.8,158.0L328.8,226.0L237.1,226.0L237.1,158.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="197.5">CX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,158.0L427.7,158.0L427.7,226.0L328.8,226.0L328.8,158.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="337.8" y="197.5">CH、CL</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,158.0L1062.2,158.0L1062.2,226.0L427.7,226.0L427.7,158.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="436.7" y="178.5">计数寄存器（Count Register），它的低16位即是CX，而CX又可分为高8位CH和低8位CL。在循环和字符</tspan><tspan style="font-size:10.00pt" x="436.7" y="197.5">串操作时，要用它来控制循环次数；在位操作 中，当移多位时，要用CL来指明移位的位数；是重复(REP)前</tspan><tspan style="font-size:10.00pt" x="436.7" y="216.5">缀指令和LOOP指令的内定计数器。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,226.0L237.1,226.0L237.1,294.0L133.9,294.0L133.9,226.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="265.5">EDX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,226.0L328.8,226.0L328.8,294.0L237.1,294.0L237.1,226.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="265.5">DX</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,226.0L427.7,226.0L427.7,294.0L328.8,294.0L328.8,226.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="337.8" y="265.5">DH、DL</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,226.0L1062.2,226.0L1062.2,294.0L427.7,294.0L427.7,226.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="436.7" y="246.5">数据寄存器（Data Register），它的低16位即是DX，而DX又可分为高8位DH和低8位DL。在进行乘、除运</tspan><tspan style="font-size:10.00pt" x="436.7" y="265.5">算时，它可作为默认的操作数参与运算，也可用于存放I/O的端口地址；且总是被用来放整数除法产生的余</tspan><tspan style="font-size:10.00pt" x="436.7" y="284.5">数。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,294.0L237.1,294.0L237.1,334.0L133.9,334.0L133.9,294.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="319.5">ESI</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,294.0L328.8,294.0L328.8,334.0L237.1,334.0L237.1,294.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="319.5">SI</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,294.0L427.7,294.0L427.7,334.0L328.8,334.0L328.8,294.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,294.0L1062.2,294.0L1062.2,374.0L427.7,374.0L427.7,294.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei UI,PingFang SC,Mircrosoft YaHei,Arial;font-size:11.25pt"><tspan style="font-size:9.00pt" x="436.7" y="313.0">分别叫做源/目标索引寄存器(Source/Destination Index Register)，它们的低16位分别是SI、DI。它们主要用于存</tspan><tspan style="font-size:9.00pt" x="436.7" y="330.0">放存储单元在段内的偏移量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方</tspan><tspan style="font-size:9.00pt" x="436.7" y="347.0">便。在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串。此外，它们又作为通用寄存器可以进行任意的</tspan><tspan style="font-size:9.00pt" x="436.7" y="364.0">常规的操作，如加减移位或普通的内存间接寻址。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,334.0L237.1,334.0L237.1,374.0L133.9,374.0L133.9,334.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="359.5">EDI</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,334.0L328.8,334.0L328.8,374.0L237.1,374.0L237.1,334.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="359.5">DI</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,334.0L427.7,334.0L427.7,374.0L328.8,374.0L328.8,334.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,374.0L237.1,374.0L237.1,414.0L133.9,414.0L133.9,374.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="399.5">ESP</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,374.0L328.8,374.0L328.8,414.0L237.1,414.0L237.1,374.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="399.5">SP</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,374.0L427.7,374.0L427.7,414.0L328.8,414.0L328.8,374.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,374.0L1062.2,374.0L1062.2,454.0L427.7,454.0L427.7,374.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:Microsoft YaHei UI,PingFang SC,Mircrosoft YaHei,Arial;font-size:11.25pt"><tspan style="font-size:9.00pt" x="436.7" y="401.5">分别是基址针寄存器（Base Pointer Register）/堆栈指针寄存器（Stack Pointer Register），低16位是BP、SP，</tspan><tspan style="font-size:9.00pt" x="436.7" y="418.5">其内存分别放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶/底部。主要用于存放堆栈内存储单元的偏移</tspan><tspan style="font-size:9.00pt" x="436.7" y="435.5">量，用它们可实现多种存储器操作数的寻址方式，为以不同的地址形式访问存储单元提供方便。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,414.0L237.1,414.0L237.1,454.0L133.9,454.0L133.9,414.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="439.5">EBP</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,414.0L328.8,414.0L328.8,454.0L237.1,454.0L237.1,414.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="246.1" y="439.5">BP</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,414.0L427.7,414.0L427.7,454.0L328.8,454.0L328.8,414.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,454.0L133.9,454.0L133.9,522.0L.0,522.0L.0,454.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="9.0" y="493.5">标志寄存器</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,454.0L237.1,454.0L237.1,522.0L133.9,522.0L133.9,454.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="142.9" y="493.5">EFLAGS</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,454.0L328.8,454.0L328.8,522.0L237.1,522.0L237.1,454.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,454.0L427.7,454.0L427.7,522.0L328.8,522.0L328.8,454.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,454.0L1062.2,454.0L1062.2,522.0L427.7,522.0L427.7,454.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="436.7" y="474.5">主要用于提供程序的状态及进行相应的控制。32位的EFLAGS寄存器包含一组状态标志、系统标志以及一个</tspan><tspan style="font-size:10.00pt" x="436.7" y="493.5">控制标志。</tspan><tspan style="font-size:10.00pt" x="436.7" y="512.5">ZF(bit 6) [Zero flag]   若结果为0则将其置1，反之清零。</tspan></text></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,522.0L133.9,522.0L133.9,562.0L.0,562.0L.0,522.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,522.0L237.1,522.0L237.1,562.0L133.9,562.0L133.9,522.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,522.0L328.8,522.0L328.8,562.0L237.1,562.0L237.1,522.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,522.0L427.7,522.0L427.7,562.0L328.8,562.0L328.8,522.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,522.0L1062.2,522.0L1062.2,562.0L427.7,562.0L427.7,522.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,562.0L133.9,562.0L133.9,602.0L.0,602.0L.0,562.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,562.0L237.1,562.0L237.1,602.0L133.9,602.0L133.9,562.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,562.0L328.8,562.0L328.8,602.0L237.1,602.0L237.1,562.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,562.0L427.7,562.0L427.7,602.0L328.8,602.0L328.8,562.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,562.0L1062.2,562.0L1062.2,602.0L427.7,602.0L427.7,562.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,602.0L133.9,602.0L133.9,642.0L.0,642.0L.0,602.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,602.0L237.1,602.0L237.1,642.0L133.9,642.0L133.9,602.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,602.0L328.8,602.0L328.8,642.0L237.1,642.0L237.1,602.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,602.0L427.7,602.0L427.7,642.0L328.8,642.0L328.8,602.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,602.0L1062.2,602.0L1062.2,642.0L427.7,642.0L427.7,602.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M.0,642.0L133.9,642.0L133.9,682.0L.0,682.0L.0,642.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M133.9,642.0L237.1,642.0L237.1,682.0L133.9,682.0L133.9,642.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M237.1,642.0L328.8,642.0L328.8,682.0L237.1,682.0L237.1,642.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M328.8,642.0L427.7,642.0L427.7,682.0L328.8,682.0L328.8,642.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g><g><path stroke="#a0a0a4" stroke-width="1" d="M427.7,642.0L1062.2,642.0L1062.2,682.0L427.7,682.0L427.7,642.0z" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"/></g></g><g transform="translate(1188.000000,759.000000)" id="shape28"><path stroke="#323232" stroke-width="1" d="M1011.0,737.0L1011.0,.0L.0,.0L.0,737.0L1011.0,737.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="19.0">cmpxchg(void *ptr, unsigned long old, unsigned long new);</tspan><tspan style="font-size:10.00pt" x="4.0" y="57.0">该函数将old和ptr指向的内容比较，如果相等，则将new写入到ptr中，返回old，如果不相等，则返回ptr指向的内容。 </tspan><tspan style="font-size:10.00pt" x="4.0" y="95.0">该函数内部实现 </tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="114.0">static inline unsigned long __cmpxchg(volatile void *ptr, unsigned long old, unsigned long new, int size)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="133.0">{</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="152.0">        unsigned long prev;</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="171.0">        switch (size) {</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="190.0">        case 1:</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="209.0">            __asm__ __volatile__(LOCK_PREFIX "cmpxchgb %b1,%2"</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="228.0">                         : "=a"(prev)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="247.0">                         : "q"(new), "m"(*__xg(ptr)), "0"(old)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="266.0">                         : "memory");</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="285.0">            return prev;</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="304.0">        case 2:</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="323.0">            __asm__ __volatile__(LOCK_PREFIX "cmpxchgw %w1,%2"</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="342.0">                         : "=a"(prev)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="361.0">                         : "r"(new), "m"(*__xg(ptr)), "0"(old)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="380.0">                         : "memory");</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="399.0">            return prev;</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="418.0">        case 4:</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="437.0">            __asm__ __volatile__(LOCK_PREFIX "cmpxchgl %1,%2"</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="456.0">                         : "=a"(prev)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="475.0">                         : "r"(new), "m"(*__xg(ptr)), "0"(old)</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="494.0">                         : "memory");</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="513.0">            return prev;</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="532.0">        }</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="551.0">        return old;</tspan><tspan style="fill:#2e8d5d;font-size:10.00pt" x="4.0" y="570.0">}</tspan></text></g><g transform="translate(1740.500000,873.003000)" id="shape29"><path stroke="#323232" stroke-width="1" d="M397.0,125.0L397.0,.0L.0,.0L.0,125.0L397.0,125.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#35609f;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="19.0">内嵌汇编模板</tspan><tspan style="font-size:10.00pt" x="4.0" y="38.0">asm ( assembler template</tspan><tspan style="font-size:10.00pt" x="4.0" y="57.0">      : output operands                 (optional)</tspan><tspan style="font-size:10.00pt" x="4.0" y="76.0">      : input operands                   (optional)</tspan><tspan style="font-size:10.00pt" x="4.0" y="95.0">      : list of clobbered registers   (optional)   </tspan><tspan style="font-size:10.00pt" x="4.0" y="114.0">);</tspan></text></g><g transform="translate(1740.500000,1037.000000)" id="shape30"><path stroke="#323232" stroke-width="1" d="M397.0,88.0L397.0,.0L.0,.0L.0,88.0L397.0,88.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="30.5"> __asm__ 表示后面的代码为内嵌汇编</tspan><tspan style="font-size:10.00pt" x="4.0" y="68.5"> __volatile__表示编译器不要优化代码，后面的指令 保留原样</tspan></text></g><g transform="translate(1740.500000,1138.000000)" id="shape31"><path stroke="#323232" stroke-width="1" d="M397.0,178.0L397.0,.0L.0,.0L.0,178.0L397.0,178.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="18.5">cmpxchgl %1,%2 表示指令模板</tspan><tspan style="font-size:10.00pt" x="4.0" y="37.5">%1 %2表示指令参数，例如%1 指的是new，%2指的是 *__xg(ptr)</tspan><tspan style="font-size:10.00pt" x="4.0" y="56.5">pre new 是指令的操作数，可以是c语言的表达式或者变量</tspan><tspan style="font-size:10.00pt" x="4.0" y="94.5">操作数前面用双引号引用起的部分是对操作数的约束</tspan><tspan style="font-size:10.00pt" x="4.0" y="113.5">例如= 表示只读， a 表示将输入变量放入eax</tspan><tspan style="font-size:10.00pt" x="4.0" y="132.5">r 表示 将输入变量放入通用寄存器，也就是eax，ebx，ecx， edx，</tspan><tspan style="font-size:10.00pt" x="4.0" y="151.5">esi，edi中的一个</tspan><tspan style="font-size:10.00pt" x="4.0" y="170.5">m表示内存变量</tspan></text></g><g transform="translate(1740.500000,1337.000000)" id="shape32"><path stroke="#323232" stroke-width="1" d="M397.0,106.0L397.0,.0L.0,.0L.0,106.0L397.0,106.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="20.5">clobbered registers</tspan><tspan style="font-size:10.00pt" x="4.0" y="58.5">破坏描述符用于通知编译器我们使用了哪些寄存器或内存，由逗号</tspan><tspan style="font-size:10.00pt" x="4.0" y="77.5">格开的字符串组成，每个字符串描述一种情况，一般是寄存器名；</tspan><tspan style="font-size:10.00pt" x="4.0" y="96.5">除寄存器外还有"memory"</tspan></text></g><g transform="translate(1202.000000,1302.910000)" id="shape33"><path stroke="#323232" stroke-width="1" d="M397.0,178.0L397.0,.0L.0,.0L.0,178.0L397.0,178.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="4.0" y="19.0">LOCK_PREFIX "cmpxchgl %1,%2"</tspan><tspan style="font-size:10.00pt" x="4.0" y="38.0">                         : "=a"(prev)</tspan><tspan style="font-size:10.00pt" x="4.0" y="57.0">                         : "r"(new), "m"(*__xg(ptr)), "0"(old)</tspan><tspan style="font-size:10.00pt" x="4.0" y="76.0">                         : "memory"</tspan><tspan style="font-size:10.00pt" x="4.0" y="114.0">cmpxchgl 比较并交换操作数汇编指令</tspan><tspan style="font-size:10.00pt" x="4.0" y="133.0">%1 指的是 new，%2指的是 *__xg(ptr)，</tspan><tspan style="font-size:10.00pt" x="4.0" y="152.0">=a和0 指的是通用寄存器 eax</tspan></text></g><a xlink:href="https://blog.csdn.net/lotluck/article/details/78326168" xlink:title="文档" target="_blank"><g transform="translate(2037.500000,778.999000)" id="shape34"><path stroke="#323232" stroke-width="1" d="M100.0,30.0L100.0,.0L.0,.0L.0,30.0L100.0,30.0z" fill-rule="nonzero" fill="#ffffff"/><text xml:space="preserve" style="fill:#191919;font-family:微软雅黑,PingFang SC,Mircrosoft YaHei,Arial;font-size:12.50pt"><tspan style="font-size:10.00pt" x="37.0" y="20.5">文档</tspan></text></g></a></g></svg>