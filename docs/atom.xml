<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>向南</title>
  
  
  <link href="https://wangmingco.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangmingco.github.io/"/>
  <updated>2022-01-12T07:29:11.149Z</updated>
  <id>https://wangmingco.github.io/</id>
  
  <author>
    <name>向南</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos7 编译调试 OpenJDK11</title>
    <link href="https://wangmingco.github.io/2022/01/10/jvm/centos%E7%BC%96%E8%AF%91openjdk/"/>
    <id>https://wangmingco.github.io/2022/01/10/jvm/centos%E7%BC%96%E8%AF%91openjdk/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-01-12T07:29:11.149Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>按照如下过程进行编译(测试机是一台2核4G内存的云虚拟机，编译过程较慢且偶尔会失败，最好是使用一个多核机器进行编译)</p><blockquote><p>本次构建是JDK11当前最新版<a href="https://github.com/openjdk/jdk11u/archive/refs/tags/jdk-11.0.14+8.zip">jdk11u-jdk-11.0.14-8</a>, 构建过程出现问题，参考构建教程 <code>jdk11u-jdk-11.0.14-8/doc/building.html</code>.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看系统版本</span></span><br><span class="line">cat /proc/version</span><br><span class="line">rpm -q centos-release</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 FreeType</span></span></span><br><span class="line">yum install -y freetype-devel </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 CUPS</span></span></span><br><span class="line">yum install -y cups-devel </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 ALSA</span></span></span><br><span class="line">yum install -y alsa-lib-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 libffi</span></span></span><br><span class="line">yum install -y libffi-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 Autoconf</span></span></span><br><span class="line">yum install -y autoconf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 X11</span></span></span><br><span class="line">yum install -y libxext-dev libx11-dev libXtst-devel libXt-devel libXrender-devel libXi-devel libXrandr-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 fontconfig</span></span></span><br><span class="line">yum install -y fontconfig</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Boot-JDK, 编译openjdk-11，需要以jdk-11为bootjdk</span></span><br><span class="line">yum install -y java-11-openjdk-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装开发工具</span></span><br><span class="line">yum groupinstall -y &quot;Development Tools&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始编译</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sh ./configure --enable-debug</span></span><br><span class="line">sh ./configure --with-debug-level=slowdebug --with-native-debug-symbols=external</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make all</span></span><br><span class="line">make images</span><br></pre></td></tr></table></figure><blockquote><p>本次编译使用centos7自带的gcc4.8版本，如果使用高版本，大于文档说的7.4版本，可能会出现编译错误, 那么在运行<code>./configure</code>时打开<code>--disable-warnings-as-errors</code> 配置,即可</p></blockquote><blockquote><p>jdk11u-jdk-11.0.14-8 版本JDK默认是ascii编码，如果想要使用UTF8编码的话，修改 <code>jdk11u-jdk-11.0.14-8/make/common/SetupJavaCompilers.gmk</code> 文件，将<code>-encoding ascii</code> 修改成 <code>-encoding utf-8</code></p></blockquote><p>整个安装编译环境以及编译过程如下:</p><div id="/videos/centos7_compile_openjdk11.cast"></div><script>AsciinemaPlayer.create("/videos/centos7_compile_openjdk11.cast",document.getElementById("/videos/centos7_compile_openjdk11.cast"));</script><p>升级GCC11(下面的方式只针对当前session有效)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br><span class="line">sudo yum install devtoolset-11-gcc*</span><br><span class="line">scl enable devtoolset-11 bash</span><br></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>在vscode中进行远程debug, 在vscode中安装如下插件</p><ul><li>vscode c/c++ 开发支持 <a href="https://github.com/microsoft/vscode-cpptools">C/C++ for Visual Studio Code</a></li><li>Remote-SSH 远程支持 <a href="">Visual Studio Code Remote - SSH</a></li></ul><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"/videos/centos7_debug_openjdk11.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>在vscode里可以很方便的修改源码，然后重新编译，debug，yyds</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;h2 id=&quot;编译&quot;</summary>
      
    
    
    
    <category term="JVM" scheme="https://wangmingco.github.io/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>北京景点</title>
    <link href="https://wangmingco.github.io/2021/12/09/html/bj_baidu/"/>
    <id>https://wangmingco.github.io/2021/12/09/html/bj_baidu/</id>
    <published>2021-12-09T07:40:00.000Z</published>
    <updated>2021-12-09T08:05:41.190Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/html/bj_baidu.html">北京景点地图</a></p><p>    <div style="width:820px; height:1000px;border:none;text-align:center">        <iframe         allowtransparency="yes"         frameborder="0"         width="820px"         height="1000px"         scrolling="auto"         style="box-shadow: 0px 0px 20px -10px #888;"         src="/html/bj_baidu.html"/>    </div></p>    <p></script></p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/html/bj_baidu.html&quot;&gt;北京景点地图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;div style=&quot;width:820px; height:1000px;border:none;text-align:center&quot;&gt;
        &lt;ifra</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发环境视频</title>
    <link href="https://wangmingco.github.io/2021/06/09/html/videos/"/>
    <id>https://wangmingco.github.io/2021/06/09/html/videos/</id>
    <published>2021-06-09T07:40:00.000Z</published>
    <updated>2022-01-12T03:25:11.907Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p><a href="/html/video.html">开发环境视频</a></p><p>在命令行中设置go的开发环境</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"/videos/command-go-dev.mp4?raw=true"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于 .Net 开发API 服务</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","video":{"url":"/videos/dotnet_api_server.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Goland 开发环境设置</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","video":{"url":"/videos/goland-dev.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>idea 插件开发环境搭建</p><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"theme":"#FADFA3","video":{"url":"/videos/idea_plugin.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于idea 进行性能剖析</p><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"theme":"#FADFA3","video":{"url":"/videos/idea_profiler.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode 设置Docker开发环境</p><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"theme":"#FADFA3","video":{"url":"/videos/vs_docker.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode设置.Net开发环境</p><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"theme":"#FADFA3","video":{"url":"/videos/vscode_dotnet.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode远程开发</p><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"theme":"#FADFA3","video":{"url":"/videos/vscode_remote.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>开发Mac APP</p><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"theme":"#FADFA3","video":{"url":"/videos/xcode_menu_bar_app.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Mac下使用VSCode搭建scheme/lisp 开发环境</p><div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"theme":"#FADFA3","video":{"url":"/videos/65271391-1-208.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Mac下使用VSCode搭建Common Lisp 开发环境</p><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"theme":"#FADFA3","video":{"url":"/videos/65582794-1-208.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> ]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Javasist Introspection and customization</title>
    <link href="https://wangmingco.github.io/2019/05/04/JavaLibrary/Javasist%204%20Introspection%20and%20customization/"/>
    <id>https://wangmingco.github.io/2019/05/04/JavaLibrary/Javasist%204%20Introspection%20and%20customization/</id>
    <published>2019-05-04T12:15:00.000Z</published>
    <updated>2021-11-18T03:12:28.690Z</updated>
    
    <content type="html"><![CDATA[<p><code>CtClass</code>提供了方法以便于自省. Javassist 的自省能力和Java的反射API很像. CtClass 提供了getName(), getSuperclass(), getMethods()等方法. CtClass仍然提供了修改一个类定义的方法.它允许添加新的字段/构造器/方法. 修改(Instrumenting)方法体也是可以的.</p><p>CtClass provides methods for introspection. The introspective ability of Javassist is compatible with that of the Java reflection API. CtClass provides getName(), getSuperclass(), getMethods(), and so on. CtClass also provides methods for modifying a class definition. It allows to add a new field, constructor, and method. Instrumenting a method body is also possible.</p><p>CtMethod实例表示方法. CtMethod提供了一些方法用来修改方法的定义. 注意, 如果一个方法是继承而来的, 那么子类和基类的这个方法是由同一个CtMethod对象表示. 一个CtMethod对象对应一个方法的声明.</p><p>Methods are represented by CtMethod objects. CtMethod provides several methods for modifying the definition of the method. Note that if a method is inherited from a super class, then the same CtMethod object that represents the inherited method represents the method declared in that super class. A CtMethod object corresponds to every method declaration.</p><p>例如, 如果类Point声明了一个方法<code>move()</code>, 它的子类<code>ColorPoint</code>没有重载<code>move()</code>方法, 在Point中声明的move()方法和在子类<code>ColorPoint</code>中继承过来的move()方法是由同一个CtMethod对象表示的. 如果CtMethod对象所表示的方法被修改了, 那么父类和子类的方法都会被修改. 如果你只想修改ColorPoint的<code>move()</code>方法, 你首席必须得把Point里的move()方法制作一个副本, 然后将这个副本添加到ColorPoint里. 可以通过调用CtNewMethod.copy()得到一个CtMethod对象的副本.</p><p>For example, if class Point declares method move() and a subclass ColorPoint of Point does not override move(), the two move() methods declared in Point and inherited in ColorPoint are represented by the identical CtMethod object. If the method definition represented by this CtMethod object is modified, the modification is reflected on both the methods. If you want to modify only the move() method in ColorPoint, you first have to add to ColorPoint a copy of the CtMethod object representing move() in Point. A copy of the the CtMethod object can be obtained by CtNewMethod.copy().</p><p>Javassist不允许删除一个方法或者字段, 但是允许修改它的名字. 索引, 如果一个方法不再需要了, 应该调用CtMethod的setName()将其重命名以及setModifiers()修改它的访问级别到一个私有方法.</p><p>Javassist does not allow to remove a method or field, but it allows to change the name. So if a method is not necessary any more, it should be renamed and changed to be a private method by calling setName() and setModifiers() declared in CtMethod.</p><p>Javassist也不允许向一个已经存在的方法添加一个新的参数. 但是, 可以向相同的class里增加一个新的方法, 该方法在老的方法接口上增加新的参数. 例如, 如果你想要在一个方法上添加一个newZ参数:</p><p>Javassist does not allow to add an extra parameter to an existing method, either. Instead of doing that, a new method receiving the extra parameter as well as the other parameters should be added to the same class. For example, if you want to add an extra int parameter newZ to a method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span> </span>&#123; x = newX; y = newY; &#125;</span><br></pre></td></tr></table></figure><p>in a Point class, then you should add the following method to the Point class:</p><p>在Point类中, 你应该添加一个新的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY, <span class="keyword">int</span> newZ)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do what you want with newZ.</span></span><br><span class="line">    move(newX, newY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javassist也提供了一些底层API用于修改一个原始的类结构. 例如, CtClass中的getClassFile()返回了一个表示原始类结构的ClassFile对象.CtMethod 中的 getMethodInfo() 返回了一个MethodInfo对象, 该对象表示的类结构中的一个method_info结构. 底层API使用了Java Virtual Machine规范中的词汇. 使用者必须有class文件和字节码的知识. 更多的细节, 使用者应该参考<code>javassist.bytecode</code>包下的内容.</p><p>Javassist also provides low-level API for directly editing a raw class file. For example, getClassFile() in CtClass returns a ClassFile object representing a raw class file. getMethodInfo() in CtMethod returns a MethodInfo object representing a method_info structure included in a class file. The low-level API uses the vocabulary from the Java Virtual machine specification. The users must have the knowledge about class files and bytecode. For more details, the users should see the javassist.bytecode package.</p><p>The class files modified by Javassist requires the javassist.runtime package for runtime support only if some special identifiers starting with $ are used. Those special identifiers are described below. The class files modified without those special identifiers do not need the javassist.runtime package or any other Javassist packages at runtime. For more details, see the API documentation of the javassist.runtime package.</p><h2 id="4-1-Inserting-source-text-at-the-beginning-end-of-a-method-body"><a href="#4-1-Inserting-source-text-at-the-beginning-end-of-a-method-body" class="headerlink" title="4.1 Inserting source text at the beginning/end of a method body"></a>4.1 Inserting source text at the beginning/end of a method body</h2><p>CtMethod and CtConstructor 中提供了insertBefore(), insertAfter(), and addCatch() 这三个方法. 这些方法用于向一个已经存在的方法中添加代码片段. 这些代码片段可以试Java代码. Javassist包含了一个简单的Java编译器用来编译这些Java源码. 该编译器接受Java语言编写的源代码, 然后将其编译成Java字节码, 然后将其内联到一个方法体中. </p><p>CtMethod and CtConstructor provide methods insertBefore(), insertAfter(), and addCatch(). They are used for inserting a code fragment into the body of an existing method. The users can specify those code fragments with source text written in Java. Javassist includes a simple Java compiler for processing source text. It receives source text written in Java and compiles it into Java bytecode, which will be inlined into a method body.</p><p>如果class文件中包含了line number表的话, 可以在指定的line number中插入一个代码片段.</p><p>Inserting a code fragment at the position specified by a line number is also possible (if the line number table is contained in the class file). insertAt() in CtMethod and CtConstructor takes source text and a line number in the source file of the original class definition. It compiles the source text and inserts the compiled code at the line number.</p><p>The methods insertBefore(), insertAfter(), addCatch(), and insertAt() receive a String object representing a statement or a block. A statement is a single control structure like if and while or an expression ending with a semi colon (;). A block is a set of statements surrounded with braces {}. Hence each of the following lines is an example of valid statement or block:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#123; System.out.println(<span class="string">&quot;Hello&quot;</span>); &#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123; i = -i; &#125;</span><br></pre></td></tr></table></figure><p>The statement and the block can refer to fields and methods. They can also refer to the parameters to the method that they are inserted into if that method was compiled with the -g option (to include a local variable attribute in the class file). Otherwise, they must access the method parameters through the special variables $0, $1, $2, … described below. Accessing local variables declared in the method is not allowed although declaring a new local variable in the block is allowed. However, insertAt() allows the statement and the block to access local variables if these variables are available at the specified line number and the target method was compiled with the -g option.<br>The String object passed to the methods insertBefore(), insertAfter(), addCatch(), and insertAt() are compiled by the compiler included in Javassist. Since the compiler supports language extensions, several identifiers starting with $ have special meaning:</p><ul><li><code>$0, $1, $2, ...</code>        this and actual parameters</li><li><code>$args</code>    An array of parameters. The type of $args is Object[].</li><li><code>$$</code>    All actual parameters. For example, m($$) is equivalent to m($1,$2,…)</li><li><code>$cflow(...)</code>    cflow variable</li><li><code>$r</code>    The result type. It is used in a cast expression.</li><li><code>$w</code>    The wrapper type. It is used in a cast expression.</li><li><code>$_</code>    The resulting value</li><li><code>$sig</code>    An array of java.lang.Class objects representing the formal parameter types.</li><li><code>$type</code>    A java.lang.Class object representing the formal result type.</li><li><code>$class</code>    A java.lang.Class object representing the class currently edited.</li></ul><h4 id="0-1-2-…"><a href="#0-1-2-…" class="headerlink" title="$0, $1, $2, …"></a>$0, $1, $2, …</h4><p>The parameters passed to the target method are accessible with $1, $2, … instead of the original parameter names. $1 represents the first parameter, $2 represents the second parameter, and so on. The types of those variables are identical to the parameter types. $0 is equivalent to this. If the method is static, $0 is not available.</p><p>These variables are used as following. Suppose that a class Point:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123; x += dx; y += dy; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To print the values of dx and dy whenever the method move() is called, execute this program:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtMethod m = cc.getDeclaredMethod(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">m.insertBefore(<span class="string">&quot;&#123; System.out.println($1); System.out.println($2); &#125;&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br></pre></td></tr></table></figure><p>Note that the source text passed to insertBefore() is surrounded with braces {}. insertBefore() accepts only a single statement or a block surrounded with braces.</p><p>The definition of the class Point after the modification is like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        &#123; System.out.println(dx); System.out.println(dy); &#125;</span><br><span class="line">        x += dx; y += dy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$1 and $2 are replaced with dx and dy, respectively.</p><p>$1, $2, $3 … are updatable. If a new value is assigend to one of those variables, then the value of the parameter represented by that variable is also updated.</p><h4 id="args"><a href="#args" class="headerlink" title="$args"></a>$args</h4><p>The variable $args represents an array of all the parameters. The type of that variable is an array of class Object. If a parameter type is a primitive type such as int, then the parameter value is converted into a wrapper object such as java.lang.Integer to store in $args. Thus, $args[0] is equivalent to $1 unless the type of the first parameter is a primitive type. Note that $args[0] is not equivalent to $0; $0 represents this.</p><p>If an array of Object is assigned to $args, then each element of that array is assigned to each parameter. If a parameter type is a primitive type, the type of the corresponding element must be a wrapper type. The value is converted from the wrapper type to the primitive type before it is assigned to the parameter.</p><h4 id=""><a href="#" class="headerlink" title="$$"></a>$$</h4><p>The variable $$ is abbreviation of a list of all the parameters separated by commas. For example, if the number of the parameters to method move() is three, then</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move($$)</span><br></pre></td></tr></table></figure><p>is equivalent to this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move($<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>If move() does not take any parameters, then move($$) is equivalent to move().</p><p>$$ can be used with another method. If you write an expression:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exMove($$, context)</span><br></pre></td></tr></table></figure><p>then this expression is equivalent to:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exMove($<span class="number">1</span>, $<span class="number">2</span>, $<span class="number">3</span>, context)</span><br></pre></td></tr></table></figure><p>Note that $$ enables generic notation of method call with respect to the number of parameters. It is typically used with $proceed shown later.</p><h4 id="cflow"><a href="#cflow" class="headerlink" title="$cflow"></a>$cflow</h4><p>$cflow means “control flow”. This read-only variable returns the depth of the recursive calls to a specific method.</p><p>Suppose that the method shown below is represented by a CtMethod object cm:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To use $cflow, first declare that $cflow is used for monitoring calls to the method fact():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CtMethod cm = ...;</span><br><span class="line">cm.useCflow(<span class="string">&quot;fact&quot;</span>);</span><br></pre></td></tr></table></figure><p>The parameter to useCflow() is the identifier of the declared $cflow variable. Any valid Java name can be used as the identifier. Since the identifier can also include . (dot), for example, “my.Test.fact” is a valid identifier.</p><p>Then, $cflow(fact) represents the depth of the recursive calls to the method specified by cm. The value of $cflow(fact) is 0 (zero) when the method is first called whereas it is 1 when the method is recursively called within the method. For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cm.insertBefore(<span class="string">&quot;if ($cflow(fact) == 0)&quot;</span></span><br><span class="line">              + <span class="string">&quot;    System.out.println(\&quot;fact \&quot; + $1);&quot;</span>);</span><br></pre></td></tr></table></figure><p>translates the method fact() so that it shows the parameter. Since the value of $cflow(fact) is checked, the method fact() does not show the parameter if it is recursively called within fact().</p><p>The value of $cflow is the number of stack frames associated with the specified method cm under the current topmost stack frame for the current thread. $cflow is also accessible within a method different from the specified method cm.</p><h4 id="r"><a href="#r" class="headerlink" title="$r"></a>$r</h4><p>$r represents the result type (return type) of the method. It must be used as the cast type in a cast expression. For example, this is a typical use:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object result = ... ;</span><br><span class="line">$_ = ($r)result;</span><br></pre></td></tr></table></figure><p>If the result type is a primitive type, then ($r) follows special semantics. First, if the operand type of the cast expression is a primitive type, ($r) works as a normal cast operator to the result type. On the other hand, if the operand type is a wrapper type, ($r) converts from the wrapper type to the result type. For example, if the result type is int, then ($r) converts from java.lang.Integer to int.</p><p>If the result type is void, then ($r) does not convert a type; it does nothing. However, if the operand is a call to a void method, then ($r) results in null. For example, if the result type is void and foo() is a void method, then</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_ = ($r)foo();</span><br></pre></td></tr></table></figure><p>is a valid statement.</p><p>The cast operator ($r) is also useful in a return statement. Even if the result type is void, the following return statement is valid:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ($r)result;</span><br></pre></td></tr></table></figure><p>Here, result is some local variable. Since ($r) is specified, the resulting value is discarded. This return statement is regarded as the equivalent of the return statement without a resulting value:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><h4 id="w"><a href="#w" class="headerlink" title="$w"></a>$w</h4><p>$w represents a wrapper type. It must be used as the cast type in a cast expression. ($w) converts from a primitive type to the corresponding wrapper type. The following code is an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer i = ($w)<span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>The selected wrapper type depends on the type of the expression following ($w). If the type of the expression is double, then the wrapper type is java.lang.Double.</p><p>If the type of the expression following ($w) is not a primitive type, then ($w) does nothing.</p><h4 id="-1"><a href="#-1" class="headerlink" title="$_"></a>$_</h4><p>insertAfter() in CtMethod and CtConstructor inserts the compiled code at the end of the method. In the statement given to insertAfter(), not only the variables shown above such as $0, $1, … but also $_ is available.</p><p>The variable $_ represents the resulting value of the method. The type of that variable is the type of the result type (the return type) of the method. If the result type is void, then the type of $_ is Object and the value of $_ is null.</p><p>Although the compiled code inserted by insertAfter() is executed just before the control normally returns from the method, it can be also executed when an exception is thrown from the method. To execute it when an exception is thrown, the second parameter asFinally to insertAfter() must be true.</p><p>If an exception is thrown, the compiled code inserted by insertAfter() is executed as a finally clause. The value of $_ is 0 or null in the compiled code. After the execution of the compiled code terminates, the exception originally thrown is re-thrown to the caller. Note that the value of $_ is never thrown to the caller; it is rather discarded.</p><h4 id="sig"><a href="#sig" class="headerlink" title="$sig"></a>$sig</h4><p>The value of $sig is an array of java.lang.Class objects that represent the formal parameter types in declaration order.</p><h4 id="type"><a href="#type" class="headerlink" title="$type"></a>$type</h4><p>The value of $type is an java.lang.Class object representing the formal type of the result value. This variable refers to Void.class if this is a constructor.</p><h4 id="class"><a href="#class" class="headerlink" title="$class"></a>$class</h4><p>The value of $class is an java.lang.Class object representing the class in which the edited method is declared. This represents the type of $0.</p><h4 id="addCatch"><a href="#addCatch" class="headerlink" title="addCatch()"></a>addCatch()</h4><p>addCatch() inserts a code fragment into a method body so that the code fragment is executed when the method body throws an exception and the control returns to the caller. In the source text representing the inserted code fragment, the exception value is referred to with the special variable $e.</p><p>For example, this program:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CtMethod m = ...;</span><br><span class="line">CtClass etype = ClassPool.getDefault().get(<span class="string">&quot;java.io.IOException&quot;</span>);</span><br><span class="line">m.addCatch(<span class="string">&quot;&#123; System.out.println($e); throw $e; &#125;&quot;</span>, etype);</span><br><span class="line">translates the method body represented by m into something like <span class="keyword">this</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    the original method body</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that the inserted code fragment must end with a throw or return statement.</p><h2 id="4-2-Altering-a-method-body"><a href="#4-2-Altering-a-method-body" class="headerlink" title="4.2 Altering a method body"></a>4.2 Altering a method body</h2><p>CtMethod and CtConstructor provide setBody() for substituting a whole method body. They compile the given source text into Java bytecode and substitutes it for the original method body. If the given source text is null, the substituted body includes only a return statement, which returns zero or null unless the result type is void.</p><p>In the source text given to setBody(), the identifiers starting with $ have special meaning</p><ul><li><code>$0, $1, $2, ...</code>        this and actual parameters</li><li><code>$args</code>    An array of parameters. The type of $args is Object[].</li><li><code>$$</code>    All actual parameters.</li><li><code>$cflow(...)</code>    cflow variable</li><li><code>$r</code>    The result type. It is used in a cast expression.</li><li><code>$w</code>    The wrapper type. It is used in a cast expression.</li><li><code>$sig</code>    An array of java.lang.Class objects representing the formal parameter types.</li><li><code>$type</code>    A java.lang.Class object representing the formal result type.</li><li><code>$class</code>    A java.lang.Class object representing the class that declares the method<br>currently edited (the type of $0).</li></ul><p>Note that $_ is not available.</p><h3 id="Substituting-source-text-for-an-existing-expression"><a href="#Substituting-source-text-for-an-existing-expression" class="headerlink" title="Substituting source text for an existing expression"></a>Substituting source text for an existing expression</h3><p>Javassist allows modifying only an expression included in a method body. javassist.expr.ExprEditor is a class for replacing an expression in a method body. The users can define a subclass of ExprEditor to specify how an expression is modified.</p><p>To run an ExprEditor object, the users must call instrument() in CtMethod or CtClass. For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CtMethod cm = ... ;</span><br><span class="line">cm.instrument(</span><br><span class="line">    <span class="keyword">new</span> ExprEditor() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">(MethodCall m)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">throws</span> CannotCompileException</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (m.getClassName().equals(<span class="string">&quot;Point&quot;</span>)</span><br><span class="line">                          &amp;&amp; m.getMethodName().equals(<span class="string">&quot;move&quot;</span>))</span><br><span class="line">                m.replace(<span class="string">&quot;&#123; $1 = 0; $_ = $proceed($$); &#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>searches the method body represented by cm and replaces all calls to move() in class Point with a block:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; $<span class="number">1</span> = <span class="number">0</span>; $_ = $proceed($$); &#125;</span><br></pre></td></tr></table></figure><p>so that the first parameter to move() is always 0. Note that the substituted code is not an expression but a statement or a block. It cannot be or contain a try-catch statement.</p><p>The method instrument() searches a method body. If it finds an expression such as a method call, field access, and object creation, then it calls edit() on the given ExprEditor object. The parameter to edit() is an object representing the found expression. The edit() method can inspect and replace the expression through that object.</p><p>Calling replace() on the parameter to edit() substitutes the given statement or block for the expression. If the given block is an empty block, that is, if replace(“{}”) is executed, then the expression is removed from the method body. If you want to insert a statement (or a block) before/after the expression, a block like the following should be passed to replace():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; before-statements;</span><br><span class="line">  $_ = $proceed($$);</span><br><span class="line">  after-statements; &#125;</span><br></pre></td></tr></table></figure><p>whichever the expression is either a method call, field access, object creation, or others. The second statement could be:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_ = $proceed();</span><br></pre></td></tr></table></figure><p>if the expression is read access, or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$proceed($$);</span><br></pre></td></tr></table></figure><p>if the expression is write access.</p><p>Local variables available in the target expression is also available in the source text passed to replace() if the method searched by instrument() was compiled with the -g option (the class file includes a local variable attribute).</p><h3 id="javassist-expr-MethodCall"><a href="#javassist-expr-MethodCall" class="headerlink" title="javassist.expr.MethodCall"></a>javassist.expr.MethodCall</h3><p>A MethodCall object represents a method call. The method replace() in MethodCall substitutes a statement or a block for the method call. It receives source text representing the substitued statement or block, in which the identifiers starting with $ have special meaning as in the source text passed to insertBefore().</p><p>$0    The target object of the method call.<br>This is not equivalent to this, which represents the caller-side this object.<br>$0 is null if the method is static.</p><p>$1, $2, …        The parameters of the method call.<br>$_    The resulting value of the method call.<br>$r    The result type of the method call.<br>$class        A java.lang.Class object representing the class declaring the method.<br>$sig        An array of java.lang.Class objects representing the formal parameter types.<br>$type        A java.lang.Class object representing the formal result type.<br>$proceed        The name of the method originally called in the expression.<br>Here the method call means the one represented by the MethodCall object.</p><p>The other identifiers such as $w, $args and $$ are also available.</p><p>Unless the result type of the method call is void, a value must be assigned to $_ in the source text and the type of $_ is the result type. If the result type is void, the type of $_ is Object and the value assigned to $_ is ignored.</p><p>$proceed is not a String value but special syntax. It must be followed by an argument list surrounded by parentheses ( ).</p><h3 id="javassist-expr-ConstructorCall"><a href="#javassist-expr-ConstructorCall" class="headerlink" title="javassist.expr.ConstructorCall"></a>javassist.expr.ConstructorCall</h3><p>A ConstructorCall object represents a constructor call such as this() and super included in a constructor body. The method replace() in ConstructorCall substitutes a statement or a block for the constructor call. It receives source text representing the substituted statement or block, in which the identifiers starting with $ have special meaning as in the source text passed to insertBefore().</p><p>$0    The target object of the constructor call. This is equivalent to this.<br>$1, $2, …        The parameters of the constructor call.<br>$class        A java.lang.Class object representing the class declaring the constructor.<br>$sig        An array of java.lang.Class objects representing the formal parameter types.<br>$proceed        The name of the constructor originally called in the expression.<br>Here the constructor call means the one represented by the ConstructorCall object.</p><p>The other identifiers such as $w, $args and $$ are also available.</p><p>Since any constructor must call either a constructor of the super class or another constructor of the same class, the substituted statement must include a constructor call, normally a call to $proceed().</p><p>$proceed is not a String value but special syntax. It must be followed by an argument list surrounded by parentheses ( ).</p><h3 id="javassist-expr-FieldAccess"><a href="#javassist-expr-FieldAccess" class="headerlink" title="javassist.expr.FieldAccess"></a>javassist.expr.FieldAccess</h3><p>A FieldAccess object represents field access. The method edit() in ExprEditor receives this object if field access is found. The method replace() in FieldAccess receives source text representing the substitued statement or block for the field access.</p><p>In the source text, the identifiers starting with $ have special meaning:</p><p>$0    The object containing the field accessed by the expression. This is not equivalent to this.<br>this represents the object that the method including the expression is invoked on.<br>$0 is null if the field is static.</p><p>$1    The value that would be stored in the field if the expression is write access.<br>Otherwise, $1 is not available.</p><p>$_    The resulting value of the field access if the expression is read access.<br>Otherwise, the value stored in $_ is discarded.</p><p>$r    The type of the field if the expression is read access.<br>Otherwise, $r is void.</p><p>$class        A java.lang.Class object representing the class declaring the field.<br>$type    A java.lang.Class object representing the field type.<br>$proceed        The name of a virtual method executing the original field access. .<br>The other identifiers such as $w, $args and $$ are also available.</p><p>If the expression is read access, a value must be assigned to $_ in the source text. The type of $_ is the type of the field.</p><h3 id="javassist-expr-NewExpr"><a href="#javassist-expr-NewExpr" class="headerlink" title="javassist.expr.NewExpr"></a>javassist.expr.NewExpr</h3><p>A NewExpr object represents object creation with the new operator (not including array creation). The method edit() in ExprEditor receives this object if object creation is found. The method replace() in NewExpr receives source text representing the substitued statement or block for the object creation.</p><p>In the source text, the identifiers starting with $ have special meaning:</p><p>$0    null.<br>$1, $2, …        The parameters to the constructor.<br>$_    The resulting value of the object creation.<br>A newly created object must be stored in this variable.</p><p>$r    The type of the created object.<br>$sig        An array of java.lang.Class objects representing the formal parameter types.<br>$type        A java.lang.Class object representing the class of the created object.<br>$proceed        The name of a virtual method executing the original object creation. .<br>The other identifiers such as $w, $args and $$ are also available.</p><h3 id="javassist-expr-NewArray"><a href="#javassist-expr-NewArray" class="headerlink" title="javassist.expr.NewArray"></a>javassist.expr.NewArray</h3><p>A NewArray object represents array creation with the new operator. The method edit() in ExprEditor receives this object if array creation is found. The method replace() in NewArray receives source text representing the substitued statement or block for the array creation.</p><p>In the source text, the identifiers starting with $ have special meaning:</p><p>$0    null.<br>$1, $2, …        The size of each dimension.<br>$_    The resulting value of the array creation.<br>A newly created array must be stored in this variable.</p><p>$r    The type of the created array.<br>$type        A java.lang.Class object representing the class of the created array.<br>$proceed        The name of a virtual method executing the original array creation. .<br>The other identifiers such as $w, $args and $$ are also available.</p><p>For example, if the array creation is the following expression,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[][] s = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>then the value of $1 and $2 are 3 and 4, respectively. $3 is not available.<br>If the array creation is the following expression,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[][] s = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure><p>then the value of $1 is 3 but $2 is not available.</p><h3 id="javassist-expr-Instanceof"><a href="#javassist-expr-Instanceof" class="headerlink" title="javassist.expr.Instanceof"></a>javassist.expr.Instanceof</h3><p>A Instanceof object represents an instanceof expression. The method edit() in ExprEditor receives this object if an instanceof expression is found. The method replace() in Instanceof receives source text representing the substitued statement or block for the expression.</p><p>In the source text, the identifiers starting with $ have special meaning:</p><p>$0    null.<br>$1    The value on the left hand side of the original instanceof operator.<br>$_    The resulting value of the expression. The type of $_ is boolean.<br>$r    The type on the right hand side of the instanceof operator.<br>$type    A java.lang.Class object representing the type on the right hand side of the instanceof operator.<br>$proceed        The name of a virtual method executing the original instanceof expression.<br>It takes one parameter (the type is java.lang.Object) and returns true<br>if the parameter value is an instance of the type on the right hand side of<br>the original instanceof operator. Otherwise, it returns false.</p><p>The other identifiers such as $w, $args and $$ are also available.</p><h3 id="javassist-expr-Cast"><a href="#javassist-expr-Cast" class="headerlink" title="javassist.expr.Cast"></a>javassist.expr.Cast</h3><p>A Cast object represents an expression for explicit type casting. The method edit() in ExprEditor receives this object if explicit type casting is found. The method replace() in Cast receives source text representing the substitued statement or block for the expression.</p><p>In the source text, the identifiers starting with $ have special meaning:</p><p>$0    null.<br>$1    The value the type of which is explicitly cast.<br>$_    The resulting value of the expression. The type of $_ is the same as the type<br>after the explicit casting, that is, the type surrounded by ( ).</p><p>$r    the type after the explicit casting, or the type surrounded by ( ).<br>$type    A java.lang.Class object representing the same type as $r.<br>$proceed        The name of a virtual method executing the original type casting.<br>It takes one parameter of the type java.lang.Object and returns it after<br>the explicit type casting specified by the original expression.</p><p>The other identifiers such as $w, $args and $$ are also available.</p><h3 id="javassist-expr-Handler"><a href="#javassist-expr-Handler" class="headerlink" title="javassist.expr.Handler"></a>javassist.expr.Handler</h3><p>A Handler object represents a catch clause of try-catch statement. The method edit() in ExprEditor receives this object if a catch is found. The method insertBefore() in Handler compiles the received source text and inserts it at the beginning of the catch clause.</p><p>In the source text, the identifiers starting with $ have meaning:</p><p>$1    The exception object caught by the catch clause.<br>$r    the type of the exception caught by the catch clause. It is used in a cast expression.<br>$w    The wrapper type. It is used in a cast expression.<br>$type        A java.lang.Class object representing<br>the type of the exception caught by the catch clause.</p><p>If a new exception object is assigned to $1, it is passed to the original catch clause as the caught exception.</p><h2 id="4-3-Adding-a-new-method-or-field"><a href="#4-3-Adding-a-new-method-or-field" class="headerlink" title="4.3 Adding a new method or field"></a>4.3 Adding a new method or field</h2><h3 id="Adding-a-method"><a href="#Adding-a-method" class="headerlink" title="Adding a method"></a>Adding a method</h3><p>Javassist allows the users to create a new method and constructor from scratch. CtNewMethod and CtNewConstructor provide several factory methods, which are static methods for creating CtMethod or CtConstructor objects. Especially, make() creates a CtMethod or CtConstructor object from the given source text.</p><p>For example, this program:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CtClass point = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtMethod m = CtNewMethod.make(</span><br><span class="line">                 <span class="string">&quot;public int xmove(int dx) &#123; x += dx; &#125;&quot;</span>,</span><br><span class="line">                 point);</span><br><span class="line">point.addMethod(m);</span><br></pre></td></tr></table></figure><p>adds a public method xmove() to class Point. In this example, x is a int field in the class Point.</p><p>The source text passed to make() can include the identifiers starting with $ except $_ as in setBody(). It can also include $proceed if the target object and the target method name are also given to make(). For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CtClass point = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtMethod m = CtNewMethod.make(</span><br><span class="line">                 <span class="string">&quot;public int ymove(int dy) &#123; $proceed(0, dy); &#125;&quot;</span>,</span><br><span class="line">                 point, <span class="string">&quot;this&quot;</span>, <span class="string">&quot;move&quot;</span>);</span><br></pre></td></tr></table></figure><p>this program creates a method ymove() defined below:</p><p>public int ymove(int dy) { this.move(0, dy); }<br>Note that $proceed has been replaced with this.move.</p><p>Javassist provides another way to add a new method. You can first create an abstract method and later give it a method body:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CtClass cc = ... ;</span><br><span class="line">CtMethod m = <span class="keyword">new</span> CtMethod(CtClass.intType, <span class="string">&quot;move&quot;</span>,</span><br><span class="line">                          <span class="keyword">new</span> CtClass[] &#123; CtClass.intType &#125;, cc);</span><br><span class="line">cc.addMethod(m);</span><br><span class="line">m.setBody(<span class="string">&quot;&#123; x += $1; &#125;&quot;</span>);</span><br><span class="line">cc.setModifiers(cc.getModifiers() &amp; ~Modifier.ABSTRACT);</span><br></pre></td></tr></table></figure><p>Since Javassist makes a class abstract if an abstract method is added to the class, you have to explicitly change the class back to a non-abstract one after calling setBody().</p><h3 id="Mutual-recursive-methods"><a href="#Mutual-recursive-methods" class="headerlink" title="Mutual recursive methods"></a>Mutual recursive methods</h3><p>Javassist cannot compile a method if it calls another method that has not been added to a class. (Javassist can compile a method that calls itself recursively.) To add mutual recursive methods to a class, you need a trick shown below. Suppose that you want to add methods m() and n() to a class represented by cc:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CtClass cc = ... ;</span><br><span class="line">CtMethod m = CtNewMethod.make(<span class="string">&quot;public abstract int m(int i);&quot;</span>, cc);</span><br><span class="line">CtMethod n = CtNewMethod.make(<span class="string">&quot;public abstract int n(int i);&quot;</span>, cc);</span><br><span class="line">cc.addMethod(m);</span><br><span class="line">cc.addMethod(n);</span><br><span class="line">m.setBody(<span class="string">&quot;&#123; return ($1 &lt;= 0) ? 1 : (n($1 - 1) * $1); &#125;&quot;</span>);</span><br><span class="line">n.setBody(<span class="string">&quot;&#123; return m($1); &#125;&quot;</span>);</span><br><span class="line">cc.setModifiers(cc.getModifiers() &amp; ~Modifier.ABSTRACT);</span><br></pre></td></tr></table></figure><p>You must first make two abstract methods and add them to the class. Then you can give the method bodies to these methods even if the method bodies include method calls to each other. Finally you must change the class to a not-abstract class since addMethod() automatically changes a class into an abstract one if an abstract method is added.</p><h3 id="Adding-a-field"><a href="#Adding-a-field" class="headerlink" title="Adding a field"></a>Adding a field</h3><p>Javassist also allows the users to create a new field.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CtClass point = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtField f = <span class="keyword">new</span> CtField(CtClass.intType, <span class="string">&quot;z&quot;</span>, point);</span><br><span class="line">point.addField(f);</span><br></pre></td></tr></table></figure><p>This program adds a field named z to class Point.</p><p>If the initial value of the added field must be specified, the program shown above must be modified into:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CtClass point = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtField f = <span class="keyword">new</span> CtField(CtClass.intType, <span class="string">&quot;z&quot;</span>, point);</span><br><span class="line">point.addField(f, <span class="string">&quot;0&quot;</span>);    <span class="comment">// initial value is 0.</span></span><br></pre></td></tr></table></figure><p>Now, the method addField() receives the second parameter, which is the source text representing an expression computing the initial value. This source text can be any Java expression if the result type of the expression matches the type of the field. Note that an expression does not end with a semi colon (;).</p><p>Furthermore, the above code can be rewritten into the following simple code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CtClass point = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtField f = CtField.make(<span class="string">&quot;public int z = 0;&quot;</span>, point);</span><br><span class="line">point.addField(f);</span><br></pre></td></tr></table></figure><h3 id="Removing-a-member"><a href="#Removing-a-member" class="headerlink" title="Removing a member"></a>Removing a member</h3><p>To remove a field or a method, call removeField() or removeMethod() in CtClass. A CtConstructor can be removed by removeConstructor() in CtClass.</p><h2 id="4-4-Annotations"><a href="#4-4-Annotations" class="headerlink" title="4.4 Annotations"></a>4.4 Annotations</h2><p>CtClass, CtMethod, CtField and CtConstructor provides a convenient method getAnnotations() for reading annotations. It returns an annotation-type object.</p><p>For example, suppose the following annotation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Author &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">year</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This annotation is used as the following:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Author(name=&quot;Chiba&quot;, year=2005)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then, the value of the annotation can be obtained by getAnnotations(). It returns an array containing annotation-type objects.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CtClass cc = ClassPool.getDefault().get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">Object[] all = cc.getAnnotations();</span><br><span class="line">Author a = (Author)all[<span class="number">0</span>];</span><br><span class="line">String name = a.name();</span><br><span class="line"><span class="keyword">int</span> year = a.year();</span><br><span class="line">System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;, year: &quot;</span> + year);</span><br></pre></td></tr></table></figure><p>This code snippet should print:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: Chiba, year: 2005</span><br></pre></td></tr></table></figure><p>Since the annoation of Point is only @Author, the length of the array all is one and all[0] is an Author object. The member values of the annotation can be obtained by calling name() and year() on the Author object.</p><p>To use getAnnotations(), annotation types such as Author must be included in the current class path. They must be also accessible from a ClassPool object. If the class file of an annotation type is not found, Javassist cannot obtain the default values of the members of that annotation type.</p><h2 id="4-5-Runtime-support-classes"><a href="#4-5-Runtime-support-classes" class="headerlink" title="4.5 Runtime support classes"></a>4.5 Runtime support classes</h2><p>In most cases, a class modified by Javassist does not require Javassist to run. However, some kinds of bytecode generated by the Javassist compiler need runtime support classes, which are in the javassist.runtime package (for details, please read the API reference of that package). Note that the javassist.runtime package is the only package that classes modified by Javassist may need for running. The other Javassist classes are never used at runtime of the modified classes.</p><h2 id="4-6-Import"><a href="#4-6-Import" class="headerlink" title="4.6 Import"></a>4.6 Import</h2><p>All the class names in source code must be fully qualified (they must include package names). However, the java.lang package is an exception; for example, the Javassist compiler can resolve Object as well as java.lang.Object.</p><p>To tell the compiler to search other packages when resolving a class name, call importPackage() in ClassPool. For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.importPackage(<span class="string">&quot;java.awt&quot;</span>);</span><br><span class="line">CtClass cc = pool.makeClass(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">CtField f = CtField.make(<span class="string">&quot;public Point p;&quot;</span>, cc);</span><br><span class="line">cc.addField(f);</span><br></pre></td></tr></table></figure><p>The seconde line instructs the compiler to import the java.awt package. Thus, the third line will not throw an exception. The compiler can recognize Point as java.awt.Point.</p><p>Note that importPackage() does not affect the get() method in ClassPool. Only the compiler considers the imported packages. The parameter to get() must be always a fully qualified name.</p><h2 id="4-7-Limitations"><a href="#4-7-Limitations" class="headerlink" title="4.7 Limitations"></a>4.7 Limitations</h2><p>In the current implementation, the Java compiler included in Javassist has several limitations with respect to the language that the compiler can accept. Those limitations are:</p><p>The new syntax introduced by J2SE 5.0 (including enums and generics) has not been supported. Annotations are supported by the low level API of Javassist. See the javassist.bytecode.annotation package (and also getAnnotations() in CtClass and CtBehavior). Generics are also only partly supported. See the latter section for more details.<br>Array initializers, a comma-separated list of expressions enclosed by braces { and }, are not available unless the array dimension is one.<br>Inner classes or anonymous classes are not supported. Note that this is a limitation of the compiler only. It cannot compile source code including an anonymous-class declaration. Javassist can read and modify a class file of inner/anonymous class.<br>Labeled continue and break statements are not supported.<br>The compiler does not correctly implement the Java method dispatch algorithm. The compiler may confuse if methods defined in a class have the same name but take different parameter lists.<br>For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(A a)</span> </span>&#123; .. &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123; .. &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the compiled expression is x.foo(new C()), where x is an instance of X, the compiler may produce a call to foo(A) although the compiler can correctly compile foo((B)new C()).</p><p>The users are recommended to use # as the separator between a class name and a static method or field name. For example, in regular Java,<br>javassist.CtClass.intType.getName()<br>calls a method getName() on the object indicated by the static field intType in javassist.CtClass. In Javassist, the users can write the expression shown above but they are recommended to write:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javassist.CtClass#intType.getName()</span><br></pre></td></tr></table></figure><p>so that the compiler can quickly parse the expression.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;CtClass&lt;/code&gt;提供了方法以便于自省. Javassist 的自省能力和Java的反射API很像. CtClass 提供了getName(), getSuperclass(), getMethods()等方法. CtClass仍然提供了修改一个类定义</summary>
      
    
    
    
    <category term="Javasist" scheme="https://wangmingco.github.io/categories/Javasist/"/>
    
    
  </entry>
  
  <entry>
    <title>Javasist Class Loader</title>
    <link href="https://wangmingco.github.io/2019/05/03/JavaLibrary/Javasist%203%20Class%20loader/"/>
    <id>https://wangmingco.github.io/2019/05/03/JavaLibrary/Javasist%203%20Class%20loader/</id>
    <published>2019-05-03T12:15:00.000Z</published>
    <updated>2021-11-18T03:12:28.690Z</updated>
    
    <content type="html"><![CDATA[<p>If what classes must be modified is known in advance, the easiest way for modifying the classes is as follows:</p><ol><li>Get a CtClass object by calling ClassPool.get(),</li><li>Modify it, and</li><li>Call writeFile() or toBytecode() on that CtClass object to obtain a modified class file.<br>If whether a class is modified or not is determined at load time, the users must make Javassist collaborate with a class loader. Javassist can be used with a class loader so that bytecode can be modified at load time. The users of Javassist can define their own version of class loader but they can also use a class loader provided by Javassist.</li></ol><h2 id="3-1-The-toClass-method-in-CtClass"><a href="#3-1-The-toClass-method-in-CtClass" class="headerlink" title="3.1 The toClass method in CtClass"></a>3.1 The toClass method in CtClass</h2><p>CtClass 提供了一个便捷方法 toClass(), 该方法会将CtClass对象所代表的class通过当前线程的context 类加载器加载进虚拟机里. 在调用该方法之前, 调用者必须拥有权限, 否则会抛出 SecurityException 异常.</p><p>The CtClass provides a convenience method toClass(), which requests the context class loader for the current thread to load the class represented by the CtClass object. To call this method, the caller must have appropriate permission; otherwise, a SecurityException may be thrown.</p><p>The following program shows how to use toClass():</p><p>下面的程序展示了如何使用toClass().</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool cp = ClassPool.getDefault();</span><br><span class="line">        CtClass cc = cp.get(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        CtMethod m = cc.getDeclaredMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">        m.insertBefore(<span class="string">&quot;&#123; System.out.println(\&quot;Hello.say():\&quot;); &#125;&quot;</span>);</span><br><span class="line">        Class c = cc.toClass();</span><br><span class="line">        Hello h = (Hello)c.newInstance();</span><br><span class="line">        h.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test.main() 在Hello类的say()方法中插入了一个对 println() 的方法调用. 然后将修改过的Hello class构建一个实例出来, 接着调用该实例的say()方法.</p><p>Test.main() inserts a call to println() in the method body of say() in Hello. Then it constructs an instance of the modified Hello class and calls say() on that instance.</p><blockquote><p>注意, 上面的程序能运行成功取决于在toClass()执行之前, Hello class从来没有被加载过. 如果Hello已经被加载过的话, 在toClass() 加载修改过的Hello class之前,  JVM会先将原生的Hello class加载进来. 因此加载修改过的Hello class就会失败(抛出LinkageError 错误). 例如:</p></blockquote><p>Note that the program above depends on the fact that the Hello class is never loaded before toClass() is invoked. If not, the JVM would load the original Hello class before toClass() requests to load the modified Hello class. Hence loading the modified Hello class would be failed (LinkageError is thrown). For example, if main() in Test is something like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Hello orig = <span class="keyword">new</span> Hello();</span><br><span class="line">    ClassPool cp = ClassPool.getDefault();</span><br><span class="line">    CtClass cc = cp.get(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 方法的第一行首先将原生的Hello class加载了进来, 后续再调用 toClass() 就会抛出异常, 这是因为同一个类加载器不能同时加载俩个相同版本的Hello class.</p><p>then the original Hello class is loaded at the first line of main and the call to toClass() throws an exception since the class loader cannot load two different versions of the Hello class at the same time.</p><p>如果这个应用程序运行在一些如JBoss或者Tomcat的应用服务器桑, toClass() 直接使用context 类加载器 可能就不太正确了. 在上面的例子中, 你会看到一个未检查异常 ClassCastException 被抛出. 要避免这种异常, 你必须给 toClass() 一个合适的类加载器. 例如, 如果变量 bean 是你的session bean对象的话, 你可以采用下面的代码:</p><p>If the program is running on some application server such as JBoss and Tomcat, the context class loader used by toClass() might be inappropriate. In this case, you would see an unexpected ClassCastException. To avoid this exception, you must explicitly give an appropriate class loader to toClass(). For example, if bean is your session bean object, then the following code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CtClass cc = ...;</span><br><span class="line">Class c = cc.toClass(bean.getClass().getClassLoader());</span><br></pre></td></tr></table></figure><p>上面的代码可以正确运行. 你应该将加载你程序的类加载器传递给toClass() (在上面的例子中, 是bean对象的class)</p><p>would work. You should give toClass() the class loader that has loaded your program (in the above example, the class of the bean object).</p><p><code>toClass()</code> 只是一个便捷方法. 如果你需要更复杂的功能, 你应该实现自己的类加载器.</p><p>toClass() is provided for convenience. If you need more complex functionality, you should write your own class loader.</p><h2 id="3-2-Class-loading-in-Java"><a href="#3-2-Class-loading-in-Java" class="headerlink" title="3.2 Class loading in Java"></a>3.2 Class loading in Java</h2><p>在Java中, 多个class loader是可以共存的, 每个ClassLoader都有它自己的命名空间. 不同的类加载器可以加载相同名称的不同的class. 加载进来的class被视为不一样的. 这个特性允许我们在同一个JVM运行包含相同名称的class的多个应用程序.</p><p>In Java, multiple class loaders can coexist and each class loader creates its own name space. Different class loaders can load different class files with the same class name. The loaded two classes are regarded as different ones. This feature enables us to run multiple application programs on a single JVM even if these programs include different classes with the same name.</p><blockquote><p>注意, JVM不允许动态重新加载class. 一旦一个类加载器已经加载了一个class, 那么在运行期, 就不允许该类加载器再去加载一个已经修改过的class. 因此当JVM已经加载了一个class之后, 就不允许再去修改该class的定义了. 但是, JDPA(Java Platform Debugger Architecture) 提供了一些工具可以帮助重新加载一个类. See Section 3.6.</p></blockquote><p>Note: The JVM does not allow dynamically reloading a class. Once a class loader loads a class, it cannot reload a modified version of that class during runtime. Thus, you cannot alter the definition of a class after the JVM loads it. However, the JPDA (Java Platform Debugger Architecture) provides limited ability for reloading a class. See Section 3.6.</p><p>如果相同的class 文件被不同的类加载器加载了, JVM就会创建俩个名称和定义相同的class. 但是这俩个class是被视为是不同的. 因为这俩个class是不同的, 一个class的实例是不允许赋值到另一个class的变量的. 在这俩个class之间的转换操作会失败, 同时抛出一个 ClassCastException.</p><p>If the same class file is loaded by two distinct class loaders, the JVM makes two distinct classes with the same name and definition. The two classes are regarded as different ones. Since the two classes are not identical, an instance of one class is not assignable to a variable of the other class. The cast operation between the two classes fails and throws a ClassCastException.</p><p>例如, 下面的代码片段抛出的异常.</p><p>For example, the following code snippet throws an exception:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyClassLoader myLoader = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">Class clazz = myLoader.loadClass(<span class="string">&quot;Box&quot;</span>);</span><br><span class="line">Object obj = clazz.newInstance();</span><br><span class="line">Box b = (Box)obj;    <span class="comment">// this always throws ClassCastException.</span></span><br></pre></td></tr></table></figure><p>Box class 被俩个类加载器加载. 假设一个类加载器 CL将上面的代码片段的一个类. CL会将上述代码片段的MyClassLoader, Class, Object, and Box进行加载(除非CL被代理给了其他类加载器). 因此变量b的类型是Box 是被CL加载的. 然而,  myLoader 也加载了Box class. 变量obj指向的对象就是被myLoader加载的Box的实例. 因此最后语句就会抛出异常ClassCastException, 因为obj的class和变量b所引用的class不是同一个.</p><p>The Box class is loaded by two class loaders. Suppose that a class loader CL loads a class including this code snippet. Since this code snippet refers to MyClassLoader, Class, Object, and Box, CL also loads these classes (unless it delegates to another class loader). Hence the type of the variable b is the Box class loaded by CL. On the other hand, myLoader also loads the Box class. The object obj is an instance of the Box class loaded by myLoader. Therefore, the last statement always throws a ClassCastException since the class of obj is a different verison of the Box class from one used as the type of the variable b.</p><p>不同的类加载器构成了一个树结构. 除了bootstrap类加载器, 每个类加载器都有一个父加载器, which has normally loaded the class of that child class loader. 因为被请求加载的类可以被代理给这个层级中的其他类加载器, 因此一个class也许可以被不是你想使用的其他类加载器加载. 因此, 你希望加载类C的类加载器也许和实际加载类C的加载器不是同一个. 因此为了区分这俩个类加载器, 我们把前一个类加载器称为<code>the initiator of C</code>, 后一个类加载器称为<code>the real loader of C</code>.</p><p>Multiple class loaders form a tree structure. Each class loader except the bootstrap loader has a parent class loader, which has normally loaded the class of that child class loader. Since the request to load a class can be delegated along this hierarchy of class loaders, a class may be loaded by a class loader that you do not request the class loading. Therefore, the class loader that has been requested to load a class C may be different from the loader that actually loads the class C. For distinction, we call the former loader the initiator of C and we call the latter loader the real loader of C.</p><p>此外, 如果被请求加载类C的类加载器(<code>the initiator of C</code>)被代理给了父加载器PL, 那么类加载器CL也不会再起加载类C中依赖的任何其他的类. 类加载CL就不再是哪些类的initiator, 它的父加载器PL就成为了initiator, 然后PL负责去加载哪些类. 类C定义中指向的那些类将会被类C的真实加载器进行加载.</p><p>Furthermore, if a class loader CL requested to load a class C (the initiator of C) delegates to the parent class loader PL, then the class loader CL is never requested to load any classes referred to in the definition of the class C. CL is not the initiator of those classes. Instead, the parent class loader PL becomes their initiators and it is requested to load them. The classes that the definition of a class C referes to are loaded by the real loader of C.</p><p>下面看一个例子, 深入理解一下:</p><p>To understand this behavior, let’s consider the following example.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;    <span class="comment">// loaded by PL</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;      <span class="comment">// the initiator is L but the real loader is PL</span></span><br><span class="line">    <span class="keyword">private</span> Point upperLeft, size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBaseX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> upperLeft.x; &#125;</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;    <span class="comment">// loaded by a class loader L</span></span><br><span class="line">    <span class="keyword">private</span> Box box;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBaseX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> box.getBaseX(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设类<code>Window</code>是被类加载器<code>L</code>加载的. 那么类<code>Window</code>的initiator和真实加载器都是<code>L</code>. 因为<code>Window</code>定义里面指向了类<code>Box</code>, JVM还将事业<code>L</code>去加载类<code>Box</code>. 这里, 假设, <code>L</code>将加载动作委托给了父加载器<code>PL</code>. <code>Box</code>的initiator就是<code>L</code>, 但是真实加载器就成<code>PL</code>. 在这个例子中, <code>Point</code>的initiator就成了<code>PL</code>而不是<code>L</code>, 因为它和<code>Box</code>的真实加载器是一样的. 因此<code>L</code>从来都不会加载<code>Point</code>.</p><p>Suppose that a class Window is loaded by a class loader L. Both the initiator and the real loader of Window are L. Since the definition of Window refers to Box, the JVM will request L to load Box. Here, suppose that L delegates this task to the parent class loader PL. The initiator of Box is L but the real loader is PL. In this case, the initiator of Point is not L but PL since it is the same as the real loader of Box. Thus L is never requested to load Point.</p><p>Next, let’s consider a slightly modified example.</p><p>下面的例子对刚才进行了一些稍微的修改:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;      <span class="comment">// the initiator is L but the real loader is PL</span></span><br><span class="line">    <span class="keyword">private</span> Point upperLeft, size;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">getSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;    <span class="comment">// loaded by a class loader L</span></span><br><span class="line">    <span class="keyword">private</span> Box box;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">widthIs</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">        Point p = box.getSize();</span><br><span class="line">        <span class="keyword">return</span> w == p.getX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在, <code>Window</code>的定义也指向了<code>Point</code>. 在这个例子中, 如果类加载器<code>L</code>要加载<code>Point</code>, 它必须也被代理给<code>PL</code>. 你必须避免有俩个类加载器俩次加载相同一个类. 这俩个类加载器中的一个必须代理给另一个.</p><p>Now, the definition of Window also refers to Point. In this case, the class loader L must also delegate to PL if it is requested to load Point. You must avoid having two class loaders doubly load the same class. One of the two loaders must delegate to the other.</p><p>当<code>Point</code>被加载的时候, 如果<code>L</code>没有被代理给<code>PL</code>, <code>widthIs()</code> 将会抛出一个<code>ClassCastException</code>. 因为<code>Box</code>的真实类加载器是<code>PL</code>, <code>Box</code>中关联的<code>Point</code>也会被<code>PL</code>加载. 因此, <code>getSize()</code>真实调用的实例是由<code>PL</code>加载的类<code>Point</code>产生的, 而<code>widthIs()</code>中的变量<code>p</code>是由<code>L</code>加载的类<code>Point</code>. JVM将他们视作俩个类型, 因此会因为类型不匹配抛出一个异常.</p><p>If L does not delegate to PL when Point is loaded, widthIs() would throw a ClassCastException. Since the real loader of Box is PL, Point referred to in Box is also loaded by PL. Therefore, the resulting value of getSize() is an instance of Point loaded by PL whereas the type of the variable p in widthIs() is Point loaded by L. The JVM regards them as distinct types and thus it throws an exception because of type mismatch.</p><p>这个行为看起来是有点不方便, 但是却很必须的. 看下面的代码:</p><p>This behavior is somewhat inconvenient but necessary. If the following statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point p = box.getSize();</span><br></pre></td></tr></table></figure><p>这就不会抛出异常, 写<code>Window</code>的程序员破坏了<code>Point</code>对象的封装. 例如, 被<code>PL</code>加载的类<code>Point</code>中有个字段<code>x</code>是私有的. 如果<code>L</code>加载下面程序描述的<code>Point</code>, <code>Window</code>类就可以直接访问<code>x</code>的值.</p><p>did not throw an exception, then the programmer of Window could break the encapsulation of Point objects. For example, the field x is private in Point loaded by PL. However, the Window class could directly access the value of x if L loads Point with the following definition:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> x, y;    <span class="comment">// not private</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于Java类加载器的细节, 下面的文章会更优帮助:</p><p>For more details of class loaders in Java, the following paper would be helpful:</p><blockquote><p>Sheng Liang and Gilad Bracha, “Dynamic Class Loading in the Java Virtual Machine”,<br>ACM OOPSLA’98, pp.36-44, 1998.</p></blockquote><h2 id="3-3-Using-javassist-Loader"><a href="#3-3-Using-javassist-Loader" class="headerlink" title="3.3 Using javassist.Loader"></a>3.3 Using javassist.Loader</h2><p>Javassist 提供了一个类加载器<code>javassist.Loader</code>. 这个类加载器使用<code>javassist.ClassPool</code>对象来读取class文件.</p><p>Javassist provides a class loader javassist.Loader. This class loader uses a javassist.ClassPool object for reading a class file.</p><p>例如, <code>javassist.Loader</code> 可以用来加载被Javassist修改过的class.</p><p>For example, javassist.Loader can be used for loading a particular class modified with Javassist.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> test.Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     ClassPool pool = ClassPool.getDefault();</span><br><span class="line">     Loader cl = <span class="keyword">new</span> Loader(pool);</span><br><span class="line"></span><br><span class="line">     CtClass ct = pool.get(<span class="string">&quot;test.Rectangle&quot;</span>);</span><br><span class="line">     ct.setSuperclass(pool.get(<span class="string">&quot;test.Point&quot;</span>));</span><br><span class="line"></span><br><span class="line">     Class c = cl.loadClass(<span class="string">&quot;test.Rectangle&quot;</span>);</span><br><span class="line">     Object rect = c.newInstance();</span><br><span class="line">         :</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个应用程序修改了类<code>test.Rectangle</code>. <code>test.Rectangle</code>的父类被设置为了<code>test.Point</code>. 然后应用程序将修改过的class加载, 最后创建出一个新的<code>test.Rectangle</code>实例出来.</p><p>This program modifies a class test.Rectangle. The superclass of test.Rectangle is set to a test.Point class. Then this program loads the modified class, and creates a new instance of the test.Rectangle class.</p><p>如果用户想要当class被加载后, 后台会自动修改class, 可以通过向<code>javassist.Loader</code>添加事件监听器来完成. 当类加载器加载类的时候会自动通知注册了的事件监听器. 事件监听器必须下面的接口.</p><p>If the users want to modify a class on demand when it is loaded, the users can add an event listener to a javassist.Loader. The added event listener is notified when the class loader loads a class. The event-listener class must implement the following interface:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Translator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(ClassPool pool)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NotFoundException, CannotCompileException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoad</span><span class="params">(ClassPool pool, String classname)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NotFoundException, CannotCompileException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当通过调用<code>javassist.Loader</code>的<code>addTranslator()</code>向<code>javassist.Loader</code>添加完成事件监听器后, <code>start()</code>方法就会被调用. <code>onLoad()</code>方法会在<code>javassist.Loader</code>加载类之前被调用. 可以在<code>onLoad()</code> 方法中修改一个类的定义.</p><p>The method start() is called when this event listener is added to a javassist.Loader object by addTranslator() in javassist.Loader. The method onLoad() is called before javassist.Loader loads a class. onLoad() can modify the definition of the loaded class.</p><p>例如, 下面的事件监听器在class被加载之前全部被修改成<code>public</code>.</p><p>For example, the following event listener changes all classes to public classes just before they are loaded.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTranslator</span> <span class="keyword">implements</span> <span class="title">Translator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(ClassPool pool)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NotFoundException, CannotCompileException </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onLoad</span><span class="params">(ClassPool pool, String classname)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> NotFoundException, CannotCompileException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CtClass cc = pool.get(classname);</span><br><span class="line">        cc.setModifiers(Modifier.PUBLIC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意, <code>onLoad()</code>方法中不用调用<code>toBytecode()</code> 或者 <code>writeFile()</code> 方法, <code>javassist.Loader</code>会自动去调用那些方法.</p></blockquote><p>Note that onLoad() does not have to call toBytecode() or writeFile() since javassist.Loader calls these methods to obtain a class file.</p><p>To run an application class MyApp with a MyTranslator object, write a main class as following:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     Translator t = <span class="keyword">new</span> MyTranslator();</span><br><span class="line">     ClassPool pool = ClassPool.getDefault();</span><br><span class="line">     Loader cl = <span class="keyword">new</span> Loader();</span><br><span class="line">     cl.addTranslator(pool, t);</span><br><span class="line">     cl.run(<span class="string">&quot;MyApp&quot;</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To run this program, do:</p><p>运行程序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% java Main2 arg1 arg2...</span><br></pre></td></tr></table></figure><p>类<code>MyApp</code>和程序中其他的类都会被<code>MyTranslator</code>修改.</p><p>The class MyApp and the other application classes are translated by MyTranslator.</p><p>注意, 程序中像<code>MyApp</code>这样的类不能访问oader classes, 例如<code>Main2, MyTranslator, and ClassPool</code>, 因为它们是被不同的加载器加载的. 应用程序的类是被<code>javassist.Loader</code>而loader classes(例如<code>Main2</code>)是被Java默认的类加载器加载的.</p><p>Note that application classes like MyApp cannot access the loader classes such as Main2, MyTranslator, and ClassPool because they are loaded by different loaders. The application classes are loaded by javassist.Loader whereas the loader classes such as Main2 are by the default Java class loader.</p><p><code>javassist.Loader</code>搜索类的顺序和<code>java.lang.ClassLoader</code>不一样. <code>ClassLoader</code>首先会将加载动作委托给他们父加载器, 只有当父加载器找不到, <code>ClassLoader</code>自己才会去加载. 而<code>javassist.Loader</code> 在委托给父类加载器之前, 自己首先加载一遍. 直接委托父加载器加载只取决于</p><ul><li>在调用<code>ClassPool</code>对象的<code>get()</code>方法是没有找到搜索的类</li><li>或者通过<code>delegateLoadingOf()</code>设置指定由父加载器去进行加载.</li></ul><p>javassist.Loader searches for classes in a different order from java.lang.ClassLoader. ClassLoader first delegates the loading operations to the parent class loader and then attempts to load the classes only if the parent class loader cannot find them. On the other hand, javassist.Loader attempts to load the classes before delegating to the parent class loader. It delegates only if:</p><ul><li>the classes are not found by calling get() on a ClassPool object, or</li><li>the classes have been specified by using delegateLoadingOf() to be loaded by the parent class loader.</li></ul><p>这种搜索顺序允许Javassist 加载修改过的类. 一旦它由于某些原因找不到修改过的类, 它仍然会将搜索动作委托给父加载器进行加载. 一旦类被父加载器加载到了, 那么类中其他的类也会被父加载器进行加载, 因此这些被父加载器加载的类是永远也不是被修改过的. 回想一下前文介绍的, 在类<code>C</code>中包含的类也会被<code>C</code>的真实加载器进行加载. 如果你的程序加载修改过的类失败了, 你应该确认一下使用那些类的其他类是否也被<code>javassist.Loader</code>进行加载的.</p><p>This search order allows loading modified classes by Javassist. However, it delegates to the parent class loader if it fails to find modified classes for some reason. Once a class is loaded by the parent class loader, the other classes referred to in that class will be also loaded by the parent class loader and thus they are never modified. Recall that all the classes referred to in a class C are loaded by the real loader of C. If your program fails to load a modified class, you should make sure whether all the classes using that class have been loaded by javassist.Loader.</p><h2 id="3-4-Writing-a-class-loader"><a href="#3-4-Writing-a-class-loader" class="headerlink" title="3.4 Writing a class loader"></a>3.4 Writing a class loader</h2><p>A simple class loader using Javassist is as follows:</p><p>使用Javassist中的类加载器很简单:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Call MyApp.main().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        SampleLoader s = <span class="keyword">new</span> SampleLoader();</span><br><span class="line">        Class c = s.loadClass(<span class="string">&quot;MyApp&quot;</span>);</span><br><span class="line">        c.getDeclaredMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> Class[] &#123; String[].class &#125;)</span><br><span class="line">         .invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; args &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleLoader</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line">        pool = <span class="keyword">new</span> ClassPool();</span><br><span class="line">        pool.insertClassPath(<span class="string">&quot;./class&quot;</span>); <span class="comment">// MyApp.class must be there.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Finds a specified class.</span></span><br><span class="line"><span class="comment">     * The bytecode for that class can be modified.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">findClass</span><span class="params">(String name)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CtClass cc = pool.get(name);</span><br><span class="line">            <span class="comment">// modify the CtClass object here</span></span><br><span class="line">            <span class="keyword">byte</span>[] b = cc.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CannotCompileException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类<code>MyApp</code>是一个应用程序. 执行程序之前, 首先要将该类放到<code>./class</code>目录下, 但是不能包含在类搜索路径里. 否则<code>MyApp.class</code>会被系统默认的类加载器进行加载(会被<code>SampleLoader</code>父加载器加载). 通过在构建器中调用 <code>insertClassPath()</code> 设置了路径的名称<code>./class</code>. 你也可以不用<code>./class</code>, 换一个其他的名称, 然后执行:</p><p>The class MyApp is an application program. To execute this program, first put the class file under the ./class directory, which must not be included in the class search path. Otherwise, MyApp.class would be loaded by the default system class loader, which is the parent loader of SampleLoader. The directory name ./class is specified by insertClassPath() in the constructor. You can choose a different name instead of ./class if you want. Then do as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% java SampleLoader</span><br></pre></td></tr></table></figure><p>类加载器会从<code>./class/MyApp.class</code>加载类<code>MyApp</code>, 然后调用<code>MyApp.main()</code>方法.</p><p>The class loader loads the class MyApp (./class/MyApp.class) and calls MyApp.main() with the command line parameters.</p><p>这是使用<code>Javassist</code>最简单的方式. 然而, 如果你写了一个复杂的类加载器, 你必须熟悉java类加载机制的细节. 例如, 上面的应用程序将<code>MyApp</code>放到了与<code>SampleLoader</code>所属的不同的一个名称空间里, 因为这俩个类是由不同的类加载器进行加载的. 因此<code>MyApp</code>不能直接访问类<code>SampleLoader</code>.</p><p>This is the simplest way of using Javassist. However, if you write a more complex class loader, you may need detailed knowledge of Java’s class loading mechanism. For example, the program above puts the MyApp class in a name space separated from the name space that the class SampleLoader belongs to because the two classes are loaded by different class loaders. Hence, the MyApp class cannot directly access the class SampleLoader.</p><h2 id="3-5-Modifying-a-system-class"><a href="#3-5-Modifying-a-system-class" class="headerlink" title="3.5 Modifying a system class"></a>3.5 Modifying a system class</h2><p>系统类例如<code>java.lang.String</code>除了系统类加载器之外不能被其他的类加载加载. 因此, 上面提到的<code>SampleLoader</code>或者<code>javassist.Loader</code>在加载时不能修改系统的类.</p><p>The system classes like java.lang.String cannot be loaded by a class loader other than the system class loader. Therefore, SampleLoader or javassist.Loader shown above cannot modify the system classes at loading time.</p><p>但是如果你的程序想要修改系统类, 那么系统类必须被静态修改. 例如下面的程序在<code>java.lang.String</code>添加了一个字段<code>hiddenValue</code>:</p><p>If your application needs to do that, the system classes must be statically modified. For example, the following program adds a new field hiddenValue to java.lang.String:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">CtField f = <span class="keyword">new</span> CtField(CtClass.intType, <span class="string">&quot;hiddenValue&quot;</span>, cc);</span><br><span class="line">f.setModifiers(Modifier.PUBLIC);</span><br><span class="line">cc.addField(f);</span><br><span class="line">cc.writeFile(<span class="string">&quot;.&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个程序产生了一个文件<code>./java/lang/String.class</code>.</p><p>This program produces a file “./java/lang/String.class”.</p><p>To run your program MyApp with this modified String class, do as follows:</p><p>在<code>MyApp</code>中使用这个修改过的类<code>String</code>, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% java -Xbootclasspath/p:. MyApp arg1 arg2...</span><br></pre></td></tr></table></figure><p>假设<code>MyApp</code>定义如下:</p><p>Suppose that the definition of MyApp is as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(String.class.getField(<span class="string">&quot;hiddenValue&quot;</span>).getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果修改过的<code>String</code>被正确地加载, <code>MyApp</code>会打印<code>hiddenValue</code>的值.</p><p>If the modified String class is correctly loaded, MyApp prints hiddenValue.</p><blockquote><p>注意, 应用程序使用这个技术在覆盖<code>rt.jar</code>中的系统类的时候不应该被部署, 否则会违反<code>Java 2 Runtime Environment binary code license</code> 授权.</p></blockquote><p>Note: Applications that use this technique for the purpose of overriding a system class in rt.jar should not be deployed as doing so would contravene the Java 2 Runtime Environment binary code license.</p><h2 id="3-6-Reloading-a-class-at-runtime"><a href="#3-6-Reloading-a-class-at-runtime" class="headerlink" title="3.6 Reloading a class at runtime"></a>3.6 Reloading a class at runtime</h2><p>如果JVM在运行时JPDA开启了, 类就可以动态重加载了. JVM加载一个类后, 旧版本的class可以被卸载, 新版本的class可以再次加载进来. 这样一来就完成了在运行期动态修改类. 但是, 新版本的类定义必须兼容旧版本的类定义. JVM不允许这俩个版本的类的schema发生改变. 他们必须拥有相同的方法和字段.</p><p>Javassist提供了一个工具类用于在运行期动态重加载. 更多的细节信息参考API文档<code>javassist.tools.HotSwapper</code>.</p><p>If the JVM is launched with the JPDA (Java Platform Debugger Architecture) enabled, a class is dynamically reloadable. After the JVM loads a class, the old version of the class definition can be unloaded and a new one can be reloaded again. That is, the definition of that class can be dynamically modified during runtime. However, the new class definition must be somewhat compatible to the old one. The JVM does not allow schema changes between the two versions. They have the same set of methods and fields.</p><p>Javassist provides a convenient class for reloading a class at runtime. For more information, see the API documentation of javassist.tools.HotSwapper.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;If what classes must be modified is known in advance, the easiest way for modifying the classes is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get a CtClass</summary>
      
    
    
    
    <category term="Javasist" scheme="https://wangmingco.github.io/categories/Javasist/"/>
    
    
  </entry>
  
  <entry>
    <title>Javasist ClassPool</title>
    <link href="https://wangmingco.github.io/2019/05/02/JavaLibrary/Javasist%202%20ClassPool/"/>
    <id>https://wangmingco.github.io/2019/05/02/JavaLibrary/Javasist%202%20ClassPool/</id>
    <published>2019-05-02T12:15:00.000Z</published>
    <updated>2021-11-18T03:12:28.689Z</updated>
    
    <content type="html"><![CDATA[<p>A ClassPool object is a container of CtClass objects. Once a CtClass object is created, it is recorded in a ClassPool for ever. This is because a compiler may need to access the CtClass object later when it compiles source code that refers to the class represented by that CtClass.</p><p><code>ClassPool</code>对象是CtClass对象的集合. 一旦CtClass对象被创建出来, 它就会被永远地保存在ClassPool中. 这是因为编译器在编译源码的时候可能还需要访问这些CtClass对象.</p><p>For example, suppose that a new method getter() is added to a CtClass object representing Point class. Later, the program attempts to compile source code including a method call to getter() in Point and use the compiled code as the body of a method, which will be added to another class Line. If the CtClass object representing Point is lost, the compiler cannot compile the method call to getter(). Note that the original class definition does not include getter(). Therefore, to correctly compile such a method call, the ClassPool must contain all the instances of CtClass all the time of program execution.</p><p>例如, 向Point类的CtClass对象添加一个新的getter()方法. 然后程序将某段调用Point的getter()方法的源码片段进行编译, 然后将编译好的代码片段放到另外一个类里. 如果找不到代表Point的CtClass的话, 编译器就没办法编译对getter()方法的调用. 注意, 原先的class是不包含getter()方法的. 因此, 为了能正确进行编译, 在程序运行期间, ClassPool必须包含全部的CtClass实例.</p><h2 id="Avoid-out-of-memory"><a href="#Avoid-out-of-memory" class="headerlink" title="Avoid out of memory"></a>Avoid out of memory</h2><p>This specification of ClassPool may cause huge memory consumption if the number of CtClass objects becomes amazingly large (this rarely happens since Javassist tries to reduce memory consumption in various ways). To avoid this problem, you can explicitly remove an unnecessary CtClass object from the ClassPool. If you call detach() on a CtClass object, then that CtClass object is removed from the ClassPool. For example,</p><p>按照上文描述的那样, 如果CtClass实例数量飞速增长的话, ClassPool就有可能会引起巨大的内存消耗(但是实际上这种情况很少发生, 因此Javassist会通过多种方式减少内存消耗). 为了解决这种问题, 你可以显式地从ClassPool里面删除不需要的CtClass实例. 如果你在CtClass对象上调用detach()方法的, 该对象就会从ClassPool里面移除. 例如: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CtClass cc = ... ;</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.detach();</span><br></pre></td></tr></table></figure><p>当 detach() 方法被调用之后, CtClass实例的其他方法就不再允许被调用. 但是你可以接着调用ClassPool的get()方法, 再获得一个相同class的新的CtClass实例. 如果你调用了<code>get()</code>方法, ClassPool会重新读取class 文件, 然后再创建一个新的CtClass对象.</p><p>You must not call any method on that CtClass object after detach() is called. However, you can call get() on ClassPool to make a new instance of CtClass representing the same class. If you call get(), the ClassPool reads a class file again and newly creates a CtClass object, which is returned by get().</p><p>另一种思路是再重新创建一个ClassPool, 然后将旧的那个舍弃掉. 如果旧的ClassPool被gc掉了, 那么原先ClassPool里的CtClass对象也都被gc掉了. 如果要创建一个新的ClassPool实例, 执行下面的代码即可:</p><p>Another idea is to occasionally replace a ClassPool with a new one and discard the old one. If an old ClassPool is garbage collected, the CtClass objects included in that ClassPool are also garbage collected. To create a new instance of ClassPool, execute the following code snippet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPool cp = <span class="keyword">new</span> ClassPool(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// if needed, append an extra search path by appendClassPath()</span></span><br></pre></td></tr></table></figure><p>刚才创建的ClassPool的行为和通过调用ClassPool.getDefault()返回的默认ClassPool是一样的. 注意ClassPool.getDefault()是出于便捷目的而存在的一个单例工厂方法. ClassPool.getDefault() 会像上面那样创建一个ClassPool 对象, 然后作为单例存在, 一直复用它. 通过getDefault()返回的ClassPool并没有特殊的规则. getDefault() 只是一个快捷方法.</p><p>This creates a ClassPool object that behaves as the default ClassPool returned by ClassPool.getDefault() does. Note that ClassPool.getDefault() is a singleton factory method provided for convenience. It creates a ClassPool object in the same way shown above although it keeps a single instance of ClassPool and reuses it. A ClassPool object returned by getDefault() does not have a special role. getDefault() is a convenience method.</p><p>注意 new ClassPool(true) 是一个快捷构造器,  它只是构建了一个ClassPool对象, 然后将系统搜索路径添加到这上面. 该构造器方法和下面方法等同.<br>Note that new ClassPool(true) is a convenient constructor, which constructs a ClassPool object and appends the system search path to it. Calling that constructor is equivalent to the following code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPool cp = <span class="keyword">new</span> ClassPool();</span><br><span class="line">cp.appendSystemPath();  <span class="comment">// or append another path by appendClassPath()</span></span><br></pre></td></tr></table></figure><h2 id="Cascaded-ClassPools"><a href="#Cascaded-ClassPools" class="headerlink" title="Cascaded ClassPools"></a>Cascaded ClassPools</h2><p>如果应用程序是运行在一个web 服务器上, 那么就有可能需要创建多个ClassPool实例. 每个class Loader都需要创建一个ClassPool实例. 在这种背景下, 就需要通过ClassPool的构造器创建ClassPool实例, 而不能再通过getDefault()方法获得了.</p><p>If a program is running on a web application server, creating multiple instances of ClassPool might be necessary; an instance of ClassPool should be created for each class loader (i.e. container). The program should create a ClassPool object by not calling getDefault() but a constructor of ClassPool.</p><p>Multiple ClassPool objects can be cascaded like java.lang.ClassLoader. For example,</p><p>多个ClassPool对象可以像java.lang.ClassLoader那样呗级联起来. 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool parent = ClassPool.getDefault();</span><br><span class="line">ClassPool child = <span class="keyword">new</span> ClassPool(parent);</span><br><span class="line">child.insertClassPath(<span class="string">&quot;./classes&quot;</span>);</span><br></pre></td></tr></table></figure><p>如果child.get()方法被调用, child ClassPool首先将该请求委托给上一级ClassPool. 如果上一级ClassPool没有找到目标class文件, 那么child ClassPool就会尝试在./classes目录里查找class文件.</p><p>If child.get() is called, the child ClassPool first delegates to the parent ClassPool. If the parent ClassPool fails to find a class file, then the child ClassPool attempts to find a class file under the ./classes directory.</p><p>如果 child.childFirstLookup 被设置为true的话, child ClassPool就会首先尝试尝试查找class文件, 找不到再去上一级ClassPool中查找. 例如:</p><p>If child.childFirstLookup is true, the child ClassPool attempts to find a class file before delegating to the parent ClassPool. For example,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPool parent = ClassPool.getDefault();</span><br><span class="line">ClassPool child = <span class="keyword">new</span> ClassPool(parent);</span><br><span class="line">child.appendSystemPath();         <span class="comment">// the same class path as the default one.</span></span><br><span class="line">child.childFirstLookup = <span class="keyword">true</span>;    <span class="comment">// changes the behavior of the child.</span></span><br></pre></td></tr></table></figure><h2 id="Changing-a-class-name-for-defining-a-new-class"><a href="#Changing-a-class-name-for-defining-a-new-class" class="headerlink" title="Changing a class name for defining a new class"></a>Changing a class name for defining a new class</h2><p>A new class can be defined as a copy of an existing class. The program below does that:</p><p>一个新的class可以通过从已经存在的class的副本中制作出来. 例如L</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面的程序首先获得了Point对应的CtClass对象. 然后它调用setName()设置了一个新的名称Pair. setName()被调用之后, CtClass对象中的所有该class 名称都从Point转换成了Pair. 但是class 定义的其他部分并没有变.</p><p>This program first obtains the CtClass object for class Point. Then it calls setName() to give a new name Pair to that CtClass object. After this call, all occurrences of the class name in the class definition represented by that CtClass object are changed from Point to Pair. The other part of the class definition does not change.</p><p>注意CtClass的setName()也会改变ClassPool中的记录. 从实现角度来说, 一个CLassPool对象就是CtClass对象的一个hash表. setName()也会将hash表中和CtClass对象关联的key也更改掉. key从原先的class名称换到了新的class名称.<br>Note that setName() in CtClass changes a record in the ClassPool object. From the implementation viewpoint, a ClassPool object is a hash table of CtClass objects. setName() changes the key associated to the CtClass object in the hash table. The key is changed from the original class name to the new class name.</p><p>因此, 如果再次调用ClassPool的get(“Point”)方法, 再也不会返回cc所指向的CtClass对象. ClassPool会再次读取Point.class文件, 然后构建出一个新的Point的CtClass对象出来. 这厮因为和Point名称关联的CtClass对象已经不复存在了. 例如:</p><p>Therefore, if get(“Point”) is later called on the ClassPool object again, then it never returns the CtClass object that the variable cc refers to. The ClassPool object reads a class file Point.class again and it constructs a new CtClass object for class Point. This is because the CtClass object associated with the name Point does not exist any more. See the followings:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">CtClass cc1 = pool.get(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc1 is identical to cc.</span></span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);</span><br><span class="line">CtClass cc2 = pool.get(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// cc2 is identical to cc.</span></span><br><span class="line">CtClass cc3 = pool.get(<span class="string">&quot;Point&quot;</span>);   <span class="comment">// cc3 is not identical to cc.</span></span><br></pre></td></tr></table></figure><p>cc1和cc2指向的是和cc指向的相同的对象, 而cc3则不是. 注意, cc.setName(“Pair”) 方法执行之后, cc和cc1指向CtClass对象也代表着Pair class.<br>cc1 and cc2 refer to the same instance of CtClass that cc does whereas cc3 does not. Note that, after cc.setName(“Pair”) is executed, the CtClass object that cc and cc1 refer to represents the Pair class.</p><p>ClassPool对象被用来维持class和CtClass对象之间的一对一映射. 在同一个ClassPool中, Javassist从不允许俩个不同的CtClass对象代表同一个class. 对于程序转换来说, 这是一个非常有意义的特性.</p><p>The ClassPool object is used to maintain one-to-one mapping between classes and CtClass objects. Javassist never allows two distinct CtClass objects to represent the same class unless two independent ClassPool are created. This is a significant feature for consistent program transformation.</p><p>如果你有俩个ClassPool对象, 那么你可以从每个ClassPool里面获得一个相同的class的CtClass对象. 你可以通过修改不同的CtClass对象生成不同版本的class.</p><p>If you have two ClassPool objects, then you can obtain, from each ClassPool, a distinct CtClass object representing the same class file. You can differently modify these CtClass objects to generate different versions of the class.</p><h2 id="Renaming-a-frozen-class-for-defining-a-new-class"><a href="#Renaming-a-frozen-class-for-defining-a-new-class" class="headerlink" title="Renaming a frozen class for defining a new class"></a>Renaming a frozen class for defining a new class</h2><p>一旦一个CtClass对象通过writeFile() or toBytecode()方法转换成一个class, Javassist就不允许CtClass对象再次修改了. 因此, 当代表Point的CtClass对象被转换成一个class之后, 你就不能再通过设置setName()的方式来获取一个Point的副本Pair了. 例如下面的代码, 是不合法的.</p><p>Once a CtClass object is converted into a class file by writeFile() or toBytecode(), Javassist rejects further modifications of that CtClass object. Hence, after the CtClass object representing Point class is converted into a class file, you cannot define Pair class as a copy of Point since executing setName() on Point is rejected. The following code snippet is wrong:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.setName(<span class="string">&quot;Pair&quot;</span>);    <span class="comment">// wrong since writeFile() has been called.</span></span><br></pre></td></tr></table></figure><p>To avoid this restriction, you should call getAndRename() in ClassPool. For example,</p><p>对于这种限制, 你应该调用ClassPool的getAndRename()方法, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;Point&quot;</span>);</span><br><span class="line">cc.writeFile();</span><br><span class="line">CtClass cc2 = pool.getAndRename(<span class="string">&quot;Point&quot;</span>, <span class="string">&quot;Pair&quot;</span>);</span><br></pre></td></tr></table></figure><p>getAndRename()被调用之后, ClassPool首先读取Point.class, 然后创建出一个代表Point class的CtClass对象. 在存储ClassPool的hash表之前, 它将CtClass名称从Point重新命名为Pair. 因此, getAndRename() 可以再writeFile() or toBytecode()被调用之后 再次调用.</p><p>If getAndRename() is called, the ClassPool first reads Point.class for creating a new CtClass object representing Point class. However, it renames that CtClass object from Point to Pair before it records that CtClass object in a hash table. Thus getAndRename() can be executed after writeFile() or toBytecode() is called on the the CtClass object representing Point class.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A ClassPool object is a container of CtClass objects. Once a CtClass object is created, it is recorded in a ClassPool for ever. This is b</summary>
      
    
    
    
    <category term="Javasist" scheme="https://wangmingco.github.io/categories/Javasist/"/>
    
    
  </entry>
  
  <entry>
    <title>Javasist Reading and writing bytecode</title>
    <link href="https://wangmingco.github.io/2019/05/01/JavaLibrary/Javasist%201%20Reading%20and%20writing%20bytecode/"/>
    <id>https://wangmingco.github.io/2019/05/01/JavaLibrary/Javasist%201%20Reading%20and%20writing%20bytecode/</id>
    <published>2019-05-01T12:15:00.000Z</published>
    <updated>2021-11-18T03:12:28.689Z</updated>
    
    <content type="html"><![CDATA[<p><code>Javassist</code> is a class library for dealing with Java bytecode. Java bytecode is stored in a binary file called a class file. Each class file contains one Java class or interface.</p><p><code>Javassist</code> 是一个用于处理 Java 字节码的类库, Java 字节码被存储在一个后缀为 class 的二进制文件中. 每个 class 文件包含一个 Java 类或者 Java 接口.</p><p>The class Javassist.CtClass is an abstract representation of a class file. A CtClass (compile-time class) object is a handle for dealing with a class file. The following program is a very simple example:</p><p><code>Javassist.CtClass</code> 类是对 class 文件的一个抽象表示. 一个 <code>CtClass</code> (compile-time class) 对象处理一个 class 文件. 下面的程序是一个非常简单的示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.get(<span class="string">&quot;test.Rectangle&quot;</span>);</span><br><span class="line">cc.setSuperclass(pool.get(<span class="string">&quot;test.Point&quot;</span>));</span><br><span class="line">cc.writeFile();</span><br></pre></td></tr></table></figure><p>This program first obtains a ClassPool object, which controls bytecode modification with Javassist. The ClassPool object is a container of CtClass object representing a class file. It reads a class file on demand for constructing a CtClass object and records the constructed object for responding later accesses. To modify the definition of a class, the users must first obtain from a ClassPool object a reference to a CtClass object representing that class. get() in ClassPool is used for this purpose. In the case of the program shown above, the CtClass object representing a class test.Rectangle is obtained from the ClassPool object and it is assigned to a variable cc. The ClassPool object returned by getDefault() searches the default system search path.</p><p>这个程序首先获得了一个<code>ClassPool</code>对象, 该对象在 Javassist 中用于控制字节码的修改. <code>ClassPool</code> 对象是一个 <code>CtClass</code>对象的容器. <code>ClassPool</code>将读取的class文件构建出<code>CtClass</code>对象, 同时将构建出来的对象缓存起来, 以便后期访问. <code>ClassPool</code>的<code>get()</code>方法正是出于上述目的. 在上面的代码中, 从<code>ClassPool</code>得到的<code>CtClass</code>对象表示的是一个<code>test.Rectangle</code>对象, 然后将该对象分配给了一个变量<code>cc</code>. <code>getDefault()</code>方法会从默认的系统搜索路径中进行搜索, 然后返回<code>ClassPool</code>对象.</p><p>From the implementation viewpoint, ClassPool is a hash table of CtClass objects, which uses the class names as keys. get() in ClassPool searches this hash table to find a CtClass object associated with the specified key. If such a CtClass object is not found, get() reads a class file to construct a new CtClass object, which is recorded in the hash table and then returned as the resulting value of get().</p><p>从实现上来说, <code>ClassPool</code>是一个<code>CtClass</code>对象的哈希表, 将class的名称作为key. <code>ClassPool</code>中的 <code>get()</code> 方法会根据指定的key对整个哈希表进行搜索找到一个<code>CtClass</code>对象. 如果搜索不到的话, <code>get()</code>方法会尝试读取class文件, 然后构造出一个新的<code>CtClass</code>对象, 将新的<code>CtClass</code>对象缓存后, 再返回出去.</p><p>The CtClass object obtained from a ClassPool object can be modified (details of how to modify a CtClass will be presented later). In the example above, it is modified so that the superclass of test.Rectangle is changed into a class test.Point. This change is reflected on the original class file when writeFile() in CtClass() is finally called.</p><p>从<code>ClassPool</code>中拿到的<code>CtClass</code>对象可以对其进行修改(修改<code>CtClass</code>的细节会在后续的文章中讲解). 在上面的例子中, 通过<code>CtClass</code>的修改就将<code>test.Rectangle</code>的父类修改了<code>test.Point</code>. 如果我们调用了<code>CtClass</code>的<code>writeFile()</code>方法, 这个修改也对原先的class文件生效了.</p><p>writeFile() translates the CtClass object into a class file and writes it on a local disk. Javassist also provides a method for directly obtaining the modified bytecode. To obtain the bytecode, call toBytecode():</p><p><code>writeFile()</code>将<code>CtClass</code>对象转换成一个class文件, 然后将该文件写到本地磁盘上. Javassist还提供了用于直接获得修改后的字节码的方法-<code>toBytecode()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] b = cc.toBytecode();</span><br></pre></td></tr></table></figure><p>You can directly load the CtClass as well:</p><p>你也可以直接将Class加载进去.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = cc.toClass();</span><br></pre></td></tr></table></figure><p>toClass() requests the context class loader for the current thread to load the class file represented by the CtClass. It returns a java.lang.Class object representing the loaded class. For more details, please see this section below.</p><p><code>toClass()</code>方法 会使用当前线程的context class loader将<code>CtClass</code>内的字节码加载进JVM里, 然后返回一个<code>java.lang.Class</code>对象.</p><h2 id="Defining-a-new-class"><a href="#Defining-a-new-class" class="headerlink" title="Defining a new class"></a>Defining a new class</h2><p>To define a new class from scratch, makeClass() must be called on a ClassPool.</p><p>从头开始定义一个新的class, 必须调用<code>ClassPool</code>的<code>makeClass()</code> 方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">CtClass cc = pool.makeClass(<span class="string">&quot;Point&quot;</span>);</span><br></pre></td></tr></table></figure><p>This program defines a class Point including no members. Member methods of Point can be created with factory methods declared in CtNewMethod and appended to Point with addMethod() in CtClass.</p><p>上面的程序定义了一个没有任何成员的名称为<code>Point</code>的class. 可以通过<code>CtNewMethod</code>里声明的一些工厂方法为<code>Point</code>类生成一些方法, 然后通过调用<code>CtClass</code>的<code>addMethod()</code>方法, 将这些新生成的方法加到<code>Point</code>class里面去.</p><p>makeClass() cannot create a new interface; makeInterface() in ClassPool can do. Member methods in an interface can be created with abstractMethod() in CtNewMethod. Note that an interface method is an abstract method.</p><p><code>makeClass()</code> 不能创建新的接口, 但是可以使用<code>ClassPool</code>中的<code>makeInterface()</code>创建一个新的接口. 接口中的方法可以使用<code>CtNewMethod</code>的<code>abstractMethod()</code>方法创建出来. 注意, 一个接口方法就是一个抽象方法.</p><h2 id="Frozen-classes"><a href="#Frozen-classes" class="headerlink" title="Frozen classes"></a>Frozen classes</h2><p>If a CtClass object is converted into a class file by writeFile(), toClass(), or toBytecode(), Javassist freezes that CtClass object. Further modifications of that CtClass object are not permitted. This is for warning the developers when they attempt to modify a class file that has been already loaded since the JVM does not allow reloading a class.</p><p>如果<code>CtClass</code>对象通过<code>writeFile(), toClass(), or toBytecode()</code>等方式转换成一个class文件, Javassist会将<code>CtClass</code>对象冻结. 被冻结的<code>CtClass</code>对象不允许再次修改. 这是为了警告开发者, 他们尝试修改一个已经被load的class文件, 而JVM不允许重新加载class.</p><p>A frozen CtClass can be defrost so that modifications of the class definition will be permitted. For example,</p><p>被冻结的<code>CtClass</code>也可以进行解冻, 解冻之后就可以继续就那些修改了, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CtClasss cc = ...;</span><br><span class="line">    :</span><br><span class="line">cc.writeFile();</span><br><span class="line">cc.defrost();</span><br><span class="line">cc.setSuperclass(...);    <span class="comment">// OK since the class is not frozen.</span></span><br></pre></td></tr></table></figure><p>After defrost() is called, the CtClass object can be modified again.</p><p>当<code>defrost()</code>方法被调用之后, <code>CtClass</code>就可以再次修改了.</p><p>If ClassPool.doPruning is set to true, then Javassist prunes the data structure contained in a CtClass object when Javassist freezes that object. To reduce memory consumption, pruning discards unnecessary attributes (attribute_info structures) in that object. For example, Code_attribute structures (method bodies) are discarded. Thus, after a CtClass object is pruned, the bytecode of a method is not accessible except method names, signatures, and annotations. The pruned CtClass object cannot be defrost again. The default value of ClassPool.doPruning is false.</p><p>如果<code>ClassPool.doPruning</code>被设置为true的话, 当Javassist冻结<code>CtClass</code>对象的时候, 会对其内部的数据结构进行精简. 为了减少内存消耗, pruning精简了<code>attribute_info</code>结构里不必要的属性. 例如方法体里面的<code>Code_attribute</code>结构就会被舍弃掉. 因此一旦<code>CtClass</code>对象被精简之后, 方法除了名称, 签名, 注解等其他信息都不可再被访问到. 而且被精简过后的<code>CtClass</code>对象也不可以再被解冻. <code>ClassPool.doPruning</code>默认值是false.</p><p>To disallow pruning a particular CtClass, stopPruning() must be called on that object in advance:</p><p>如果将要设置某个特殊的<code>CtClass</code>不允许精简, 必选提前调用<code>CtClasss</code>对象的<code>stopPruning()</code>方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CtClasss cc = ...;</span><br><span class="line">cc.stopPruning(<span class="keyword">true</span>);</span><br><span class="line">    :</span><br><span class="line">cc.writeFile();                             <span class="comment">// convert to a class file.</span></span><br><span class="line"><span class="comment">// cc is not pruned.</span></span><br></pre></td></tr></table></figure><p>The CtClass object cc is not pruned. Thus it can be defrost after writeFile() is called.</p><p>上面<code>CtClass</code>对象没有被精简, 因此当它调用了<code>writeFile()</code>方法之后, 还可以被解冻.</p><blockquote><p>Note: While debugging, you might want to temporarily stop pruning and freezing and write a modified class file to a disk drive. debugWriteFile() is a convenient method for that purpose. It stops pruning, writes a class file, defrosts it, and turns pruning on again (if it was initially on).</p></blockquote><blockquote><p>注意: 在调试阶段, 你也许想要临时地停止精简和冻结操作, 然后将一个修改过的class文件写到磁盘中, 此时你可以调用<code>debugWriteFile()</code>方法. 它首先停止精简操作, 然后对class文件执行写入操作, 最后再解冻, 最后回复精简状态.</p></blockquote><h2 id="Class-search-path"><a href="#Class-search-path" class="headerlink" title="Class search path"></a>Class search path</h2><p>The default ClassPool returned by a static method ClassPool.getDefault() searches the same path that the underlying JVM (Java virtual machine) has. If a program is running on a web application server such as JBoss and Tomcat, the ClassPool object may not be able to find user classes since such a web application server uses multiple class loaders as well as the system class loader. In that case, an additional class path must be registered to the ClassPool. Suppose that pool refers to a ClassPool object:</p><p><code>ClassPool.getDefault()</code>返回的默认的<code>ClassPool</code>是基于JVM的path上面搜索得到的. 如果应用程序是运行在一个web应用服务器上(例如JBoss或者Tomcat), <code>ClassPool</code>对象可能会找不到用户定义的class, 因为web应用服务器可能会使用多个class Loader. 在这种情况下可以向<code>ClassPool</code>上注册一个新的class path.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pool.insertClassPath(<span class="keyword">new</span> ClassClassPath(<span class="keyword">this</span>.getClass()));</span><br></pre></td></tr></table></figure><p>This statement registers the class path that was used for loading the class of the object that this refers to. You can use any Class object as an argument instead of this.getClass(). The class path used for loading the class represented by that Class object is registered.</p><p>You can register a directory name as the class search path. For example, the following code adds a directory /usr/local/javalib to the search path:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">pool.insertClassPath(<span class="string">&quot;/usr/local/javalib&quot;</span>);</span><br></pre></td></tr></table></figure><p>The search path that the users can add is not only a directory but also a URL:</p><p>用户能添加的search path不仅仅是目录, 还可以添加URL:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool pool = ClassPool.getDefault();</span><br><span class="line">ClassPath cp = <span class="keyword">new</span> URLClassPath(<span class="string">&quot;www.javassist.org&quot;</span>, <span class="number">80</span>, <span class="string">&quot;/java/&quot;</span>, <span class="string">&quot;org.javassist.&quot;</span>);</span><br><span class="line">pool.insertClassPath(cp);</span><br></pre></td></tr></table></figure><p>这个应用程序添加了一个<code>http://www.javassist.org:80/java/</code>url到search path上. 只有当搜索属于<code>org.javassist</code>这个包下的类的时候, 才会去这个URL上进行搜索. 例如当加载<code>org.javassist.test.Main</code>类时, 它的class 文件将会从<code>http://www.javassist.org:80/java/org/javassist/test/Main.class</code>上进行加载.</p><p>This program adds “<a href="http://www.javassist.org/java/&quot;">http://www.javassist.org:80/java/&quot;</a> to the class search path. This URL is used only for searching classes belonging to a package org.javassist. For example, to load a class org.javassist.test.Main, its class file will be obtained from:</p><p><a href="http://www.javassist.org/java/org/javassist/test/Main.class">http://www.javassist.org:80/java/org/javassist/test/Main.class</a></p><p>Furthermore, you can directly give a byte array to a ClassPool object and construct a CtClass object from that array. To do this, use ByteArrayClassPath. For example,</p><p>另外, 你可以直接向<code>ClassPool</code>对象里指定一个byte数组, <code>ClassPool</code>会从这个byte数组里构建出一个<code>CtClass</code>对象. 想要使用这种方案, 可以用<code>ByteArrayClassPath</code>, 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ClassPool cp = ClassPool.getDefault();</span><br><span class="line"><span class="keyword">byte</span>[] b = a <span class="keyword">byte</span> array;</span><br><span class="line">String name = <span class="class"><span class="keyword">class</span> <span class="title">name</span></span>;</span><br><span class="line">cp.insertClassPath(<span class="keyword">new</span> ByteArrayClassPath(name, b));</span><br><span class="line">CtClass cc = cp.get(name);</span><br></pre></td></tr></table></figure><p>The obtained CtClass object represents a class defined by the class file specified by b. The ClassPool reads a class file from the given ByteArrayClassPath if get() is called and the class name given to get() is equal to one specified by name.</p><p>获取到的<code>CtClass</code>对象就是从<code>b</code>数组里定义出来的. 当<code>get()</code>方法被调用的时候, <code>ClassPool</code>会从给定的<code>ByteArrayClassPath</code>里读取出一个class文件, class名称就是参数name.</p><p>If you do not know the fully-qualified name of the class, then you can use makeClass() in ClassPool:<br>如果你不知道class的全限定名称, 你可以使用<code>ClassPool</code>的<code>makeClass()</code>方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassPool cp = ClassPool.getDefault();</span><br><span class="line">InputStream ins = an input stream <span class="keyword">for</span> reading a <span class="class"><span class="keyword">class</span> <span class="title">file</span></span>;</span><br><span class="line">CtClass cc = cp.makeClass(ins);</span><br></pre></td></tr></table></figure><p>makeClass() returns the CtClass object constructed from the given input stream. You can use makeClass() for eagerly feeding class files to the ClassPool object. This might improve performance if the search path includes a large jar file. Since a ClassPool object reads a class file on demand, it might repeatedly search the whole jar file for every class file. makeClass() can be used for optimizing this search. The CtClass constructed by makeClass() is kept in the ClassPool object and the class file is never read again.</p><p><code>makeClass()</code>方法会从给定的输入流里构建出一个<code>CtClass</code>对象. 你可以使用<code>makeClass()</code>方法先一步地将class文件传给给<code>ClassPool</code>对象. 如果在搜索路径里面有一个特别大的jar文件时, 这有可能提升性能. 因为<code>ClassPool</code>在后台读取class文件时, 有可能将每一个class文件都在jar文件中匹配一遍. <code>makeClass()</code> 可以优化类似的搜索. 通过<code>makeClass()</code>构建出来的<code>CtClass</code>可以缓存在<code>ClassPool</code>里, 当再次查找相同class时, 就不需要再次去class path上搜索了.</p><p>The users can extend the class search path. They can define a new class implementing ClassPath interface and give an instance of that class to insertClassPath() in ClassPool. This allows a non-standard resource to be included in the search path.</p><p>用户可以拓展class search path. 他们可以将<code>ClassPath</code>接口实现类的实例通过<code>insertClassPath()</code>方法添加到<code>ClassPool</code>里. 这就可以允许一个非标准的资源路径加载到search path上.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Javassist&lt;/code&gt; is a class library for dealing with Java bytecode. Java bytecode is stored in a binary file called a class file. E</summary>
      
    
    
    
    <category term="Javasist" scheme="https://wangmingco.github.io/categories/Javasist/"/>
    
    
  </entry>
  
  <entry>
    <title>知乎文章列表</title>
    <link href="https://wangmingco.github.io/2019/04/28/zhihu/"/>
    <id>https://wangmingco.github.io/2019/04/28/zhihu/</id>
    <published>2019-04-28T11:34:00.000Z</published>
    <updated>2022-01-12T07:34:39.882Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><ul><li><a href="https://zhuanlan.zhihu.com/p/63272694">CGLib 动态代理 原理解析</a></li><li><a href="https://zhuanlan.zhihu.com/p/51458514">Mac下使用VSCode搭建Common Lisp 开发环境</a></li><li><a href="https://zhuanlan.zhihu.com/p/50187515">通过Java Agent的redefineClasses实现Mock功能</a></li><li><a href="https://zhuanlan.zhihu.com/p/66368628">Java NIO原理剖析之 DirectBuffer GC</a></li><li><a href="https://zhuanlan.zhihu.com/p/62255648">Java NIO原理剖析之 磁盘IO</a></li><li><a href="https://zhuanlan.zhihu.com/p/60288881">JDK 动态代理实现与原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/62166017">JavaIO原理剖析之 网络IO</a></li><li><a href="https://zhuanlan.zhihu.com/p/130425196">写一个在线Java脚本执行器</a></li><li><a href="https://zhuanlan.zhihu.com/p/72054668">Java String intern() 实现细节</a></li><li><a href="https://zhuanlan.zhihu.com/p/140396504">Java 线程状态</a></li><li><a href="https://zhuanlan.zhihu.com/p/56579882">图解 LinkedBlockingQueue实现原理</a></li><li><a href="https://zhuanlan.zhihu.com/p/123294460">PEG.js 文档 [译]</a></li><li><a href="https://zhuanlan.zhihu.com/p/129746554">SpringBoot Loader 浅析</a></li><li><a href="https://zhuanlan.zhihu.com/p/96378920">当Netty遇上Spring Boot</a></li><li><a href="https://zhuanlan.zhihu.com/p/130412007">基于SpringBoot/Vue/ElementUI 构建权限系统</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a</summary>
      
    
    
    
    <category term="知乎" scheme="https://wangmingco.github.io/categories/%E7%9F%A5%E4%B9%8E/"/>
    
    
  </entry>
  
  <entry>
    <title>PEG.js 文档 [译]</title>
    <link href="https://wangmingco.github.io/2018/12/15/%E5%89%8D%E7%AB%AF/pegjs-document/"/>
    <id>https://wangmingco.github.io/2018/12/15/%E5%89%8D%E7%AB%AF/pegjs-document/</id>
    <published>2018-12-15T02:21:00.000Z</published>
    <updated>2021-11-18T03:12:28.729Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pegjs.org/documentation">PEG.js</a> 是JavaScript里一个简单的parser生成器, 它能够非常快的生成parser, 而且如果在生成过程中遇到了问题, 也会给出非常明确的错误报告. 你可以很轻松地用它处理复杂的数据结构或者计算机语言, 也可以构建出transformers, interpreters, compilers 等其他工具.</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>PEG.js具有如下特性</p><ul><li>简单而富有表现力的语法</li><li>集成了词法和语法分析.</li><li>生成的解析器具有出色的错误报告功能</li><li>基于parsing expression grammar, 生成的parser 比传统的 LL(k) 和 LR(k) parser更加强大.</li><li>适用于浏览器, 命令行或者JavaScript API 等多种环境.</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>在命令行中使用<code>pegjs</code>命令编译, 需要使用全局模式安装<code>PEG.js</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g pegjs</span><br></pre></td></tr></table></figure><p>如果要使用pegjs提供的 JavaScript API, 则需要在当前工作目录安装 <code>PEG.js</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pegjs</span><br></pre></td></tr></table></figure><p>如果既要使用<code>pegjs</code>命令又要使用JavaScript API, 那么你需要将上面俩种方式都安装一遍.</p><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><p>在浏览器中使用, 可以直接下载库文件<a href="https://pegjs.org/#download">PEG.js</a>或者通过<code>Bower</code>安装<code>PEG.js</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install pegjs</span><br></pre></td></tr></table></figure><h2 id="生成-Parser"><a href="#生成-Parser" class="headerlink" title="生成 Parser"></a>生成 Parser</h2><p><code>PEG.js</code>将解析表达式文法解析后, 生成parser. 解析表达式文法描述描述了 将何种输入进行解析然后输出何种输出.(通过执行输入字符的匹配部分的语义操作). 通过一个简单api就可以可以生成一个parser JS对象.</p><h3 id="命令行生成"><a href="#命令行生成" class="headerlink" title="命令行生成"></a>命令行生成</h3><p>想要将grammar文件生成parser, 直接使用<code>pegjs</code>进行编译即可:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pegjs arithmetics.pegjs</span><br></pre></td></tr></table></figure><p>上面的命令会将生成的parser的源码输出到与grammar文件同名的js结尾的文件中. 当然也可以输出到指定文件中:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pegjs -o arithmetics-parser.js arithmetics.pegjs</span><br></pre></td></tr></table></figure><p>但是如果你将输入输出文件都忽略了, 那么系统将会采用标准输入输出.<br>在默认设置下, 生成的parser代码是以Node.js module format 进行组织代码的, 但也可以通过指定<code>--format</code>选项选择其他方式.</p><blockquote><p>下面的选项介绍中也有对该选项的介绍, 详情请参考<a href="https://75team.com/post/%E8%AF%91%E7%A5%9E%E9%A9%AC%E6%98%AFamd-commonjs-umd.html">[译]神马是AMD, CommonJS, UMD?</a></p></blockquote><p>你可以通过如下几个命令来修改生成的parser的默认行为.</p><ul><li><code>--allowed-start-rules</code>: 指定parser开始从哪个rule开始解析. (默认是文法中的第一个rule)</li><li><code>--cache</code>: 开启parser的缓存功能. parser会将parse出来的结果缓存起来, 避免极端情况下解析时间成指数级增加, 但坏处是parser可能会变慢.</li><li><code>--dependency</code>: 让parser依赖一个指定的依赖.(该参数可以多次使用)</li><li><code>--export-var</code>: </li><li><code>--extra-options</code>: 传递给<code>peg.generate</code>的额外参数(JSON 形式).</li><li><code>--extra-options-file</code>: 传递给<code>peg.generate</code>的额外参数文件(JSON 形式).</li><li><code>--format</code>: 生成的parser格式, 可选值有<code>amd</code>, <code>commonjs</code>, <code>globals</code>, <code>umd</code>(默认是<code>commonjs</code>)</li><li><code>--optimize</code>: 为生成的parser在parsing时的优化方式, 可以选择解析速度(<code>speed</code>)或者parse结果代码大小(<code>size</code>). (默认是<code>speed</code>)</li><li><code>--plugin</code>: 为PEG.js配置插件(可以配置多个, 即多次配置)</li><li><code>--trace</code>: 开启parser的trace功能.</li></ul><h3 id="API生成"><a href="#API生成" class="headerlink" title="API生成"></a>API生成</h3><p>在node.js中, 直接<code>require(&quot;pegjs&quot;)</code> 就可以使用peg.js的parser生成器了.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> peg = <span class="built_in">require</span>(<span class="string">&quot;pegjs&quot;</span>);</span><br></pre></td></tr></table></figure><p>在浏览器中, 需要在<code>&lt;script&gt;</code>标签引入<code>PEG.js</code>库. 如果 PEG.js 检测到一个 AMD loader, 它会把自己定义成一个 module, 否则我们只能通过<code>peg</code>这个全局对象使用pegjs的api了.<br>生成一个parser非常简单, 把解析器文法参数传递进<code>peg.generate</code>方法就可以了:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parser = peg.generate(<span class="string">&quot;start = (&#x27;a&#x27; / &#x27;b&#x27;)+&quot;</span>);</span><br></pre></td></tr></table></figure><p>根据参数的不同, 这个方法可能会返回一个新生成的parser对象或者是一个包含parser源码的字符串. 如果文法参数不合法, 则会抛出一个异常(异常中会包含这个错误的详细信息). </p><p>可以通过向<code>peg.generate</code>方法传递第二个参数(该参数是一个对象)改变生成的parser的默认行为. 支持的参数如下:</p><ul><li><code>allowedStartRules</code>: 指定parser开始的rule. (默认是文法中第一个rule.)</li><li><code>cache</code>: 如果设置为<code>true</code>, parser会将parse的结果缓存起来, 可以避免在极端情况下过长的解析时间, 但同时它带来的副作用是会使得parser变慢(默认false).</li><li><code>dependencies</code>: 设置parser的依赖, 其值是一个对象, 其key为访问依赖的变量, 而value为需要加载的依赖module id.只有当<code>format</code>参数被设置为<code>&quot;amd&quot;</code>, <code>&quot;commonjs&quot;</code>, <code>&quot;umd&quot;</code> 该参数才生效. (默认为<code>&#123;&#125;</code>)</li><li><code>exportVar</code>: Name of a global variable into which the parser object is assigned to when no module loader is detected; valid only when format is set to “globals” or “umd” (default: null).</li><li><code>format</code>: 生成的parser格式, 可选值为(<code>&quot;amd&quot;</code>, <code>&quot;bare&quot;</code>, <code>&quot;commonjs&quot;</code>, <code>&quot;globals&quot;</code>, or <code>&quot;umd&quot;</code>). 只有<code>output</code>设置为<code>source</code>, 该参数才生效</li><li><code>optimize</code>: 为生成的parser选择一个优化方案, 可选值为<code>&quot;speed&quot;</code>或者<code>&quot;size&quot;</code>. (默认<code>&quot;speed&quot;</code>)</li><li><code>output</code>: 设置<code>generate()</code>方法返回格式. 如果值为<code>&quot;parser&quot;</code>, 则返回生成的parser对象. 如果设置为<code>&quot;source&quot;</code>, 则返回parser source字符串</li><li><code>plugins</code>: 要使用的插件</li><li><code>trace</code>: 追踪parser的执行过程(默认是false).</li></ul><h2 id="使用-Parser"><a href="#使用-Parser" class="headerlink" title="使用 Parser"></a>使用 Parser</h2><p>使用生成的parser也非常简单, 只需要调用parser对象的<code>parse</code>方法, 然后将一个字符串参数传递进该方法就可以了. 然后该方法会返回一个parse结果(已经在定义parser的文法中描述了返回何种类型的值), 或者如果字符串不合法的话抛出一个异常. 异常会输出详细的错误信息.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser.parse(<span class="string">&quot;abba&quot;</span>); <span class="comment">// returns [&quot;a&quot;, &quot;b&quot;, &quot;b&quot;, &quot;a&quot;]</span></span><br><span class="line"></span><br><span class="line">parser.parse(<span class="string">&quot;abcd&quot;</span>); <span class="comment">// throws an exception </span></span><br></pre></td></tr></table></figure><p>同样的, <code>parse</code>方法也支持选项参数. 支持的参数如下:</p><ul><li>startRule: Name of the rule to start parsing from. 开始从哪个rule执行.</li><li>tracer: Tracer to use. 开启tracer.</li></ul><p>Parsers 也可以自定义参数, 以支持定制化的需求.</p><h2 id="语法和语义"><a href="#语法和语义" class="headerlink" title="语法和语义"></a>语法和语义</h2><p>peg.js的语法和JavaScript非常像, 但是有俩点不同, pegjs不是line-oriented, 而且peg.js会忽略tokens之间的空白符. 同样地可以在peg.js中使用<code>//...</code>和<code>/* ... */</code>进行注释.<br>下面是个peg.js文法示例, 该示例生成的parser会识别出算数表达式 <code>2*(3+4)</code>, 然后将该值计算出来.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">start</span><br><span class="line">  = additive</span><br><span class="line"></span><br><span class="line">additive</span><br><span class="line">  = left:multiplicative <span class="string">&quot;+&quot;</span> right:additive &#123; <span class="keyword">return</span> left + right; &#125;</span><br><span class="line">  / multiplicative</span><br><span class="line"></span><br><span class="line">multiplicative</span><br><span class="line">  = left:primary <span class="string">&quot;*&quot;</span> right:multiplicative &#123; <span class="keyword">return</span> left * right; &#125;</span><br><span class="line">  / primary</span><br><span class="line"></span><br><span class="line">primary</span><br><span class="line">  = integer</span><br><span class="line">  / <span class="string">&quot;(&quot;</span> additive:additive <span class="string">&quot;)&quot;</span> &#123; <span class="keyword">return</span> additive; &#125;</span><br><span class="line"></span><br><span class="line">integer <span class="string">&quot;integer&quot;</span></span><br><span class="line">  = digits:[<span class="number">0</span>-<span class="number">9</span>]+ &#123; <span class="keyword">return</span> <span class="built_in">parseInt</span>(digits.join(<span class="string">&quot;&quot;</span>), <span class="number">10</span>); &#125;</span><br></pre></td></tr></table></figure><p>总体来说, 文法是由rule组成的(例如上面的例子中有5个rule). 每个rule都有一个名字(例如上例中<code>integer</code>) 和 一个解析表达式(例如上例中:<code>digits:[0-9]+ &#123; return parseInt(digits.join(&quot;&quot;), 10); &#125;</code>). 表达式部分首先是一个匹配输入字符串的匹配规则, 然后可能后面还会有一个匹配成功之后要执行的JavaScript代码. rule也可以设置一个更加易于理解的别名, 例如上例中的integer就有一个别名, 该别名主要用于发生解析异常时, 输出日志便于解决问题. 解析动作从第一个rule开始, 我们通常以<code>start</code>命名这个rule.</p><p>rule名称必须符合JavaScript的标识符规则. rule名称后跟一个<code>=</code>符号, 然后<code>=</code>后面是一个解析表达式. 如果rule名称要跟一个别名的话, 该别名必须在rule名称与<code>=</code>之间. rule之间需要由空白行进行分割, rule后也可以跟一个分号<code>;</code></p><p>第一个规则之前可以设置一个初始化器, 初始化器由花括号(“{“和”}”)和花括号内的JavaScript代码组成. 初始化器会在parser开始解析之前被执行. 初始器里定义的变量和方法可以被后续的rule访问到. 初始器可以通过访问<code>options</code>参数访问到传递给parser的参数. 初始化器必须由大括号括起来, 缺一不可. 下面我们看一个简单的使用了初始化代码的示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">makeInteger</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(o.join(<span class="string">&quot;&quot;</span>), <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start</span><br><span class="line">  = additive</span><br><span class="line"></span><br><span class="line">additive</span><br><span class="line">  = left:multiplicative <span class="string">&quot;+&quot;</span> right:additive &#123; <span class="keyword">return</span> left + right; &#125;</span><br><span class="line">  / multiplicative</span><br><span class="line"></span><br><span class="line">multiplicative</span><br><span class="line">  = left:primary <span class="string">&quot;*&quot;</span> right:multiplicative &#123; <span class="keyword">return</span> left * right; &#125;</span><br><span class="line">  / primary</span><br><span class="line"></span><br><span class="line">primary</span><br><span class="line">  = integer</span><br><span class="line">  / <span class="string">&quot;(&quot;</span> additive:additive <span class="string">&quot;)&quot;</span> &#123; <span class="keyword">return</span> additive; &#125;</span><br><span class="line"></span><br><span class="line">integer <span class="string">&quot;integer&quot;</span></span><br><span class="line">  = digits:[<span class="number">0</span>-<span class="number">9</span>]+ &#123; <span class="keyword">return</span> makeInteger(digits); &#125;</span><br></pre></td></tr></table></figure><p>peg.js会将输入的字符串与rule中定义的解析表文法进行匹配. 但是存在着很多不同类型的表达式, 例如匹配字符或者字符类型, 或者匹配可选部分, 或者匹配重复情况等等. 表达式可能还包含其他rule的引用.</p><p>当parser将输入字符串与表达式成功的时候, parser会生成一个JavaScript对象的匹配结果. 例如</p><ul><li>表达式匹配到了一个字符串字面量的话, 它会返回一个包含该字符串的JavaScript字符串对象.</li><li>当表达式匹配到重复的子表达式的时候, 会将所有匹配结果放到一个JavaScript数组对象里返回.</li></ul><p>如果rule A在表达式B被引用了, 那么这个rule A的匹配结果也会传递表达式B, 接着会层层传递, 一直传递到start rule里. 当parser全部解析完成成功之后, 会直接将start rule的匹配结果返回出去.</p><p>解析表达式中比较特殊的是parser action,一段包含在大括号内的JavaScript代码，这段代码可以处理表达式中引用的其他rule的匹配结果，然后自己再返回一个JavaScript对象作为当前表达式的处理结果。这个对象就是当前表达式的匹配结果，换句话说，parser action就是一个匹配结果转换器。</p><p>在我们的运算示例中，有许许多多的parser action. 看一下表达式中的这个action <code>digits:[0-9]+ &#123; return parseInt(digits.join(&quot;&quot;), 10); &#125;</code>. 它拿到了<code>[0-9]+</code>的匹配结果<code>digits</code>(<code>digits</code> 是一个包含数字的字符串数组)。它将这些数字字符转换成一个数字，然后转换成一个js数字对象。</p><h3 id="解析表达式类型"><a href="#解析表达式类型" class="headerlink" title="解析表达式类型"></a>解析表达式类型</h3><p>解析表达式可以分为很多种类, 而且有一些还包含子表达式, 包含子表达式的就形成了一种递归结构.</p><h5 id="quot-literal-quot-39-literal-39"><a href="#quot-literal-quot-39-literal-39" class="headerlink" title="&quot;literal&quot; &#39;literal&#39;"></a><code>&quot;literal&quot;</code> <code>&#39;literal&#39;</code></h5><p>严格匹配字面量字符串, 然后直接返回该字符串字面量. 在pegjs里字符串语法和JavaScript里相同. 在常量最后加一个<code>i</code>表示不区分大小写.</p><blockquote><p>输入的字符串必须与该字符串一模一样(可以加<code>i</code>忽略大小写)</p></blockquote><h5 id=""><a href="#" class="headerlink" title="."></a><code>.</code></h5><p>严格匹配任意单个字符, 然后将它作为一个字符串返回.</p><h5 id="characters"><a href="#characters" class="headerlink" title="[characters]"></a><code>[characters]</code></h5><p>单个字符匹配, 将匹配成功的单个字符作为字符串返回. The characters in the list can be escaped in exactly the same way as in JavaScript string. 匹配模式中的字符列表也可以指定一个范围(例如<code>[a-z]</code>表示要匹配全部小写字符). 如果匹配规则中有<code>^</code>表示匹配规则相反. (例如<code>[^a-z]</code> 表示匹配除了小写字符之外的全部字符). 如果匹配规则后面跟有<code>i</code>的话, 表示忽略大小写.</p><blockquote><p><code>[characters]</code> 通常会和<code>*</code>, <code>+</code> 组合到一起使用, 匹配字符串. 与<code>&#39;literal&#39;</code> 不同的是, 只要单个字符符合<code>[characters]</code> 中任意一个字符即可.</p></blockquote><h5 id="rule"><a href="#rule" class="headerlink" title="rule"></a><code>rule</code></h5><p>在表达式中引用其他rule, 然后与引用的rule进行匹配, 然后返回引用rule的匹配结果.</p><h5 id="expression"><a href="#expression" class="headerlink" title="( expression )"></a><code>( expression )</code></h5><p>匹配一个子表达式, 并返回它的匹配结果.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="expression-1"><a href="#expression-1" class="headerlink" title="expression *"></a><code>expression *</code></h5><p>将表达式匹配0次或多次, 然后将匹配结果通过一个数组返回. 这种匹配形式会尽可能多地尝试匹配. 与正则表达式不同的是, 它们不会进行回溯.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="expression-2"><a href="#expression-2" class="headerlink" title="expression +"></a><code>expression +</code></h5><p>将表达式匹配1次或多次, 然后将匹配结果通过一个数组返回. 这种匹配形式会尽可能多地尝试匹配. 与正则表达式不同的是, 它们不会进行回溯.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="expression-3"><a href="#expression-3" class="headerlink" title="expression ?"></a><code>expression ?</code></h5><p>尝试去匹配表达式. 如果匹配成功, 则返回匹配结果, 否则返回null. 与正则表达式不同的是, 它们不会进行回溯.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="amp-expression"><a href="#amp-expression" class="headerlink" title="&amp; expression"></a><code>&amp; expression</code></h5><p>尝试去匹配表达式. 如果匹配成功, 则返回<code>undefined</code>而且不会消耗输入字符串, 否则认为匹配失败.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="expression-4"><a href="#expression-4" class="headerlink" title="! expression"></a><code>! expression</code></h5><p>尝试去匹配表达式. 如果匹配不成功, 则返回<code>undefined</code>而且不会消耗输入字符串, 否则认为匹配失败.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="amp-predicate"><a href="#amp-predicate" class="headerlink" title="&amp; { predicate }"></a><code>&amp; &#123; predicate &#125;</code></h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to true in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p><p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p><p>The code inside the predicate can also access location information using the location function. It returns an object like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">start</span>: &#123; <span class="attr">offset</span>: <span class="number">23</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  <span class="attr">end</span>:   &#123; <span class="attr">offset</span>: <span class="number">23</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p><p>The code inside the predicate can also access options passed to the parser using the options variable.</p><p>Note that curly braces in the predicate code must be balanced.</p><h5 id="predicate"><a href="#predicate" class="headerlink" title="! { predicate }"></a><code>! &#123; predicate &#125;</code></h5><p>The predicate is a piece of JavaScript code that is executed as if it was inside a function. It gets the match results of labeled expressions in preceding expression as its arguments. It should return some JavaScript value using the return statement. If the returned value evaluates to false in boolean context, just return undefined and do not consume any input; otherwise consider the match failed.</p><p>The code inside the predicate can access all variables and functions defined in the initializer at the beginning of the grammar.</p><p>The code inside the predicate can also access location information using the location function. It returns an object like this:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">start</span>: &#123; <span class="attr">offset</span>: <span class="number">23</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  <span class="attr">end</span>:   &#123; <span class="attr">offset</span>: <span class="number">23</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The start and end properties both refer to the current parse position. The offset property contains an offset as a zero-based index and line and column properties contain a line and a column as one-based indices.</p><p>The code inside the predicate can also access options passed to the parser using the options variable.</p><p>Note that curly braces in the predicate code must be balanced.</p><h5 id="expression-5"><a href="#expression-5" class="headerlink" title="$ expression"></a><code>$ expression</code></h5><p>尝试匹配该表达式. 如果匹配成功, 不会返回匹配结果, 而是返回匹配成功的字符串.</p><blockquote><p>匹配不成功则会抛出异常</p></blockquote><h5 id="label-expression"><a href="#label-expression" class="headerlink" title="label : expression"></a><code>label : expression</code></h5><p>匹配表达式, 然后将匹配结果存储在<code>label</code>里. <code>label</code>必须是一个JavaScript标识符. </p><h5 id="expression1-expression2-expressionn"><a href="#expression1-expression2-expressionn" class="headerlink" title="expression1 expression2 ... expressionn"></a><code>expression1 expression2 ... expressionn</code></h5><p>匹配一个表达式列表, 将全部的匹配结果放到一个数组中返回.</p><h5 id="expression-action"><a href="#expression-action" class="headerlink" title="expression { action }"></a><code>expression &#123; action &#125;</code></h5><p>如果匹配表达式成功, 则运行action, 否则认为匹配失败.</p><blockquote><p>匹配失败返回异常.</p></blockquote><p><code>action</code>是一段JavaScript代码, 可以把它当做一个方法来运行. labeled表达式的匹配结果会被当做action的参数, 传递给action. action应该通过<code>return</code>返回一个JavaScript结果, 该结果会被当做前面表达式的匹配结果.</p><p>在action代码块中, 遇到非预期情况, 想要中断parse可以调用<code>expected</code>方法, 该方法会抛出一个异常. <code>expected</code>方法接受俩个参数, 第一个参数是<code>description</code>, 表明当前位置期望输入以及可选的<code>location</code>信息(默认值是what location would return). <code>description</code>会被当做exception中的message的一部分.</p><p>在action代码中也可以调用<code>error</code>方法, 该方法也会抛出一个异常. <code>error</code>方法接受俩个参数, 第一个参数是error message, 第二个参数是可选的location信息(默认值是 what location would return). message会在抛出异常中使用.<br>action中的代码块可以访问初始器中定义的方法和变量. action代码块的左右大括号必须都在.<br>action 代码块中可以通过<code>text</code>方法访问匹配成功的字符.<br>action代码块中还可以通过访问<code>location</code>方法得到location信息, 该方法会返回下面这种对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">start</span>: &#123; <span class="attr">offset</span>: <span class="number">23</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  <span class="attr">end</span>:   &#123; <span class="attr">offset</span>: <span class="number">25</span>, <span class="attr">line</span>: <span class="number">5</span>, <span class="attr">column</span>: <span class="number">8</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>start</code>属性指向了表达式开始位置, <code>end</code>属性指向表达式的结束位置. <code>offset</code>是一个基于0 的offset索引位置, <code>line</code>和 <code>column</code> 属性是基于1的索引位置.</p><p>action 代码块中可以通过<code>options</code>变量访问传递给parser的options.</p><h5 id="expression1-expression2-expressionn-1"><a href="#expression1-expression2-expressionn-1" class="headerlink" title="expression1 / expression2 / ... / expressionn"></a><code>expression1 / expression2 / ... / expressionn</code></h5><p>按照顺序从左往右一次匹配, 返回第一个匹配成功的结果. 如果都匹配不成功, 则认为匹配失败.</p><blockquote><p>匹配失败返回异常.</p></blockquote><h2 id="Compatibility"><a href="#Compatibility" class="headerlink" title="Compatibility"></a>Compatibility</h2><p>arser generator 和 generated parsers 在以下环境都可以正常运行.</p><ul><li>Node.js 0.10.0+</li><li>Internet Explorer 8+</li><li>Edge</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://pegjs.org/documentation&quot;&gt;PEG.js&lt;/a&gt; 是JavaScript里一个简单的parser生成器, 它能够非常快的生成parser, 而且如果在生成过程中遇到了问题, 也会给出非常明确的错误报告. 你可以很轻松地</summary>
      
    
    
    
    <category term="前端" scheme="https://wangmingco.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="PEG.js" scheme="https://wangmingco.github.io/tags/PEG-js/"/>
    
  </entry>
  
  <entry>
    <title>高并发无锁无IO等待分布式ID生成方案</title>
    <link href="https://wangmingco.github.io/2018/11/18/distributed-id/"/>
    <id>https://wangmingco.github.io/2018/11/18/distributed-id/</id>
    <published>2018-11-18T03:40:00.000Z</published>
    <updated>2021-11-18T03:12:28.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A)"></a>A)</h1><p>网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol</p><h1 id="B"><a href="#B" class="headerlink" title="B)"></a>B)</h1><p>原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.</p><p>目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.</p><span id="more"></span><h1 id="C"><a href="#C" class="headerlink" title="C)"></a>C)</h1><p>算法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ID 生成器</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 整个ID算法很简单,</span></span><br><span class="line"><span class="comment"> * 1. 参考Flickr ID生成算法, 使用MYSQL获得一个自增ID, 然后对ID取模, 算出一个服务器ID</span></span><br><span class="line"><span class="comment"> * 2. 参考Twitter的雪花算法, 算出一个long型ID</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 该算法保证在30年内, 6万台机器, 单机每秒可以产出128, 000个不重复ID</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * CREATE TABLE `account_server_id` (</span></span><br><span class="line"><span class="comment"> * `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="comment"> * `stub` char(1) DEFAULT NULL,</span></span><br><span class="line"><span class="comment"> * PRIMARY KEY (`id`),</span></span><br><span class="line"><span class="comment"> * UNIQUE KEY `stub` (`stub`)</span></span><br><span class="line"><span class="comment"> * ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * |1, 000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0 |000, 0000, 0000, 0000, 0 |000, 0000           |</span></span><br><span class="line"><span class="comment"> * | |                   时间戳(40位)                                |   服务器ID(16位)         | 单个时间戳内的Id(7位) |</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDGeneratorService</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IDGeneratorService.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间戳从哪一年开始计时</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START_YEAR = <span class="number">2018</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间取40位, 保证ID34年内不会重复</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> timeBitsSize = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> serverIdBitsSize = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> countBitsSize = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxIdPerMill;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间开始时间戳, 相当于System.currentTimeMillis()的1970年</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startDateTime;</span><br><span class="line">    <span class="comment">// 服务器ID表示位, 在集群中表示一个节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> serverIdBits;</span><br><span class="line">    <span class="comment">// 单机中, 某个时刻生长得id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> currentID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastGenerateTime = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">private</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 计算出开始生成ID的起始时间戳</span></span><br><span class="line">        LocalDateTime start = LocalDateTime.of(START_YEAR, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        startDateTime = start.toInstant(ZoneOffset.of(<span class="string">&quot;+8&quot;</span>)).toEpochMilli();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 算出支持最大年限的时间</span></span><br><span class="line">        maxTime = ((Double) Math.pow(<span class="number">2</span>, timeBitsSize)).longValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 算出每毫秒能产出多少ID</span></span><br><span class="line">        maxIdPerMill = ((Double) Math.pow(<span class="number">2</span>, countBitsSize)).longValue();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 4. 根据Mysql自增ID取模, 算出每个服务器ID, 在生产环境中, 应该保证服务器数量是该值的一半, 如此一来就可以避免, 服务器集群整体</span></span><br><span class="line"><span class="comment">         * 重启时, 不会拿到与重启之前的服务器相同的Id</span></span><br><span class="line"><span class="comment">         * 这个值的计算是为了适应这种场景, 在服务器灰度上线的时候, 有可能是原来的服务器还没有关闭, 但是新的服务器已经起来了, 此时会有俩套</span></span><br><span class="line"><span class="comment">         * 服务器同时在处理业务逻辑, 那么它们就有可能拿到一样的服务器ID, 从而导致产生一样的ID号</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">long</span> serverSize = ((Double) Math.pow(<span class="number">2</span>, serverIdBitsSize)).longValue();</span><br><span class="line"></span><br><span class="line">        AccountServerId accountServerId = <span class="keyword">new</span> AccountServerId();</span><br><span class="line">        accountServerIdMapper.nextId(accountServerId);</span><br><span class="line">        <span class="keyword">long</span> serverId = (<span class="keyword">int</span>) (accountServerId.getId() % serverSize);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 5. 算出每个服务器ID在long类型中的数据位置, 然后缓存起来</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        serverIdBits = (serverId &lt;&lt; (countBitsSize));</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">&quot;[ID生成器] 开始时间:&#123;&#125;, 时间戳:&#123;&#125; &quot;</span>, <span class="keyword">new</span> Date(startDateTime), startDateTime);</span><br><span class="line">        LOG.info(<span class="string">&quot;[ID生成器] 结束时间:&#123;&#125;, 时间戳:&#123;&#125; &quot;</span>, <span class="keyword">new</span> Date(startDateTime + maxTime), maxTime);</span><br><span class="line">        LOG.info(<span class="string">&quot;[ID生成器] 每毫秒生成最大ID数:&#123;&#125; &quot;</span>, maxIdPerMill);</span><br><span class="line">        LOG.info(<span class="string">&quot;[ID生成器] 当前serverId: &#123;&#125;, serverIdSize:&#123;&#125;&quot;</span>, serverId, serverSize);</span><br><span class="line">        LOG.info(<span class="string">&quot;[ID生成器] serverIdBits: &#123;&#125;&quot;</span>, Long.toBinaryString(serverIdBits));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成一个64位的GUID</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 在next()方法中, 没有使用任何的对象, 如此一来就可以减轻GC的压力.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">long</span> curTime = System.currentTimeMillis() - startDateTime;</span><br><span class="line">            <span class="keyword">if</span> (curTime &gt;= maxTime) &#123;</span><br><span class="line">            LOG.error(<span class="string">&quot;[ID生成器] 超过负载, &#123;&#125;, &#123;&#125;！返回 -1&quot;</span>, curTime, maxTime);</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lastGenerateTime != curTime) &#123;</span><br><span class="line">                currentID = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (currentID &gt;= maxIdPerMill) &#123;</span><br><span class="line">                LOG.error(<span class="string">&quot;[ID生成器] 同一毫秒[&quot;</span> + curTime + <span class="string">&quot;]内生成&quot;</span> + currentID + <span class="string">&quot;个ID！返回 -1&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ++currentID;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            lastGenerateTime = curTime;</span><br><span class="line">            <span class="keyword">long</span> gid = (curTime &lt;&lt; countBitsSize + serverIdBitsSize) | serverIdBits;</span><br><span class="line">            gid |= currentID;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> gid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nextStrId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">tryNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">long</span> id = next();</span><br><span class="line">            <span class="keyword">long</span> diff = System.currentTimeMillis() - start;</span><br><span class="line">            <span class="keyword">if</span> (diff &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                String tid = Thread.currentThread().getName();</span><br><span class="line">                LOG.warn(<span class="string">&quot;[ID生成器] 线程&#123;&#125; 生成ID: &#123;&#125; 大于3毫秒: &#123;&#125;&quot;</span>, tid, id, diff);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (id == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//LOG.error(&quot;[ID生成器] 生成ID为-1, 可能超过每毫秒内生成最大数量, 等待1毫秒&quot;);</span></span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tryNextStrId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(tryNextId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mybatis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountServerIdMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;REPLACE INTO server_id (stub) VALUES (&#x27;a&#x27;);&quot;)</span></span><br><span class="line">    <span class="meta">@SelectKey(statement = &quot;SELECT LAST_INSERT_ID()&quot;, keyProperty = &quot;id&quot;, before = false, resultType = Long.class)</span></span><br><span class="line">    <span class="function">Long <span class="title">nextId</span><span class="params">(AccountServerId accountServerId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `server_id` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `stub` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `stub` (`stub`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(JMockit.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDGeneratorUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(IDGeneratorUtilTest.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_TIMES = <span class="number">2000000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRINT_TIMES = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tested</span></span><br><span class="line"><span class="keyword">private</span> IDGeneratorService idGeneratorUtil;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span></span><br><span class="line"><span class="keyword">private</span> AccountServerIdMapper accountServerIdMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 21026 [main] DEBUG c.f.l.service.IDGeneratorUtilTest - 20506 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 单线程的情况下, 在MacBook Pro上是每毫秒钟生成 97 个id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOneServerIdGenerate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">&#123;</span><br><span class="line">accountServerIdMapper.nextId((AccountServerId) any);</span><br><span class="line">result = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">idGeneratorUtil.init();</span><br><span class="line"></span><br><span class="line">Set&lt;Long&gt; ids = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class="line"><span class="keyword">if</span> (ids.contains(id)) &#123;</span><br><span class="line">System.out.println(id);</span><br><span class="line">&#125;</span><br><span class="line">ids.add(id);</span><br><span class="line">&#125;</span><br><span class="line">logger.debug((System.currentTimeMillis() - start) + <span class="string">&quot; 毫秒内生成 &quot;</span> + ids.size() + <span class="string">&quot; 个ID&quot;</span>);</span><br><span class="line">Assert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class="line"></span><br><span class="line">Object[] idArray = ids.toArray();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; PRINT_TIMES; i++) &#123;</span><br><span class="line">logger.debug(idArray[i] + <span class="string">&quot; : &quot;</span> + Long.toBinaryString((Long) idArray[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 207703 [Thread-7] DEBUG c.f.l.service.IDGeneratorUtilTest - 207136 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 208031 [Thread-3] DEBUG c.f.l.service.IDGeneratorUtilTest - 207465 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 208626 [Thread-10] DEBUG c.f.l.service.IDGeneratorUtilTest - 208059 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 208630 [Thread-9] DEBUG c.f.l.service.IDGeneratorUtilTest - 208063 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209153 [Thread-6] DEBUG c.f.l.service.IDGeneratorUtilTest - 208586 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209170 [Thread-5] DEBUG c.f.l.service.IDGeneratorUtilTest - 208603 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209373 [Thread-2] DEBUG c.f.l.service.IDGeneratorUtilTest - 208807 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209412 [Thread-1] DEBUG c.f.l.service.IDGeneratorUtilTest - 208846 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209508 [Thread-4] DEBUG c.f.l.service.IDGeneratorUtilTest - 208941 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * 209536 [Thread-8] DEBUG c.f.l.service.IDGeneratorUtilTest - 208969 毫秒内生成 2000000 个ID</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 多线程的情况下, 在MacBook Pro上是每毫秒钟生成 9 个id, 可见由于锁的竞争, 产生的影响还是非常大的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMutilServerIdGenerate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">&#123;</span><br><span class="line">accountServerIdMapper.nextId((AccountServerId) any);</span><br><span class="line">result = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">idGeneratorUtil.init();</span><br><span class="line"></span><br><span class="line">Runnable runnable = () -&gt; &#123;</span><br><span class="line">Set&lt;Long&gt; ids = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX_TIMES; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> id = idGeneratorUtil.tryNextId();</span><br><span class="line">ids.add(id);</span><br><span class="line">&#125;</span><br><span class="line">logger.debug((System.currentTimeMillis() - start) + <span class="string">&quot; 毫秒内生成 &quot;</span> + ids.size() + <span class="string">&quot; 个ID&quot;</span>);</span><br><span class="line">Assert.assertEquals(ids.size(), MAX_TIMES);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> cpus = Runtime.getRuntime().availableProcessors() + <span class="number">2</span>;</span><br><span class="line">logger.debug(<span class="string">&quot;CPU : &quot;</span> + cpus);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cpus; i++) &#123;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">list.add(thread);</span><br><span class="line">thread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Thread thread : list) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">thread.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A)&quot;&gt;&lt;/a&gt;A)&lt;/h1&gt;&lt;p&gt;网络上现在有很多的分布式ID生成算法, 各大厂商也开源了自己的分布式id生成算法. 前段时间项目里有个生成唯一id的需求, 思考了一下, 将flick的id生成方案和Twitter的id生成算法结合到一起, 写了个小算法, 也算是站在巨人的肩膀上做了点小东西, lol&lt;/p&gt;
&lt;h1 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B)&quot;&gt;&lt;/a&gt;B)&lt;/h1&gt;&lt;p&gt;原理大致是这样的, 利用mysql insert来计算出集群中某个节点处于集群中的位置, 算出serverId, 然后利用雪花算法在该id上生成分布式id.&lt;/p&gt;
&lt;p&gt;目前的实现是采用long来进行存储的, 因此只能在生成时间维度, 节点数量, 和每毫秒内生成的数量上进行调节, 如果你们可以存储字符串的话, 那么可以拓展一下该算法, 加大时间和空间的容量.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Java入门及书单</title>
    <link href="https://wangmingco.github.io/2018/11/14/JavaSE/java-books/"/>
    <id>https://wangmingco.github.io/2018/11/14/JavaSE/java-books/</id>
    <published>2018-11-14T06:13:00.000Z</published>
    <updated>2021-11-18T03:12:28.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).</p><p>经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.</p><p>Java入门的话, 分析一下哪些行文算是入门</p><ul><li>搭建Java开发环境</li><li>掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象…)</li></ul><p>私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.</p><blockquote><p>上面第二点只是把当下想到的说了一下, 更多的还请参考(<a href="http://www.runoob.com/java/java-tutorial.html">Java 教程</a>).</p></blockquote><p>入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术</p><ul><li>SpringBoot: 用于后台web服务器</li><li>Mybatis: 替代原生的JDBC, 与mysql打交道的</li><li>vue/element-ui: 写前台页面的</li></ul><p>基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.</p><blockquote><p>如果前台从0写起来比较费劲, 可以参考一个开源的前端工程<a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a></p></blockquote><p>随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? </p><span id="more"></span><h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><p>我基本上没有买过/看过Java基础书, 类似于Java从入门到精通这一类的, 所以我给出的一些书单都具有一些方向性.</p><h5 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h5><ul><li>Java网络编程: 将Java中网络相关的包都讲解了一下, 写的不错</li><li>Netty权威指南: 由于我是做游戏出身的, 工作上基本上netty就是标配了, netty对我在代码架构上有比较大的影响(各种继承, 抽象, 笑哭.jpg)</li><li>Tomcat架构解析: 对Tomcat剖析的非常深入的一本书, Java程序员必读</li><li>图解TCP/IP: 同样的是一本好书, 在轻松氛围下对tcp/ip协议栈有一个比较清晰的认识, 算是tcp/ip协议栈的入门书籍吧.</li><li>zeroc ice权威指南: 这本书其实没啥好说的, 如果公司在用ice而自己又不熟悉ice的话, 直接买来读就是了, 如果没有用, 暂时也不必入这个坑</li></ul><h5 id="并发相关"><a href="#并发相关" class="headerlink" title="并发相关"></a>并发相关</h5><p>并发编程, 按照下面的顺序去读这三本书就好了.</p><ul><li>Java7 编发编程实战手册, 这本书新手读起来就不错了, 详细介绍了Java中各种并发API的使用.</li><li>Java并发编程实战, 刚开始编程时不推荐这本书, 新人学习起来难度大一些, 概念颇多.</li><li>多处理器编程的艺术, 如果想要深入各种锁的实现, 并发原理的话, 这本书着实该读.</li></ul><h4 id="JVM相关"><a href="#JVM相关" class="headerlink" title="JVM相关"></a>JVM相关</h4><p>提到Java永远也绕不过去jvm</p><ul><li>Java虚拟机规范</li><li>深入理解Java虚拟机</li><li>实战Java虚拟机</li><li>垃圾回收的算法与实现</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li>算法(第四版)</li><li>大话数据结构</li><li>Effective Java</li></ul><p>目前能想到的书就这么多, 可以根据自己的兴趣和方向选择来读哈.</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;p&gt;今天周六, 在家闲来无事, 多写俩篇博客(本想说成写文章, 但想了想该文实在承担不起文章二字, 便罢) 把最近看到的和想到的记录一下(恰好也把俩三年前写博客的热情又拾了起来).&lt;/p&gt;
&lt;p&gt;经常在知乎上看到, 有人发问, 新人如何入门Java, 新人应该读哪些Java相关的书籍, 今天来谈谈这个问题.&lt;/p&gt;
&lt;p&gt;Java入门的话, 分析一下哪些行文算是入门&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭建Java开发环境&lt;/li&gt;
&lt;li&gt;掌握Java基础语法(原生类型/包装类型, 变量声明, 循环控制, 方法声明/调用, 类定义, 实例化对象…)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私认为掌握上面这俩点就算Java入门了, 也不需要买什么书籍, 在网上找个教程, 或者去慕课网/B站/油管 上面找个教学教程, 利用3-5天的时间学一学就好了, 会用能记住就ok了, 不必深究语法.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面第二点只是把当下想到的说了一下, 更多的还请参考(&lt;a href=&quot;http://www.runoob.com/java/java-tutorial.html&quot;&gt;Java 教程&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;入门之后干什么呢? 找一个自己喜欢的方向, 做个小项目练练手. 例如写一个web项目, 再学习一下下面的几个技术&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SpringBoot: 用于后台web服务器&lt;/li&gt;
&lt;li&gt;Mybatis: 替代原生的JDBC, 与mysql打交道的&lt;/li&gt;
&lt;li&gt;vue/element-ui: 写前台页面的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本上用上面这三个技术就能写一个后台管理系统出来, 当然我也只是把我熟悉的技术写了一下, 如果你身边有其他技术栈的同学指导, 也可以采用其他的技术栈.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果前台从0写起来比较费劲, 可以参考一个开源的前端工程&lt;a href=&quot;https://github.com/PanJiaChen/vue-element-admin&quot;&gt;vue-element-admin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;随着功能的不断完善, 你对技术的理解也会不断的加深, 开发的兴趣也会不断加大. 只有对一件事情有兴趣了, 我们才想把它做好, 不是吗? &lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JMX 笔记</title>
    <link href="https://wangmingco.github.io/2018/11/14/JavaSE/jmx/"/>
    <id>https://wangmingco.github.io/2018/11/14/JavaSE/jmx/</id>
    <published>2018-11-14T06:13:00.000Z</published>
    <updated>2021-11-18T03:12:28.708Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/management/toc.html">Java SE Monitoring and Management Guide</a></p><h2 id="MBean-Server"><a href="#MBean-Server" class="headerlink" title="MBean Server"></a>MBean Server</h2><p>MBean Server 是MBean的一个仓库, 我们并不直接访问MBean, 而是通过通过一个唯一的<code>ObjectName</code>通过 MBean Server来进行访问.</p><p>如果要实现一个MBean Server必须实现<code>javax.management.MBeanServer</code>接口.</p><p>如果我们要创建自己的MBean Server的话, 可以使用</p><ul><li><code>MBeanServerFactory.createMBeanServer();</code></li><li><code>MBeanServerFactory.newMBeanServer();</code></li></ul><p><code>createMBeanServer()</code>内部会调用<code>newMBeanServer()</code>, 但是<code>createMBeanServer()</code>会将<code>newMBeanServer()</code>创建出来的MBean Server缓存到<code>ArrayList&lt;MBeanServer&gt; mBeanServerList</code>一个列表里. 这点先姑且不去讨论, 集中精力看看Platform MBean Server.</p><p>官方也建议我们使用Platform MBean Server(也就是自带的那个MBean Server), 在没有特殊需求之下, 没有必要建立自己的MBean Server.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatformMBeanServerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">        System.out.println(<span class="string">&quot;MBeanCount : &quot;</span> + server.getMBeanCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MBean"><a href="#MBean" class="headerlink" title="MBean"></a>MBean</h2><p>看完MBServer, 我们来看一下MBean.</p><h3 id="MXBean-连接"><a href="#MXBean-连接" class="headerlink" title="MXBean 连接"></a>MXBean 连接</h3><p>首先先看一下<a href="http://docs.oracle.com/javase/8/docs/technotes/guides/management/overview.html#gdeuk">MXBean</a>, 什么是MXBean呢? 它是一种用来监控和管理Java VM的MBean.</p><p>我们可以通过三种方式来访问MXBean</p><ul><li>通过<code>ManagementFactory</code>直接进行访问.</li><li>通过<code>MXBean proxy</code>直接访问.</li><li>通过<code>MBeanServerConnection</code>间接访问.</li></ul><p>如果在同一个VM上的话, 我们可以通过ManagementFactory 提供的API进行直接访问</p><ul><li><code>getClassLoadingMXBean()</code></li><li><code>getGarbageCollectorMXBeans()</code></li><li><code>getRuntimeMXBean()</code><br>等等</li></ul><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RuntimeMXBean mxbean = ManagementFactory.getRuntimeMXBean();</span><br><span class="line">String vendor = mxbean.getVmVendor(); </span><br></pre></td></tr></table></figure><p>如果不在同一个VM的话, 我们可以通过MXBean Proxy的方式进行远程访问.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MBeanServerConnection mbs;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// Get a MBean proxy for RuntimeMXBean interface</span></span><br><span class="line">RuntimeMXBean proxy = ManagementFactory.newPlatformMXBeanProxy(mbs,</span><br><span class="line">                                             ManagementFactory.RUNTIME_MXBEAN_NAME,</span><br><span class="line">                                             RuntimeMXBean.class);</span><br><span class="line"><span class="comment">// Get standard attribute &quot;VmVendor&quot;</span></span><br><span class="line">String vendor = proxy.getVmVendor();</span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MBeanServerConnection mbs;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  ObjectName oname = <span class="keyword">new</span> ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);</span><br><span class="line">  <span class="comment">// Get standard attribute &quot;VmVendor&quot;</span></span><br><span class="line">  String vendor = (String) mbs.getAttribute(oname, <span class="string">&quot;VmVendor&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (....) &#123;</span><br><span class="line">  <span class="comment">// Catch the exceptions thrown by ObjectName constructor</span></span><br><span class="line">  <span class="comment">// and MBeanServer.getAttribute method</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们通过上述方式拿到MXBean之后, 就可以访问它里面的各种属性了.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.sun.management.OperatingSystemMXBean mxbean =</span><br><span class="line">  (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the number of processors</span></span><br><span class="line"><span class="keyword">int</span> numProcessors = mxbean.getAvailableProcessors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get the Oracle JDK-specific attribute Process CPU time</span></span><br><span class="line"><span class="keyword">long</span> cpuTime = mxbean.getProcessCpuTime();</span><br></pre></td></tr></table></figure><h3 id="监控线程和CPU"><a href="#监控线程和CPU" class="headerlink" title="监控线程和CPU"></a>监控线程和CPU</h3><p><code>ThreadMXBean </code>提供了对线程和CPU的监控.<br>在使用这个功能之前, 我们可能需要判断一下, Java VM是否开启了线程content监控</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThreadMXBean.isThreadContentionMonitoringSupported()</span><br></pre></td></tr></table></figure><p>如果没有开启的话, 我们调用一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setThreadContentionMonitoringEnabled()</span><br></pre></td></tr></table></figure><p>开启它就可以了.</p><p>还有对线程统计的支持</p><ul><li><code>isThreadCpuTimeSupported()</code>检测是否开启</li><li><code>isCurrentThreadCpuTimeSupported()</code> 上面那个是对任意线程的统计检测, 这个则是对并发线程的检测</li></ul><p>同理, 对CPU需要同样地处理</p><ul><li><code>isThreadCpuTimeEnabled</code> 检测CPU</li><li><code>setThreadCpuTimeEnabled()</code> 开启检测CPU</li></ul><h3 id="操作系统的管理"><a href="#操作系统的管理" class="headerlink" title="操作系统的管理"></a>操作系统的管理</h3><p>通过<code>OperatingSystem </code>可以拿到操作系统相关的信息</p><ul><li>CPU的运行时间(Process CPU time).</li><li>物理内存剩余和总共大小.</li><li>committed virtual memory数量. (这个值表示的是当前运行的进程还可使用的虚拟内存的大小, 也就是在程序启动时分配的虚拟内存现在还剩下多少).</li><li>交换分区剩余和总共大小.</li><li>打开的文件()数量(因为Uniux哲学是一切皆文件, 所以这个值只支持Solaris, Linux, or Mac OS X).</li></ul><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><p>为了记录日志, Java特地提供了一个特殊的接口<code>LoggingMXBean</code>, 使用这个接口我们可以完成下面任务</p><ul><li>获取指定logger的日志级别  </li><li>获取到当前注册的logger列表</li><li>获取到指定logger的父名称  </li><li>设置指定logger新的日志级别</li></ul><p><code>LoggingMXBean</code> 的<code>ObjectName </code>为<code>java.util.logging:type=Logging</code>. 这个名称存储在<code>LogManager.LOGGING_MXBEAN_NAME</code>里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoggingMXBean loggingMXBean = LogManager.getLoggingMXBean();</span><br><span class="line">System.out.println(loggingMXBean.getLoggerNames());</span><br></pre></td></tr></table></figure><p>得到的loggerName有</p><ul><li><code>javax.management.snmp</code></li><li><code>global</code></li><li><code>javax.management.notification</code></li><li><code>javax.management.modelmbean</code></li><li><code>javax.management.timer</code></li><li><code>javax.management</code></li><li><code>javax.management.mlet</code></li><li><code>javax.management.mbeanserver</code></li><li><code>javax.management.snmp.daemon</code></li><li><code>javax.management.relation</code></li><li><code>javax.management.monitor</code></li><li><code>javax.management.misc</code><br>由于我的测试没有使用任何的日志系统, 因此它只打印了Java自带的一些logger, 但是如果你在SpringBoot或者自己添加上log4j的话, 会获取到更多的logger, 我们可以通过这个接口, 在服务器运行阶段动态修改logger级别.</li></ul><blockquote><p>尽管以前也做过修改日志级别的事情, 但是是通过第三方框架自带的api进行修改的, 但是使用这个MXBean, 貌似可以跨框架了, O(∩_∩)O~</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/technotes/guides/management/toc.html&quot;&gt;Java SE Monitoring and Management Guide&lt;/a&gt;&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>通过Java Agent的redefineClasses实现Mock功能</title>
    <link href="https://wangmingco.github.io/2018/11/05/JavaSE/agent-mock/"/>
    <id>https://wangmingco.github.io/2018/11/05/JavaSE/agent-mock/</id>
    <published>2018-11-05T12:15:00.000Z</published>
    <updated>2021-11-18T03:12:28.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="A"><a href="#A" class="headerlink" title="A)"></a>A)</h1><p>最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉.<br>当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.</p><p>由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).</p><h1 id="B"><a href="#B" class="headerlink" title="B)"></a>B)</h1><blockquote><p>这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.</p></blockquote><p>利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.</p><h1 id="C"><a href="#C" class="headerlink" title="C)"></a>C)</h1><p>整个mock框架分为俩部分.</p><ul><li>agent-core, mock的核心代码</li><li>agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了</li></ul><span id="more"></span><h2 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── co</span><br><span class="line">    │   │       └── wangming</span><br><span class="line">    │   │           └── agent</span><br><span class="line">    │   │               ├── Agent.java</span><br><span class="line">    │   │               └── ClassesLoadUtil.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── META-INF</span><br><span class="line">    │           └── MANIFEST.MF</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── Test.java</span><br></pre></td></tr></table></figure><p>核心就是俩个Java文件和一个MF文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Agent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ScheduledExecutorService scheduledExecutorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> List&lt;String&gt; hashCached = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation instrumentation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Agnet 进入!!! &quot;</span> + agentArgs);</span><br><span class="line">scheduledExecutorService.scheduleAtFixedRate(() -&gt; tryRedefine(instrumentation, agentArgs), <span class="number">0</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tryRedefine</span><span class="params">(Instrumentation instrumentation, String agentArgs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Class[] allLoadedClasses = instrumentation.getAllLoadedClasses();</span><br><span class="line"><span class="comment">//System.out.println(&quot;allLoadedClasses数量:&quot; + allLoadedClasses.length);</span></span><br><span class="line"></span><br><span class="line">Map&lt;String, Class&gt; finupAllLoadedClasses = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (loadedClass == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (loadedClass.getCanonicalName() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!loadedClass.getCanonicalName().startsWith(<span class="string">&quot;com.finup&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hashCached.contains(loadedClass.getCanonicalName())) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">finupAllLoadedClasses.put(loadedClass.getCanonicalName(), loadedClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, <span class="keyword">byte</span>[]&gt; rewriteClasses = ClassesLoadUtil.getRewriteClasses(agentArgs);</span><br><span class="line"><span class="keyword">for</span> (String className : hashCached) &#123;</span><br><span class="line">rewriteClasses.remove(className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (finupAllLoadedClasses.size() == <span class="number">0</span> || rewriteClasses.size() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;finupAllLoadedClasses数量:&quot;</span> + finupAllLoadedClasses.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String className : rewriteClasses.keySet()) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] classBytes = rewriteClasses.get(className);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (classBytes == <span class="keyword">null</span> || classBytes.length == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;从 rewriteClasses 找不到class: &quot;</span> + className);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class redefineClass = finupAllLoadedClasses.get(className);</span><br><span class="line"><span class="keyword">if</span> (redefineClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;从 finupAllLoadedClasses 找不到class: &quot;</span> + className);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;开始redefineClasses: &quot;</span> + className);</span><br><span class="line"></span><br><span class="line">ClassDefinition classDefinition = <span class="keyword">new</span> ClassDefinition(redefineClass, classBytes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">instrumentation.redefineClasses(classDefinition);</span><br><span class="line">hashCached.add(className);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;结束redefineClasses: &quot;</span> + className);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnmodifiableClassException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesLoadUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; path2Classes = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; className2Classes = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> havaLoaded = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadFromZipFile</span><span class="params">(String jarPath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ZipFile zipFile = <span class="keyword">new</span> ZipFile(jarPath);</span><br><span class="line">Enumeration&lt;? extends ZipEntry&gt; entrys = zipFile.entries();</span><br><span class="line"><span class="keyword">while</span> (entrys.hasMoreElements()) &#123;</span><br><span class="line">ZipEntry zipEntry = entrys.nextElement();</span><br><span class="line">entryRead(jarPath, zipEntry);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">entryRead</span><span class="params">(String jarPath, ZipEntry ze)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ze.getSize() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">String fileName = ze.getName();</span><br><span class="line"><span class="keyword">if</span> (!fileName.endsWith(<span class="string">&quot;.class&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!fileName.contains(<span class="string">&quot;finup&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (ZipFile zf = <span class="keyword">new</span> ZipFile(jarPath); InputStream input = zf.getInputStream(ze);</span><br><span class="line">     ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream()) &#123;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//logger.error(&quot;Code Reload cant find file : &quot; + fileName);</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((b = input.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">byteArrayOutputStream.write(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">path2Classes.put(fileName, bytes);</span><br><span class="line"></span><br><span class="line">String name1 = fileName.replaceAll(<span class="string">&quot;\\.class&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">String name2 = name1.replaceAll(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line"></span><br><span class="line">className2Classes.put(name2, bytes);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;加载文件: fileName : &quot;</span> + fileName + <span class="string">&quot;.  className:&quot;</span> + name2);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//System.out.println(ze.getName() + &quot; size is 0&quot;);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; getRewriteClasses(String agentArgs) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (className2Classes) &#123;</span><br><span class="line"><span class="keyword">if</span> (!havaLoaded) &#123;</span><br><span class="line">loadFromZipFile(agentArgs);</span><br><span class="line">havaLoaded = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> className2Classes;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MF</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: co.wangming.agent.Agent</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure><p>基本上这三个文件就可以完成功能了.</p><h2 id="agent-client"><a href="#agent-client" class="headerlink" title="agent-client"></a>agent-client</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── co</span><br><span class="line">    │   │       └── wangming</span><br><span class="line">    │   │           └── agent_client</span><br><span class="line">    │   │               └── service</span><br><span class="line">    │   │                   └── TestService</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── META-INF</span><br><span class="line">    │           └── MANIFEST.MF</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: co.wangming.agent.Agent</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure><p>我们只需要把需要覆盖的<code>TestService</code>类在这里重写一下就好了, 但是注意, 不能删除/增加 方法/字段, 不能修改继承结构. 总而言之就是不能修改类的结构, 但是只是修改方法实现应该也能满足大多数需求了.</p><blockquote><p>以后有时间再想想怎么用Spring AOP来实现</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;A&quot;&gt;&lt;a href=&quot;#A&quot; class=&quot;headerlink&quot; title=&quot;A)&quot;&gt;&lt;/a&gt;A)&lt;/h1&gt;&lt;p&gt;最近组内项目有个模块进行了较大规模的重构, 需要跑一下压力测试, 看一下性能如何. 但是介于产品的模式, 在正常场景下需要向通道发送消息, 然而在压测中, 我们希望这段行为能被mock掉.&lt;br&gt;当时想到的方案可以采用Spring AOP, JMockit或者自己通过Javasisit/ASM这种字节码框架来实现功能.&lt;/p&gt;
&lt;p&gt;由于项目中我自己很少使用Spring AOP来做一些功能, 便没让它当首选方案, 研究了一下JMockit实现, 发现是使用动态Agent实现的.ok, 那么便初步定了一下方案Agent+Javasisit来实现(ASM手写字节码实在太痛苦).&lt;/p&gt;
&lt;h1 id=&quot;B&quot;&gt;&lt;a href=&quot;#B&quot; class=&quot;headerlink&quot; title=&quot;B)&quot;&gt;&lt;/a&gt;B)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这一段貌似是废话, 你们也看不见代码发生的真实地转变, 我只是记录一下心路历程.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用了2个小时, 采用Agent+Javasisit实现了一个小的模块, 基本功能也都实现了, 但是使用起来实在是太麻烦了, 代码耦合性太高. 于是又换了个思路, 去掉了Javasisit框架, 也完美地实现了功能.&lt;/p&gt;
&lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C)&quot;&gt;&lt;/a&gt;C)&lt;/h1&gt;&lt;p&gt;整个mock框架分为俩部分.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agent-core, mock的核心代码&lt;/li&gt;
&lt;li&gt;agent-client, 在这个工程中, 我们只需要在pom中引入需要替换的工程的依赖, 然后再agent-client中把要替换的类重写一遍就好了&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>工作/生活中用到的软件/插件/小工具</title>
    <link href="https://wangmingco.github.io/2018/10/30/work-knife/"/>
    <id>https://wangmingco.github.io/2018/10/30/work-knife/</id>
    <published>2018-10-30T12:43:00.000Z</published>
    <updated>2021-11-18T03:12:28.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><ul><li>Awesome Autocomplete for GitHub</li><li>Enhanced Github</li><li>Octotree</li><li>OneTab</li><li>Pinbox</li><li>Tampermonkey</li></ul><h2 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h2><p>这部分参考自<a href="https://www.zhihu.com/question/59227720">有哪些命令行的软件堪称神器？</a></p><ul><li>bat: cat 替换工具</li><li>mycli: mysql客户端</li><li>brew: mac安装包管理</li><li>ag：比grep、ack更快的递归搜索文件内容。</li><li>jq: json文件处理以及格式化显示</li><li>shellcheck：shell脚本静态检查工具</li><li>fzf：命令行下模糊搜索工具</li><li>mosh：基于UDP的终端连接</li><li>you-get: 非常强大的媒体下载工具</li><li>glances：更强大的 htop / top 代替者</li><li>figlet: 将输入字符转换成艺术字体。</li><li>Pandoc: 可以将 markdown 转成各式各样的格式：PDF、DOCX、EPUB、MOBI</li><li>httpie: </li><li>asciinema: 终端下的录制分享软件</li><li>ttygif: 终端录屏工具</li><li>Teleport</li><li>prettyping: ping 替代品</li><li>fzf</li><li>aria2</li><li>ncdu</li><li>jenv</li><li>nnn: 文件管理器</li><li>fd: find替代命令</li><li>htop</li><li>sz/rz</li><li>ip</li><li>fcrackzip，破解zip压缩包密码。</li><li>Rename-CLI</li><li>alder</li><li>fasd</li></ul><span id="more"></span><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><ul><li>Code Runner</li><li>Markdown Preview Enhanced</li><li>MySQL Syntax</li><li>Open in Browser</li><li>Path Intellisense</li><li>PEG.js Language</li><li>Prettier - Code formatter</li><li>REST Client</li><li>Settings Sync</li><li>Terminal</li></ul><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>列举一下idea中常用的插件(仅限于自己要安装的)</p><ul><li>ASM Bytecode Outline</li><li>BashSupport</li><li>Free Mybatis Plugin</li><li>Grep Console</li><li>JavaCC Plugin</li><li>Translation</li></ul><!--more-->]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Chrome&quot;&gt;&lt;a href=&quot;#Chrome&quot; class=&quot;headerlink&quot; title=&quot;Chrome&quot;&gt;&lt;/a&gt;Chrome&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Awesome Autocomplete for GitHub&lt;/li&gt;
&lt;li&gt;Enhanced Github&lt;/li&gt;
&lt;li&gt;Octotree&lt;/li&gt;
&lt;li&gt;OneTab&lt;/li&gt;
&lt;li&gt;Pinbox&lt;/li&gt;
&lt;li&gt;Tampermonkey&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h2&gt;&lt;p&gt;这部分参考自&lt;a href=&quot;https://www.zhihu.com/question/59227720&quot;&gt;有哪些命令行的软件堪称神器？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bat: cat 替换工具&lt;/li&gt;
&lt;li&gt;mycli: mysql客户端&lt;/li&gt;
&lt;li&gt;brew: mac安装包管理&lt;/li&gt;
&lt;li&gt;ag：比grep、ack更快的递归搜索文件内容。&lt;/li&gt;
&lt;li&gt;jq: json文件处理以及格式化显示&lt;/li&gt;
&lt;li&gt;shellcheck：shell脚本静态检查工具&lt;/li&gt;
&lt;li&gt;fzf：命令行下模糊搜索工具&lt;/li&gt;
&lt;li&gt;mosh：基于UDP的终端连接&lt;/li&gt;
&lt;li&gt;you-get: 非常强大的媒体下载工具&lt;/li&gt;
&lt;li&gt;glances：更强大的 htop / top 代替者&lt;/li&gt;
&lt;li&gt;figlet: 将输入字符转换成艺术字体。&lt;/li&gt;
&lt;li&gt;Pandoc: 可以将 markdown 转成各式各样的格式：PDF、DOCX、EPUB、MOBI&lt;/li&gt;
&lt;li&gt;httpie: &lt;/li&gt;
&lt;li&gt;asciinema: 终端下的录制分享软件&lt;/li&gt;
&lt;li&gt;ttygif: 终端录屏工具&lt;/li&gt;
&lt;li&gt;Teleport&lt;/li&gt;
&lt;li&gt;prettyping: ping 替代品&lt;/li&gt;
&lt;li&gt;fzf&lt;/li&gt;
&lt;li&gt;aria2&lt;/li&gt;
&lt;li&gt;ncdu&lt;/li&gt;
&lt;li&gt;jenv&lt;/li&gt;
&lt;li&gt;nnn: 文件管理器&lt;/li&gt;
&lt;li&gt;fd: find替代命令&lt;/li&gt;
&lt;li&gt;htop&lt;/li&gt;
&lt;li&gt;sz/rz&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;fcrackzip，破解zip压缩包密码。&lt;/li&gt;
&lt;li&gt;Rename-CLI&lt;/li&gt;
&lt;li&gt;alder&lt;/li&gt;
&lt;li&gt;fasd&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring-loaded</title>
    <link href="https://wangmingco.github.io/2016/11/03/jvm/Spring-loaded/"/>
    <id>https://wangmingco.github.io/2016/11/03/jvm/Spring-loaded/</id>
    <published>2016-11-02T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.716Z</updated>
    
    <content type="html"><![CDATA[<p>在前面的文章里分别都说过了instrument和Hotswap, 显然这俩个技术在代码热更方面都有比较大的局限性. 今天测试一下Spring出品的Spring-loaded. 它可以动态地添加删除方法, 属性字段等.</p><p>Spring-loaded 的用法非常简单, 下载springloaded.jar这个jar包, 然后使用代理的方式将它挂载到JVM上就可以了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:&lt;pathto&gt;/springloaded.jar -noverify SomeJavaClass</span><br></pre></td></tr></table></figure><p>尽管有了很高的灵活性,但是还是多少稍微有一些限制, 如果想要reload的文件不能以下列字符串开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">antlr/</span><br><span class="line">org/springsource/loaded/</span><br><span class="line">com/springsource/tcserver/</span><br><span class="line">com/springsource/insight/</span><br><span class="line">groovy/</span><br><span class="line">groovyjarjarantlr/</span><br><span class="line">groovyjarjarasm/</span><br><span class="line">grails/</span><br><span class="line">java/</span><br><span class="line">javassist/</span><br><span class="line">org/codehaus/groovy/</span><br><span class="line">org/apache/</span><br><span class="line">org/springframework/</span><br><span class="line">org/hibernate/</span><br><span class="line">org/hsqldb/</span><br><span class="line">org/aspectj/</span><br><span class="line">org/xml/</span><br><span class="line">org/h2/</span><br></pre></td></tr></table></figure><p>还可以设置一些系统参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dspringloaded=explain -javaagent:&lt;pathto&gt;/springloaded.jar -noverify SomeJavaClass</span><br></pre></td></tr></table></figure><p><code>explain</code>mode会输出无法reload的诊断信息,例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Feb 05, 2014 11:00:51 AM org.springsource.loaded.TypeRegistry couldBeReloadable</span><br><span class="line">INFO: WhyNotReloadable? The <span class="built_in">type</span> org/apache/maven/model/building/ModelBuilder is using a package name <span class="string">&#x27;org/apache/&#x27;</span> <span class="built_in">which</span> is </span><br><span class="line">     considered infrastructure and types within it are not made reloadable</span><br></pre></td></tr></table></figure><p>除了<code>explain</code>还有<code>verbose</code>模式, 这个模式会使用<code>java.util.Logging</code>输出reload过程详细信息.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Watcher Observed last modification time change <span class="keyword">for</span> /Users/aclement/play/grails10411/jira-reload/target/classes/br/</span><br><span class="line">        com/app/domains/CategoryController.class (lastScanTime=1391628759166)</span><br><span class="line">Watcher Firing file changed event /Users/aclement/play/grails10411/jira-reload/target/classes/br/</span><br><span class="line">        com/app/domains/CategoryController.class</span><br><span class="line">ReloadableType Loading new version of br/com/app/domains/CategoryController, identifying suffix OV1YS1A,</span><br><span class="line">               new data length is 27209bytes</span><br></pre></td></tr></table></figure><p>当然, 上面俩个模式并不是互斥的, 我们可以对spring-loaded指定多个参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dspringloaded=verbose;explain;profile=grails</span><br></pre></td></tr></table></figure><p>看到了这么多, 其实还有一些特性没有测试到， 但是不想再自欺欺人了, 只有一个原因<code>-noverify</code>, 它关闭了JVM的字节码检查功能, 它让<a href="https://blogs.oracle.com/buck/entry/never_disable_bytecode_verification_in">JVM坐上火箭去了月球</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在前面的文章里分别都说过了instrument和Hotswap, 显然这俩个技术在代码热更方面都有比较大的局限性. 今天测试一下Spring出品的Spring-loaded. 它可以动态地添加删除方法, 属性字段等.&lt;/p&gt;
&lt;p&gt;Spring-loaded 的用法非常简单</summary>
      
    
    
    
    <category term="JVM" scheme="https://wangmingco.github.io/categories/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Float</title>
    <link href="https://wangmingco.github.io/2016/10/31/JavaSE/Java%20%20Float/"/>
    <id>https://wangmingco.github.io/2016/10/31/JavaSE/Java%20%20Float/</id>
    <published>2016-10-30T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.701Z</updated>
    
    <content type="html"><![CDATA[<p>今天有个以前的同事问了我一段代码, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePrint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> i = System.currentTimeMillis();</span><br><span class="line">System.out.println(i);</span><br><span class="line"><span class="keyword">float</span> h = <span class="number">0.0f</span>;</span><br><span class="line">i -= h;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前后俩个i输出结果不一致, 想了一下, 应该是 i 或者 h在转型时出的问题.<br>于是写了段程序测试了一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePrint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> l = System.currentTimeMillis();</span><br><span class="line">System.out.println(l);</span><br><span class="line">l -= <span class="number">0.0f</span>;</span><br><span class="line">System.out.println(l);</span><br><span class="line"></span><br><span class="line">l = System.currentTimeMillis();</span><br><span class="line">l = (<span class="keyword">long</span>)(l - <span class="number">0.0f</span>);</span><br><span class="line">System.out.println(l);</span><br><span class="line"></span><br><span class="line">l = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">float</span> f = (<span class="keyword">float</span>)l;</span><br><span class="line">System.out.println(l);</span><br><span class="line">System.out.println(f);</span><br><span class="line">l = (<span class="keyword">long</span>)(f - <span class="number">0.0f</span>);</span><br><span class="line">System.out.println(l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果真是如我所想, l 转换成了 Float,但是有点知其然不知其所然，于是跑到<a href="http://stackoverflow.com/questions/40339165/what-is-happening-when-llong-ffloat">stackoverflow上问了一下</a>, 有个大大回答的很好:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E1 op= E2</span><br></pre></td></tr></table></figure><p>等于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E1 = (T) ((E1) op (E2))</span><br></pre></td></tr></table></figure><p>T的类型就是E1, 而在上面的例子中当float和long运算时, long会转换成float.</p><p>我们知道在计算机中存储浮点数采用科学计数法, 也就是浮点数, 数字向右移动移动到小数点后面.<br><code>3.1415</code> 被转化为 <code>0.31415x10^1</code></p><p>Float是在Java中是用32个bit存储的, 1个bit表示正负符号(符号位), 7个bit表示精度(指数位), 23个bit表示有效数字.上面的数字就是5个有效数字, 指数为1, 精度也就是为1.</p><p>也就说按照小数点后面是0, 小数点前面最大有效数字是24位(16777216), 而指数为最大为7位(128), 很明显这个128位要大于24位, 这是为什么呢? 因为小数点后面可以是104个0然后是24个有效数字</p><blockquote><p>有效数字是一个数字中从左第一个不为0的开始向右数, 直到数字结束, 中间的这部分就是有效数字</p></blockquote><p>那么回到正文,刚开始的那个例子是问题出在哪里呢? 答案就在下面的例子里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFloat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> now = <span class="number">1477911537443l</span>;</span><br><span class="line"><span class="keyword">float</span> f = (<span class="keyword">float</span>)now;   <span class="comment">// 0.1477911537443l * 10^13  =&gt; 10101100000011010011001(24位有效数字) 000110011100100011</span></span><br><span class="line"><span class="keyword">long</span> time = (<span class="keyword">long</span>)f;    <span class="comment">// 截取000110011100100011 =&gt; 10101100000011010011001(有效数字) 000000000000000000 =&gt; 1477911511040</span></span><br><span class="line">System.out.println(time);   <span class="comment">// 1477911511040</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天有个以前的同事问了我一段代码, &lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>LinkedHashMap</title>
    <link href="https://wangmingco.github.io/2016/10/27/JavaSE/LinkedHashMap/"/>
    <id>https://wangmingco.github.io/2016/10/27/JavaSE/LinkedHashMap/</id>
    <published>2016-10-26T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.707Z</updated>
    
    <content type="html"><![CDATA[<p><code>LinkedHashMap</code> 继承自<code>HashMap</code>, 它维护着一个运行于所有条目的双重链接列表。<br>此链接列表定义了迭代顺序，该迭代顺序通常就是将键插入到映射中的顺序（插入顺序）。</p><p>我们从<code>HashMap</code>的<code>putVal()</code>方法开始看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>newNode(hash, key, value, null);</code>时调用了<code>LinkedHashMap</code>的<code>linkNodeLast</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last = tail;</span><br><span class="line">    tail = p;</span><br><span class="line">    <span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">        head = p;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p.before = last;</span><br><span class="line">        last.after = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个操作就是将新的Node插入到<code>LinkedHashMap</code>的尾节点.</p><p>我们看完插入操作, 再看一下<code>afterNodeAccess()</code>, 这个方法在<code>HashMap</code>的<code>putVal()</code>方法中, 重新插入一个数据时会调用到(还有一些其他的方法也会调用这个方法). 当重新插入数据时, 会尝试<code>afterNodeAccess()</code>调用, 然后改变<code>LinkedHashMap</code>的双向链表, 从而改变整个链表表达的插入顺序.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line"><span class="comment">// 如果被访问的元素是最后一个元素的话, 就不处理, 否则尝试将被访问的元素移动到最后的位置</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p = (LinkedHashMap.Entry&lt;K,V&gt;)e, </span><br><span class="line"> b = p.before, </span><br><span class="line"> a = p.after;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将被访问元素p的后一个node置为null, 因为要将p放到最后面去, 因此它的后面不能再有数据</span></span><br><span class="line">        p.after = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 下面俩个if 开始进行对p前后俩个数据进行双向绑定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (b == <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">// 如果p前面没有数据的话, 就将p后面的数据放到首位去, 然后将p放到最后</span></span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">// 如果p前面有数据, 就将p后面的数据和前面的数据连接起来</span></span><br><span class="line">            b.after = a;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</span><br><span class="line"><span class="comment">// 将p前面的数据绑定到p的后面的数据上.</span></span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">// p后面没有数据, 因为在刚开始的if里已经判断, p不可能是最后一个元素, 但是当只有一个元素时, 可能会出现这种情况</span></span><br><span class="line">            last = b;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (last == <span class="keyword">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 进行置换, 将p放到队列尾</span></span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面方法的if中我们可以看到,如果accessOrder为true(默认false), 当重新访问数据时, 插入顺序呢是会改变的. 也就是说在调用下列方法时</p><ul><li>put</li><li>replace</li><li>computeIfAbsent</li><li>compute</li><li>merge</li><li>get<br>被调用的数据会放到队列尾, 因此如果我们将accessOrder置为true, <code>LinkedHashMap</code>可以当做LRU Cache使用</li></ul><blockquote><p>当继承<code>LinkedHashMap</code>, 实现一个LRU Cache的时候, 我们可以重载一下<code>removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code>这个方法, 当插入新的数据的时候, 可以灵活地处理过期的数据</p></blockquote><p>写个测试程序测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLinkedHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">map.put(i + <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">testStep1(<span class="string">&quot;testHashMap&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">falseAccessOrderMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">map.put(i + <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testStep1</span><span class="params">(String <span class="keyword">module</span>, Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> older = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (String string : map.keySet()) &#123;</span><br><span class="line"><span class="keyword">int</span> num = Integer.parseInt(string);</span><br><span class="line"><span class="keyword">if</span> ((older + <span class="number">1</span>) != num) &#123;</span><br><span class="line">System.err.println(<span class="keyword">module</span> + <span class="string">&quot; : &quot;</span> + (older + <span class="number">1</span>) + <span class="string">&quot; -&gt; &quot;</span> + num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">older = num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 迭代顺序就是将键插入到映射中的顺序（插入顺序）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">falseAccessOrderLinkedHashMap_SaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = falseAccessOrderMap();</span><br><span class="line">testStep1(<span class="string">&quot;falseAccessOrderLinkedHashMap_SaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 如果在映射中重新插入 键，则插入顺序不受影响</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">falseAccessOrderLinkedHashMap_RePutSaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = falseAccessOrderMap();</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">testStep1(<span class="string">&quot;falseAccessOrderLinkedHashMap_RePutSaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">falseAccessOrderLinkedHashMap_GetSaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = falseAccessOrderMap();</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">testStep1(<span class="string">&quot;falseAccessOrderLinkedHashMap_GetSaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">trueAccessOrderMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkedHashMap&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">10</span>, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">map.put(i + <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trueAccessOrderLinkedHashMap_SaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = trueAccessOrderMap();</span><br><span class="line">testStep1(<span class="string">&quot;trueAccessOrderLinkedHashMap_SaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trueAccessOrderLinkedHashMap_RePutSaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = trueAccessOrderMap();</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">testStep1(<span class="string">&quot;trueAccessOrderLinkedHashMap_RePutSaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trueAccessOrderLinkedHashMap_GetSaveOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; map = trueAccessOrderMap();</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">testStep1(<span class="string">&quot;trueAccessOrderLinkedHashMap_GetSaveOrder&quot;</span>, map);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下, 结果果真如此.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt; 继承自&lt;code&gt;HashMap&lt;/code&gt;, 它维护着一个运行于所有条目的双重链接列表。&lt;br&gt;此链接列表定义了迭代顺序，该迭代顺序通常就是将键插入到映射中的顺序（插入顺序）。&lt;/p&gt;
&lt;p&gt;我们从&lt;code&gt;Has</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>一致性hash</title>
    <link href="https://wangmingco.github.io/2016/10/24/%E7%AE%97%E6%B3%95/%E4%B8%80%E8%87%B4%E6%80%A7hash/"/>
    <id>https://wangmingco.github.io/2016/10/24/%E7%AE%97%E6%B3%95/%E4%B8%80%E8%87%B4%E6%80%A7hash/</id>
    <published>2016-10-23T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.731Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/haippy/archive/2011/12/10/2282943.html">原理</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConsistentHash</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cache.INSTANCE.init();</span><br><span class="line">Random random = <span class="keyword">new</span> Random(<span class="number">999999999</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> number = random.nextLong();</span><br><span class="line">Cache.INSTANCE.insert(number + <span class="string">&quot;&quot;</span>, number + <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Cache.INSTANCE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Cache INSTANCE = <span class="keyword">new</span> Cache();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer virtualNodeSize = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">private</span> Integer serverNodeSize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer MIN_HASH = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MAX_HASH = (<span class="keyword">long</span>)(Math.pow(<span class="number">2</span>,<span class="number">32</span>) - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer serverNodeIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService exec = Executors.newSingleThreadExecutor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;Long, VirtualNode&gt; virtualNodes = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, ServerNode&gt; serverNodes = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Cache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; serverNodeSize; i++) &#123;</span><br><span class="line">serverNodes.put(i, <span class="keyword">new</span> ServerNode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;ServerNode Number : &quot;</span> + serverNodes.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> step = MAX_HASH / virtualNodeSize;</span><br><span class="line"><span class="keyword">long</span> hashCode = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; virtualNodeSize; i++) &#123;</span><br><span class="line">VirtualNode virtualNode = <span class="keyword">new</span> VirtualNode();</span><br><span class="line">virtualNode.setServerNode(serverNodes.get(serverNodeIndex++));</span><br><span class="line"></span><br><span class="line">hashCode += step;</span><br><span class="line">virtualNodes.put(hashCode, virtualNode);</span><br><span class="line">System.out.println(<span class="string">&quot;Add VirtualNode : &quot;</span> + hashCode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;VirtualNode Number : &quot;</span> + virtualNodes.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addVirtualNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exec.submit(() -&gt; &#123;</span><br><span class="line">virtualNodes.clear();</span><br><span class="line">++virtualNodeSize;</span><br><span class="line">init();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeVirtualNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exec.submit(() -&gt; &#123;</span><br><span class="line">virtualNodes.clear();</span><br><span class="line">--virtualNodeSize;</span><br><span class="line">init();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addServerNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exec.submit(() -&gt; &#123;</span><br><span class="line">virtualNodes.clear();</span><br><span class="line">serverNodes.clear();</span><br><span class="line">serverNodeIndex++;</span><br><span class="line">init();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeServerNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">exec.submit(() -&gt; &#123;</span><br><span class="line">virtualNodes.clear();</span><br><span class="line">serverNodes.clear();</span><br><span class="line">serverNodeIndex--;</span><br><span class="line">init();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">exec.submit(() -&gt; &#123;</span><br><span class="line"><span class="keyword">int</span> hashCode = key.hashCode();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Long, VirtualNode&gt; entry : virtualNodes.entrySet()) &#123;</span><br><span class="line"><span class="keyword">long</span> hashcode = entry.getKey();</span><br><span class="line">VirtualNode node = entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (hashCode &gt;= hashcode ) &#123;</span><br><span class="line">node.insert(key, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, ServerNode&gt; entry : serverNodes.entrySet()) &#123;</span><br><span class="line"><span class="keyword">int</span> key1 = entry.getKey();</span><br><span class="line">ServerNode node = entry.getValue();</span><br><span class="line">stringBuffer.append(key1).append(<span class="string">&quot; : &quot;</span>).append(node.map.keySet().size()).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 虚拟节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">VirtualNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ServerNode serverNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">serverNode.insert(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> serverNode.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServerNode</span><span class="params">(ServerNode serverNode)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.serverNode = serverNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代表真实服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/haippy/archive/2011/12/10/2282943.html&quot;&gt;原理&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="算法" scheme="https://wangmingco.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Jackson 笔记</title>
    <link href="https://wangmingco.github.io/2016/10/11/JavaLibrary/Jackson/"/>
    <id>https://wangmingco.github.io/2016/10/11/JavaLibrary/Jackson/</id>
    <published>2016-10-10T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.689Z</updated>
    
    <content type="html"><![CDATA[<p>Jackson 提供了三种对JSON处理的方式</p><ul><li>Data Binding </li><li>Tree Model</li><li>Streaming API</li></ul><h2 id="Data-Binding"><a href="#Data-Binding" class="headerlink" title="Data Binding"></a>Data Binding</h2><p>这种方式提供了JSON数据和Java对象之间的无缝转换，而且这种方式是相当便利的. 它内部基于 Streaming API 的JSON 读写系统, 尽管Data Binding 是非常高效地,但是相比纯　streaming/incremental 方式，仍然有一些额外的性能消耗．</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Serialization</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Obj obj = <span class="keyword">new</span> Obj();</span><br><span class="line">obj.platform = <span class="string">&quot;qq&quot;</span>;</span><br><span class="line">StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.writeValue(stringWriter, obj);</span><br><span class="line"></span><br><span class="line">System.out.println(stringWriter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为<code>&#123;&quot;platform&quot;:&quot;qq&quot;&#125;</code></p><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_ObjectMapperRead</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String jsonStr = <span class="string">&quot;&#123;\&quot;platform\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Obj obj = objectMapper.readValue(jsonStr, Obj.class);</span><br><span class="line">System.out.println(obj.platform);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为<code>1</code></p><h3 id="泛型绑定"><a href="#泛型绑定" class="headerlink" title="泛型绑定"></a>泛型绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Serialization</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">2016</span>, <span class="string">&quot;10/11&quot;</span>);</span><br><span class="line">StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.writeValue(stringWriter, map);</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, String&gt; newMap = objectMapper.readValue(stringWriter.toString(), <span class="keyword">new</span> TypeReference&lt;Map&lt;Integer, String&gt;&gt;() &#123;&#125;);</span><br><span class="line">System.out.println(newMap.get(<span class="number">2016</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为<code>10/11</code></p><h3 id="数组绑定"><a href="#数组绑定" class="headerlink" title="数组绑定"></a>数组绑定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Binding</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">String[] array = &#123;<span class="string">&quot;2016&quot;</span>&#125;;</span><br><span class="line">StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.writeValue(stringWriter, array);</span><br><span class="line"></span><br><span class="line">String[] arr = objectMapper.readValue(stringWriter.toString(), String[].class);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>ObjectMapper被共享出来之后, 只要重新配置共享实例, 那么它就是线程安全的. 也就是不要调用下列方法</p><ul><li><code>enable()</code></li><li><code>disable()</code></li><li><code>configure()</code></li></ul><p>参考</p><ul><li><a href="http://stackoverflow.com/questions/3907929/should-i-declare-jacksons-objectmapper-as-a-static-field">Should I declare Jackson’s ObjectMapper as a static field?</a></li><li><a href="http://wiki.fasterxml.com/JacksonFAQThreadSafety">Jackson FAQ: Thread-Safety</a></li></ul><h2 id="Tree-Model"><a href="#Tree-Model" class="headerlink" title="Tree Model"></a>Tree Model</h2><p>Tree Model 和XML 处理方式 非常类似.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Obj1 obj1 = <span class="keyword">new</span> Obj1();</span><br><span class="line">Obj2 obj2 = <span class="keyword">new</span> Obj2();</span><br><span class="line">Obj3 obj3 = <span class="keyword">new</span> Obj3();</span><br><span class="line">obj1.obj2 = obj2;</span><br><span class="line">obj2.obj3 = obj3;</span><br><span class="line">obj3.string = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String str = objectMapper.writeValueAsString(obj1);</span><br><span class="line">JsonNode objtree = objectMapper.readTree(str);</span><br><span class="line">System.out.println(<span class="string">&quot;get obj2 : &quot;</span> + objtree.get(<span class="string">&quot;obj2&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;get obj3 : &quot;</span> + objtree.get(<span class="string">&quot;obj3&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;get string : &quot;</span> + objtree.get(<span class="string">&quot;string&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;path obj2 : &quot;</span> + objtree.path(<span class="string">&quot;obj2&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;path obj3 : &quot;</span> + objtree.path(<span class="string">&quot;obj3&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;path string : &quot;</span> + objtree.path(<span class="string">&quot;string&quot;</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;path string obj2 -&gt; obj3 -&gt; string : &quot;</span> + objtree.path(<span class="string">&quot;obj2&quot;</span>).path(<span class="string">&quot;obj3&quot;</span>).path(<span class="string">&quot;string&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj1</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Obj2 obj2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj2</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Obj3 obj3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj3</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">get obj2 : &#123;<span class="string">&quot;obj3&quot;</span>:&#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;&#125;</span><br><span class="line">get obj3 : null</span><br><span class="line">get string : null</span><br><span class="line">path obj2 : &#123;<span class="string">&quot;obj3&quot;</span>:&#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;&#125;</span><br><span class="line">path obj3 : </span><br><span class="line">path string : </span><br><span class="line">path string obj2 -&gt; obj3 -&gt; string : <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><p>当调用<code>get()</code>方法时, 如果找不到的话, 会返回<code>null</code>, 而<code>path()</code>找不到的话则会返回<code>MissingNode</code></p><p>还有一个方法<code>with(int index)</code>我们没有演示, 这个方法是如果找不到就添加.</p><p><code>get()</code>方法还有一个特别有用的地方就是用来处理数组.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTreeModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Obj1 obj1 = <span class="keyword">new</span> Obj1();</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String str = objectMapper.writeValueAsString(obj1);</span><br><span class="line">System.out.println(str);</span><br><span class="line"></span><br><span class="line">JsonNode tree = objectMapper.readTree(str);</span><br><span class="line">System.out.println(tree.get(<span class="string">&quot;strings&quot;</span>).get(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj1</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String[] strings = &#123;<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;strings&quot;</span>:[<span class="string">&quot;123&quot;</span>,<span class="string">&quot;456&quot;</span>]&#125;</span><br><span class="line"><span class="string">&quot;456&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Streaming-API"><a href="#Streaming-API" class="headerlink" title="Streaming API"></a>Streaming API</h2><p>Streaming API 是 Jackson处理 JSON最高效地方式. 但是它的易用性却大大地降低了, 我们不能像Data Binding 或者 Tree Model 那样随机访问元素.</p><h2 id="SerializationFeature"><a href="#SerializationFeature" class="headerlink" title="SerializationFeature"></a>SerializationFeature</h2><h3 id="WRAP-ROOT-VALUE"><a href="#WRAP-ROOT-VALUE" class="headerlink" title="WRAP_ROOT_VALUE"></a>WRAP_ROOT_VALUE</h3><p>是否环绕根元素，默认false，如果为true，则默认以类名作为根元素，也可以通过<code>@JsonRootName</code>来自定义根元素名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_SerializationFeature</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE);</span><br><span class="line">System.out.println( objectMapper.writeValueAsString(<span class="keyword">new</span> Obj()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String platform = <span class="string">&quot;example&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为<code>&#123;&quot;Obj&quot;:&#123;&quot;platform&quot;:&quot;example&quot;&#125;&#125;</code> 如果不开启<code>WRAP_ROOT_VALUE</code>的话, 结果为<code>&#123;&quot;platform&quot;:&quot;example&quot;&#125;</code></p><h3 id="INDENT-OUTPUT"><a href="#INDENT-OUTPUT" class="headerlink" title="INDENT_OUTPUT"></a>INDENT_OUTPUT</h3><p> 是否缩放排列输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectMapper.enable(SerializationFeature.INDENT_OUTPUT);</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;platform&quot;</span> : <span class="string">&quot;example&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WRITE-DATES-AS-TIMESTAMPS"><a href="#WRITE-DATES-AS-TIMESTAMPS" class="headerlink" title="WRITE_DATES_AS_TIMESTAMPS"></a>WRITE_DATES_AS_TIMESTAMPS</h3><p>序列化日期时以timestamps输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_SerializationFeature</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);</span><br><span class="line">System.out.println( objectMapper.writeValueAsString(<span class="keyword">new</span> Obj()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Date now = <span class="keyword">new</span> Date();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;now&quot;</span>:1476179780913&#125;</span><br></pre></td></tr></table></figure><h3 id="WRITE-CHAR-ARRAYS-AS-JSON-ARRAYS"><a href="#WRITE-CHAR-ARRAYS-AS-JSON-ARRAYS" class="headerlink" title="WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS"></a>WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS</h3><p>序列化char[]时以json数组输出</p><h3 id="ORDER-MAP-ENTRIES-BY-KEYS"><a href="#ORDER-MAP-ENTRIES-BY-KEYS" class="headerlink" title="ORDER_MAP_ENTRIES_BY_KEYS"></a>ORDER_MAP_ENTRIES_BY_KEYS</h3><p>序列化Map时对key进行排序操作</p><h2 id="DeserializationFeature"><a href="#DeserializationFeature" class="headerlink" title="DeserializationFeature"></a>DeserializationFeature</h2><h3 id="FAIL-ON-UNKNOWN-PROPERTIES"><a href="#FAIL-ON-UNKNOWN-PROPERTIES" class="headerlink" title="FAIL_ON_UNKNOWN_PROPERTIES"></a>FAIL_ON_UNKNOWN_PROPERTIES</h3><p>在反序列化时, 如果Java对象中不包含json串的某个数据 属性, 则会报错.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_SerializationFeature</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;&#123;\&quot;strings1\&quot;:[\&quot;123\&quot;],\&quot;strings2\&quot;:[\&quot;456\&quot;]&#125;&quot;</span>;</span><br><span class="line">objectMapper.readValue(str, Obj.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String[] strings1 = &#123;<span class="string">&quot;123&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MapperFeature"><a href="#MapperFeature" class="headerlink" title="MapperFeature"></a>MapperFeature</h2><h3 id="ACCEPT-CASE-INSENSITIVE-PROPERTIES"><a href="#ACCEPT-CASE-INSENSITIVE-PROPERTIES" class="headerlink" title="ACCEPT_CASE_INSENSITIVE_PROPERTIES"></a>ACCEPT_CASE_INSENSITIVE_PROPERTIES</h3><p> 在反序列化时是否忽略大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.MapperFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_SerializationFeature</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Upper upper = <span class="keyword">new</span> Upper();</span><br><span class="line">upper.setFirstName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">System.out.println(objectMapper.writeValueAsString(upper));</span><br><span class="line"></span><br><span class="line">Lower lower = <span class="keyword">new</span> Lower();</span><br><span class="line">lower.setLastName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">System.out.println(objectMapper.writeValueAsString(lower));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_DeserializationFeature</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);</span><br><span class="line"></span><br><span class="line">Upper obj1 = objectMapper.readValue(<span class="string">&quot;&#123;\&quot;firstName\&quot;:\&quot;John\&quot;&#125;&quot;</span>, Upper.class);</span><br><span class="line">System.out.println(obj1.getFirstName());</span><br><span class="line"></span><br><span class="line">Upper obj2 = objectMapper.readValue(<span class="string">&quot;&#123;\&quot;FirstName\&quot;:\&quot;John\&quot;&#125;&quot;</span>, Upper.class);</span><br><span class="line">System.out.println(obj2.getFirstName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Upper</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String FirstName;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> FirstName;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;FirstName = firstName;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lower</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String lastName;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> lastName;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;<span class="keyword">this</span>.lastName = lastName;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>test_SerializationFeature()</code>这个测试中, 我们可以通过结果看到, Upper的<code>FirstName</code>在JSON串 中成了<code>firstName</code>. 当反序列化得时候, 如果不指定<code>ACCEPT_CASE_INSENSITIVE_PROPERTIES</code>, 那么当JSON串中的<code>FirstName</code>为大写的时候, 是没办法序列化出来的.</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="JsonProperty"></a>JsonProperty</h3><p>jackson 默认是根据Getter来进行注值反序列化的, 但是有时候为了节省存储空间, 字段名远小于Getter名称, 这样就造成了字段名和方法名不一致, 此时就可以利用JsonProperty注解重命名来解决这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.MapperFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDataBinding</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_Deferent</span> <span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);</span><br><span class="line"></span><br><span class="line">Different different = <span class="keyword">new</span> Different();</span><br><span class="line">different.setMiddle(<span class="string">&quot;Nice&quot;</span>);</span><br><span class="line">System.out.println(objectMapper.writeValueAsString(different));</span><br><span class="line"></span><br><span class="line">Different obj2 = objectMapper.readValue(<span class="string">&quot;&#123;\&quot;middle\&quot;:\&quot;Nice\&quot;&#125;&quot;</span>, Different.class);</span><br><span class="line">System.out.println(obj2.getMiddle());</span><br><span class="line"></span><br><span class="line">Different obj3 = objectMapper.readValue(<span class="string">&quot;&#123;\&quot;Mid\&quot;:\&quot;Nice\&quot;&#125;&quot;</span>, Different.class);</span><br><span class="line">System.out.println(obj3.getMiddle());</span><br><span class="line"></span><br><span class="line">Different obj4 = objectMapper.readValue(<span class="string">&quot;&#123;\&quot;mid\&quot;:\&quot;Nice\&quot;&#125;&quot;</span>, Different.class);</span><br><span class="line">System.out.println(obj4.getMiddle());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Different</span> </span>&#123;</span><br><span class="line"><span class="meta">@JsonProperty(&quot;mid&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String Mid;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMiddle</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> Mid;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMiddle</span><span class="params">(String middle)</span> </span>&#123;<span class="keyword">this</span>.Mid = middle;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说到这里就需要点出一个坑了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrivate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">SimpleId simpleId = <span class="keyword">new</span> SimpleId();</span><br><span class="line">simpleId.setString(<span class="string">&quot;simple Id&quot;</span>);</span><br><span class="line">String json = objectMapper.writeValueAsString(simpleId);</span><br><span class="line">System.out.println(<span class="string">&quot;Jsckson  ---&gt; &quot;</span> + json);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">json = gson.toJson(simpleId);</span><br><span class="line">System.out.println(<span class="string">&quot;Gson     ---&gt; &quot;</span> + json);</span><br><span class="line"></span><br><span class="line">json = JSON.toJSONString(simpleId);</span><br><span class="line">System.out.println(<span class="string">&quot;FastJson ---&gt; &quot;</span> + json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleId</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String stringId;</span><br><span class="line"><span class="keyword">private</span> String stringName = <span class="string">&quot;empty name&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> stringId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setString</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.stringId = string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jsckson  ---&gt; &#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;string1&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br><span class="line">Gson     ---&gt; &#123;<span class="string">&quot;stringId&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;stringName&quot;</span>:<span class="string">&quot;empty name&quot;</span>&#125;</span><br><span class="line">FastJson ---&gt; &#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;string1&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>有时候我们需要Gson这种输出结果, 即不使用Getter, 而是使用filed进行序列化, 怎么办呢？我们可以使用<code> @JsonAutoDetect(fieldVisibility = Visibility.ANY, getterVisibility = Visibility.NONE, setterVisibility = Visibility.NONE)</code>, 但是对于有时候我们并不想在每个类上面都加一个这样的注解, 配置一些ObjectMapper就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">objectMapper.setVisibility(objectMapper.getSerializationConfig().getDefaultVisibilityChecker()</span><br><span class="line">.withFieldVisibility(JsonAutoDetect.Visibility.ANY)</span><br><span class="line">.withGetterVisibility(JsonAutoDetect.Visibility.NONE)</span><br><span class="line">.withSetterVisibility(JsonAutoDetect.Visibility.NONE)</span><br><span class="line">.withCreatorVisibility(JsonAutoDetect.Visibility.NONE));</span><br></pre></td></tr></table></figure><p>这样结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jsckson  ---&gt; &#123;<span class="string">&quot;stringId&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;stringName&quot;</span>:<span class="string">&quot;empty name&quot;</span>&#125;</span><br><span class="line">Gson     ---&gt; &#123;<span class="string">&quot;stringId&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;stringName&quot;</span>:<span class="string">&quot;empty name&quot;</span>&#125;</span><br><span class="line">FastJson ---&gt; &#123;<span class="string">&quot;string&quot;</span>:<span class="string">&quot;simple Id&quot;</span>,<span class="string">&quot;string1&quot;</span>:<span class="string">&quot;123456&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonInclude"><a href="#JsonInclude" class="headerlink" title="JsonInclude"></a>JsonInclude</h3><p>指定在序列化时, 可以输出哪些值. 例如只输出非默认值(包含类型默认值和初始化默认值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDefault</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">Foo foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.string1 = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">System.out.println(objectMapper.writeValueAsString(foo));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonInclude(JsonInclude.Include.NON_DEFAULT)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String string1;</span><br><span class="line"><span class="keyword">public</span> String string2 = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> String string3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JsonSerialize"><a href="#JsonSerialize" class="headerlink" title="JsonSerialize"></a>JsonSerialize</h3><p>实现浮点数只保留俩位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDouble</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">DoubleObject doubleObject = <span class="keyword">new</span> DoubleObject();</span><br><span class="line">doubleObject.aDouble = <span class="number">1.101010101010101</span>;</span><br><span class="line">doubleObject.aFloat = <span class="number">1.101010101010101f</span>;</span><br><span class="line"></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">String string = objectMapper.writeValueAsString(doubleObject);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomDoubleSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Number value, JsonGenerator jgen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">jgen.writeNull();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Double || value <span class="keyword">instanceof</span> Float)&#123;</span><br><span class="line"><span class="keyword">final</span> String pattern = <span class="string">&quot;.##&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> DecimalFormat myFormatter = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line"><span class="keyword">final</span> String output = myFormatter.format(value);</span><br><span class="line">jgen.writeNumber(output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleObject</span> </span>&#123;</span><br><span class="line"><span class="meta">@JsonSerialize(using = CustomDoubleSerializer.class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> aDouble;</span><br><span class="line"><span class="meta">@JsonSerialize(using = CustomDoubleSerializer.class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">float</span> aFloat;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getaDouble</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> aDouble;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setaDouble</span><span class="params">(<span class="keyword">double</span> aDouble)</span> </span>&#123;<span class="keyword">this</span>.aDouble = aDouble;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getaFloat</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> aFloat;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setaFloat</span><span class="params">(<span class="keyword">float</span> aFloat)</span> </span>&#123;<span class="keyword">this</span>.aFloat = aFloat;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>可以通过module来自定义实现 序列化和反序列机制. 下面的例子中就是演示对Double类型的序列化时保留浮点数位数的实现</p><blockquote><p>注意 如果注解和自定义序列化重复时, 那么注解的设置会覆盖自定义序列化机制. 而且对于原生类型来说, 是区分原生类型和包装类型的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule();</span><br><span class="line">simpleModule.addSerializer(Double.class, <span class="keyword">new</span> CustomFiveDoubleSerializer());</span><br><span class="line">simpleModule.addSerializer(<span class="keyword">double</span>.class, <span class="keyword">new</span> CustomFiveDoubleSerializer());</span><br><span class="line">objectMapper.registerModule(simpleModule);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFiveDoubleSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Number value, JsonGenerator jgen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">jgen.writeNull();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Double || value <span class="keyword">instanceof</span> Float)&#123;</span><br><span class="line"><span class="keyword">final</span> String pattern = <span class="string">&quot;.#####&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> DecimalFormat myFormatter = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line"><span class="keyword">final</span> String output = myFormatter.format(value);</span><br><span class="line">jgen.writeNumber(output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomOneDoubleSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Number</span>&gt; </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Number value, JsonGenerator jgen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</span><br><span class="line">jgen.writeNull();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Double || value <span class="keyword">instanceof</span> Float)&#123;</span><br><span class="line"><span class="keyword">final</span> String pattern = <span class="string">&quot;.#&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> DecimalFormat myFormatter = <span class="keyword">new</span> DecimalFormat(pattern);</span><br><span class="line"><span class="keyword">final</span> String output = myFormatter.format(value);</span><br><span class="line">jgen.writeNumber(output);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">Obj obj = <span class="keyword">new</span> Obj();</span><br><span class="line">obj.aDouble1 = <span class="number">1.111111111111</span>;</span><br><span class="line">obj.aDouble2 = <span class="number">1.111111111111</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(objectMapper.writeValueAsString(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Obj</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> Double aDouble1;</span><br><span class="line"><span class="meta">@JsonSerialize(using = CustomOneDoubleSerializer.class)</span></span><br><span class="line"><span class="keyword">public</span> Double aDouble2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jackson 提供了三种对JSON处理的方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Binding &lt;/li&gt;
&lt;li&gt;Tree Model&lt;/li&gt;
&lt;li&gt;Streaming API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Data-Binding&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Java 类库" scheme="https://wangmingco.github.io/categories/Java-%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="Jackson" scheme="https://wangmingco.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Java 字符串优化</title>
    <link href="https://wangmingco.github.io/2016/09/26/JavaSE/Java%20String/"/>
    <id>https://wangmingco.github.io/2016/09/26/JavaSE/Java%20String/</id>
    <published>2016-09-25T16:00:00.000Z</published>
    <updated>2021-11-18T03:12:28.703Z</updated>
    
    <content type="html"><![CDATA[<p>今天review同事写的一段代码, 在枚举中动态生成字符串key的时候, 使用字符串常量进行拼接, 虽然感觉这么写会有一定的GC性能消耗, 但是具体原因有点忘记了, 今天就重新写段测试代码,进行测试一下.</p><p>当使用字符串(<code>String</code>)的时候, Java编译器会给我们自动的做一些优化编译的工作. 下面我们分别用三段代码, 从GC和编译俩个角度看看Java是如何给我们优化的.</p><p>首先呢,我们使用<code>-XX:+PrintHeapAtGC  -Xmx10M -Xms10M</code>这个参数分别运行以下三段代码</p><p>首先看一下<code>TestCombine1</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCombine1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String str1 = <span class="keyword">new</span> String(<span class="string">&quot;123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">String string1 = <span class="string">&quot;string&quot;</span> + str1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2048K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 0K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 0% used [0x00000000ff600000,0x00000000ff600000,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2754K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 488K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 95% used [0x00000000fff00000,0x00000000fff7a020,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 530K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff684ac0,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2754K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">&#125;</span><br><span class="line">&#123;Heap before GC invocations=2 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2536K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 95% used [0x00000000fff00000,0x00000000fff7a020,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 530K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff684ac0,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2969K, capacity 4490K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 319K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=2 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 504K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 98% used [0x00000000fff80000,0x00000000ffffe010,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 581K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 8% used [0x00000000ff600000,0x00000000ff691670,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2969K, capacity 4490K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 319K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#123;Heap before GC invocations=38 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2080K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 6% used [0x00000000fff00000,0x00000000fff08000,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 1212K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 16% used [0x00000000ff600000,0x00000000ff72f050,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 3236K, capacity 4494K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 351K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=38 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 32K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 6% used [0x00000000fff80000,0x00000000fff88000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 1212K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 16% used [0x00000000ff600000,0x00000000ff72f050,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 3236K, capacity 4494K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 351K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到一共GC了38次.</p><p>接下来看一下<code>TestCombine2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCombine2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">String string3 = <span class="string">&quot;string&quot;</span> + getFieldConstant();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFieldConstant</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2048K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 0K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 0% used [0x00000000ff600000,0x00000000ff600000,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2752K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 504K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 98% used [0x00000000fff00000,0x00000000fff7e010,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 489K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 6% used [0x00000000ff600000,0x00000000ff67a598,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2752K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#123;Heap before GC invocations=38 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2080K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 6% used [0x00000000fff00000,0x00000000fff08000,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 1317K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 18% used [0x00000000ff600000,0x00000000ff749738,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 3234K, capacity 4494K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 351K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=38 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 32K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 6% used [0x00000000fff80000,0x00000000fff88000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 1317K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 18% used [0x00000000ff600000,0x00000000ff749738,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 3234K, capacity 4494K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 351K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也GC了38次</p><p>接下来看一下<code>TestCombine3</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCombine3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String str2 = <span class="string">&quot;123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">String string2 = <span class="string">&quot;string&quot;</span> + str2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;Heap before GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2048K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 0K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 0% used [0x00000000ff600000,0x00000000ff600000,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2753K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=1 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 504K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 98% used [0x00000000fff00000,0x00000000fff7e030,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 435K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 6% used [0x00000000ff600000,0x00000000ff66ccc0,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2753K, capacity 4480K, committed 4480K, reserved 1056768K</span><br><span class="line">  class space    used 296K, capacity 384K, committed 384K, reserved 1048576K</span><br><span class="line">&#125;</span><br><span class="line">&#123;Heap before GC invocations=2 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 2552K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 100% used [0x00000000ffd00000,0x00000000fff00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 98% used [0x00000000fff00000,0x00000000fff7e030,0x00000000fff80000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class="line"> ParOldGen       total 7168K, used 435K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 6% used [0x00000000ff600000,0x00000000ff66ccc0,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2970K, capacity 4490K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 319K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">Heap after GC invocations=2 (full 0):</span><br><span class="line"> PSYoungGen      total 2560K, used 488K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line">  eden space 2048K, 0% used [0x00000000ffd00000,0x00000000ffd00000,0x00000000fff00000)</span><br><span class="line">  from space 512K, 95% used [0x00000000fff80000,0x00000000ffffa020,0x0000000100000000)</span><br><span class="line">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class="line"> ParOldGen       total 7168K, used 570K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)</span><br><span class="line">  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff68e880,0x00000000ffd00000)</span><br><span class="line"> Metaspace       used 2970K, capacity 4490K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 319K, capacity 386K, committed 512K, reserved 1048576K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共就GC了俩次, 为什么结果是这样的呢？我们使用javap分析一下(限于篇幅, 我们只看最关键的部分).</p><p>首先看TestCombine1反编译之后的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">javap -v TestCombine1</span><br><span class="line">...</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">13.</span>#<span class="number">33</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Integer            <span class="number">100000</span></span><br><span class="line">   #<span class="number">3</span> = Class              #<span class="number">34</span>            <span class="comment">// java/lang/StringBuilder</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">3.</span>#<span class="number">33</span>         <span class="comment">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">5</span> = String             #<span class="number">35</span>            <span class="comment">// string</span></span><br><span class="line">   #<span class="number">6</span> = Methodref          #<span class="number">3.</span>#<span class="number">36</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">   #<span class="number">7</span> = Fieldref           #<span class="number">12.</span>#<span class="number">37</span>        <span class="comment">// testString/TestCombine1.str1:Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">3.</span>#<span class="number">38</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">9</span> = Class              #<span class="number">39</span>            <span class="comment">// java/lang/String</span></span><br><span class="line">  #<span class="number">10</span> = String             #<span class="number">40</span>            <span class="comment">// 123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">  #<span class="number">11</span> = Methodref          #<span class="number">9.</span>#<span class="number">41</span>         <span class="comment">// java/lang/String.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">12</span> = Class              #<span class="number">42</span>            <span class="comment">// testString/TestCombine1</span></span><br><span class="line">  #<span class="number">13</span> = Class              #<span class="number">43</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">14</span> = Utf8               str1</span><br><span class="line">  #<span class="number">15</span> = Utf8               Ljava/lang/String;</span><br><span class="line">...</span><br><span class="line">  #<span class="number">33</span> = NameAndType        #<span class="number">16</span>:#<span class="number">17</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">34</span> = Utf8               java/lang/StringBuilder</span><br><span class="line">  #<span class="number">35</span> = Utf8               string</span><br><span class="line">  #<span class="number">36</span> = NameAndType        #<span class="number">44</span>:#<span class="number">45</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  #<span class="number">37</span> = NameAndType        #<span class="number">14</span>:#<span class="number">15</span>        <span class="comment">// str1:Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">38</span> = NameAndType        #<span class="number">46</span>:#<span class="number">47</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">39</span> = Utf8               java/lang/String</span><br><span class="line">  #<span class="number">40</span> = Utf8               <span class="number">123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">  #<span class="number">41</span> = NameAndType        #<span class="number">16</span>:#<span class="number">48</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">42</span> = Utf8               testString/TestCombine1</span><br><span class="line">  #<span class="number">43</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">44</span> = Utf8               append</span><br><span class="line">  #<span class="number">45</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #<span class="number">46</span> = Utf8               toString</span><br><span class="line">  #<span class="number">47</span> = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #<span class="number">48</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iload_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">2</span>                  <span class="comment">// int 100000</span></span><br><span class="line">         <span class="number">5</span>: if_icmpge     <span class="number">36</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">        <span class="number">11</span>: dup</span><br><span class="line">        <span class="number">12</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">15</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String string</span></span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">20</span>: getstatic     #<span class="number">7</span>                  <span class="comment">// Field str1:Ljava/lang/String;</span></span><br><span class="line">        <span class="number">23</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">26</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">29</span>: astore_2</span><br><span class="line">        <span class="number">30</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">33</span>: goto          <span class="number">2</span></span><br><span class="line">        <span class="number">36</span>: <span class="keyword">return</span></span><br><span class="line">...</span><br><span class="line">SourceFile: <span class="string">&quot;TestCombine1.java&quot;</span></span><br></pre></td></tr></table></figure><p>通过看main方法, 我们可以看出, 是将<code>&quot;string&quot;</code>字符串常量和 <code>str1</code>这个静态常量通过<code>StringBuilder</code>进行拼接得到的<code>string1</code>. 所以不断产生<code>StringBuilder</code>对象,就不断地进行GC了</p><p>然后看TestCombine2反编译之后的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">ζ javap -v TestCombine2</span><br><span class="line">...</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">11.</span>#<span class="number">30</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Integer            <span class="number">100000</span></span><br><span class="line">   #<span class="number">3</span> = Class              #<span class="number">31</span>            <span class="comment">// java/lang/StringBuilder</span></span><br><span class="line">   #<span class="number">4</span> = Methodref          #<span class="number">3.</span>#<span class="number">30</span>         <span class="comment">// java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">5</span> = String             #<span class="number">32</span>            <span class="comment">// string</span></span><br><span class="line">   #<span class="number">6</span> = Methodref          #<span class="number">3.</span>#<span class="number">33</span>         <span class="comment">// java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">10.</span>#<span class="number">34</span>        <span class="comment">// testString/TestCombine2.getFieldConstant:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">8</span> = Methodref          #<span class="number">3.</span>#<span class="number">35</span>         <span class="comment">// java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">9</span> = String             #<span class="number">36</span>            <span class="comment">// 123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">  #<span class="number">10</span> = Class              #<span class="number">37</span>            <span class="comment">// testString/TestCombine2</span></span><br><span class="line">  #<span class="number">11</span> = Class              #<span class="number">38</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">12</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">13</span> = Utf8               ()V</span><br><span class="line">...</span><br><span class="line">  #<span class="number">26</span> = Utf8               getFieldConstant</span><br><span class="line">  #<span class="number">27</span> = Utf8               ()Ljava/lang/String;</span><br><span class="line">  #<span class="number">28</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">29</span> = Utf8               TestCombine2.java</span><br><span class="line">  #<span class="number">30</span> = NameAndType        #<span class="number">12</span>:#<span class="number">13</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">31</span> = Utf8               java/lang/StringBuilder</span><br><span class="line">  #<span class="number">32</span> = Utf8               string</span><br><span class="line">  #<span class="number">33</span> = NameAndType        #<span class="number">39</span>:#<span class="number">40</span>        <span class="comment">// append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">  #<span class="number">34</span> = NameAndType        #<span class="number">26</span>:#<span class="number">27</span>        <span class="comment">// getFieldConstant:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">35</span> = NameAndType        #<span class="number">41</span>:#<span class="number">27</span>        <span class="comment">// toString:()Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">36</span> = Utf8               <span class="number">123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">  #<span class="number">37</span> = Utf8               testString/TestCombine2</span><br><span class="line">  #<span class="number">38</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">39</span> = Utf8               append</span><br><span class="line">  #<span class="number">40</span> = Utf8               (Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">  #<span class="number">41</span> = Utf8               toString</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iload_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">2</span>                  <span class="comment">// int 100000</span></span><br><span class="line">         <span class="number">5</span>: if_icmpge     <span class="number">36</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">new</span>           #<span class="number">3</span>                  <span class="comment">// class java/lang/StringBuilder</span></span><br><span class="line">        <span class="number">11</span>: dup</span><br><span class="line">        <span class="number">12</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">15</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String string</span></span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">20</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method getFieldConstant:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">23</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span></span><br><span class="line">        <span class="number">26</span>: invokevirtual #<span class="number">8</span>                  <span class="comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">        <span class="number">29</span>: astore_2</span><br><span class="line">        <span class="number">30</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">33</span>: goto          <span class="number">2</span></span><br><span class="line">        <span class="number">36</span>: <span class="keyword">return</span></span><br><span class="line">...</span><br><span class="line">SourceFile: <span class="string">&quot;TestCombine2.java&quot;</span></span><br></pre></td></tr></table></figure><p>和TestCombine1类似, 在mian方法中， 也是使用<code>StringBuilder</code>进行拼接处理的</p><p>最后看下TestCombine3反编译之后的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ζ javap -v TestCombine3</span><br><span class="line">...</span><br><span class="line">Constant pool:</span><br><span class="line">   #<span class="number">1</span> = Methodref          #<span class="number">5.</span>#<span class="number">26</span>         <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Integer            <span class="number">1000000</span></span><br><span class="line">   #<span class="number">3</span> = Class              #<span class="number">27</span>            <span class="comment">// testString/TestCombine3</span></span><br><span class="line">   #<span class="number">4</span> = String             #<span class="number">28</span>            <span class="comment">// string123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">   #<span class="number">5</span> = Class              #<span class="number">29</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">   #<span class="number">6</span> = Utf8               str2</span><br><span class="line">   #<span class="number">7</span> = Utf8               Ljava/lang/String;</span><br><span class="line">   #<span class="number">8</span> = Utf8               ConstantValue</span><br><span class="line">   #<span class="number">9</span> = String             #<span class="number">30</span>            <span class="comment">// 123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">...</span><br><span class="line">  #<span class="number">26</span> = NameAndType        #<span class="number">10</span>:#<span class="number">11</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">27</span> = Utf8               testString/TestCombine3</span><br><span class="line">  #<span class="number">28</span> = Utf8               string123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span><br><span class="line">  #<span class="number">29</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">30</span> = Utf8               <span class="number">123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: istore_1</span><br><span class="line">         <span class="number">2</span>: iload_1</span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">2</span>                  <span class="comment">// int 1000000</span></span><br><span class="line">         <span class="number">5</span>: if_icmpge     <span class="number">17</span></span><br><span class="line">         <span class="number">8</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String string123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</span></span><br><span class="line">        <span class="number">10</span>: astore_2</span><br><span class="line">        <span class="number">11</span>: iinc          <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">        <span class="number">14</span>: goto          <span class="number">2</span></span><br><span class="line">        <span class="number">17</span>: <span class="keyword">return</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;TestCombine3.java&quot;</span></span><br></pre></td></tr></table></figure><p>我们看<code> #4 = String             #28            // string123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789</code>这一行, Java编译器已经将<code>String string2 = &quot;string&quot; + str2;</code>这俩个字符串字面量常量<br>优化成了一个字符串字面量常量.</p><p>从上面的分析中我们可以得到, 在Java编译器进行优化的话, 只有当字符串字面量进行拼接的时候, 才会对其进行优化.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天review同事写的一段代码, 在枚举中动态生成字符串key的时候, 使用字符串常量进行拼接, 虽然感觉这么写会有一定的GC性能消耗, 但是具体原因有点忘记了, 今天就重新写段测试代码,进行测试一下.&lt;/p&gt;
&lt;p&gt;当使用字符串(&lt;code&gt;String&lt;/code&gt;)</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
