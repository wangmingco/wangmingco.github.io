<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王明的技术博客</title>
  
  
  <link href="https://wangmingco.github.io/atom.xml" rel="self"/>
  
  <link href="https://wangmingco.github.io/"/>
  <updated>2022-06-30T01:31:47.097Z</updated>
  <id>https://wangmingco.github.io/</id>
  
  <author>
    <name>王明</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://wangmingco.github.io/2022/06/30/Java/mybatis/mybatis%20mapper%E5%8A%A0%E8%BD%BD/"/>
    <id>https://wangmingco.github.io/2022/06/30/Java/mybatis/mybatis%20mapper%E5%8A%A0%E8%BD%BD/</id>
    <published>2022-06-30T01:31:47.097Z</published>
    <updated>2022-06-30T01:31:47.097Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" />]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>SQL 手册</title>
    <link href="https://wangmingco.github.io/2022/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/"/>
    <id>https://wangmingco.github.io/2022/06/20/%E6%95%B0%E6%8D%AE%E5%BA%93/sql/</id>
    <published>2022-06-19T16:00:00.000Z</published>
    <updated>2022-06-29T04:46:23.380Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" />![](https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_cheat_sheet0.jpeg)<p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_cheat_sheet1.jpeg"></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_cheat_sheet2.jpeg"></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_joins_cheat_sheet0.jpeg"></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_joins_cheat_sheet1.png"></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_window_functions_cheat_sheet0.jpeg"></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/sql/sql_window_functions_cheat_sheet1.jpeg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;![](https://</summary>
      
    
    
    
    <category term="数据库" scheme="https://wangmingco.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>对账</title>
    <link href="https://wangmingco.github.io/2022/06/01/%E6%9D%82%E6%96%87/duizhang/"/>
    <id>https://wangmingco.github.io/2022/06/01/%E6%9D%82%E6%96%87/duizhang/</id>
    <published>2022-05-31T16:00:00.000Z</published>
    <updated>2022-06-27T05:37:35.107Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p>以下方案基于 <code>10.3.35-MariaDB MariaDB Server</code></p></blockquote><p>创建表, 分别创建一个业务交易表和一个三方交易表。最终对账也是对这俩个表的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lob_trade`</span><br><span class="line">(</span><br><span class="line">    `id`           <span class="type">bigint</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `lob_name`     <span class="type">varchar</span>(<span class="number">128</span>)     <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;业务线&#x27;</span>,</span><br><span class="line">    `trade_id`     <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易id&#x27;</span>,</span><br><span class="line">    `trade_amount` <span class="type">bigint</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易金额&#x27;</span>,</span><br><span class="line">    `trade_time`   datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易时间&#x27;</span>,</span><br><span class="line">    `create_time`  datetime         <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time`  <span class="type">timestamp</span>   <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `status`       <span class="type">int</span>(<span class="number">1</span>)           <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否启用（1 是 0 否）&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `lob_name_trade_id_uIdx` (`lob_name`,`trade_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">0</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;业务线交易表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `third_trade`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `merchant_name`    <span class="type">varchar</span>(<span class="number">128</span>)    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户&#x27;</span>,</span><br><span class="line">    `merchant_trade_id`    <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户交易id&#x27;</span>,</span><br><span class="line">    `merchant_trade_amount` <span class="type">bigint</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户交易金额&#x27;</span>,</span><br><span class="line">    `merchant_trade_time`  datetime    <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户交易时间&#x27;</span>,</span><br><span class="line">    `create_time` datetime        <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span>   <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `status`      <span class="type">int</span>(<span class="number">1</span>)          <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;是否启用（1 是 0 否）&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    <span class="keyword">UNIQUE</span> KEY `merchant_name_trade_id_uIdx` (`merchant_name`,`merchant_trade_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">0</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;三方交易表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `lob_trade` (`lob_name`, `trade_id`, `trade_amount`, `trade_time`, `create_time`, `update_time`, `status`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110001&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110002&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110003&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110004&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110005&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110006&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110007&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110008&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110009&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110020&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `third_trade` (`merchant_name`, `merchant_trade_id`, `merchant_trade_amount`, `merchant_trade_time`, `create_time`, `update_time`, `status`)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110001&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110002&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110003&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110004&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110005&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110006&#x27;</span>, <span class="number">6</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110007&#x27;</span>, <span class="number">7</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110008&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110009&#x27;</span>, <span class="number">9</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">( <span class="string">&#x27;maicai&#x27;</span>, <span class="string">&#x27;110030&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:44:54&#x27;</span>, <span class="string">&#x27;2022-06-01 16:45:09&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>业务交易表和三方交易表的数据前9条是相同的，最后一条数据不同，通过join操作，能找出这个不同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> `lob_id`, `lob_name`, `trade_id`, `trade_amount`, `trade_time` <span class="keyword">FROM</span> lob_trade) <span class="keyword">AS</span> lt</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> `third_id`, `merchant_name`, `merchant_trade_id`, `merchant_trade_amount`, `merchant_trade_time` <span class="keyword">FROM</span> third_trade ) <span class="keyword">AS</span> tt</span><br><span class="line"><span class="keyword">ON</span> lt.trade_id <span class="operator">=</span> tt.merchant_trade_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> `lob_id`, `lob_name`, `trade_id`, `trade_amount`, `trade_time` <span class="keyword">FROM</span> lob_trade) <span class="keyword">AS</span> lt</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> `id` <span class="keyword">AS</span> `third_id`, `merchant_name`, `merchant_trade_id`, `merchant_trade_amount`, `merchant_trade_time` <span class="keyword">FROM</span> third_trade ) <span class="keyword">AS</span> tt</span><br><span class="line"><span class="keyword">ON</span> lt.trade_id <span class="operator">=</span> tt.merchant_trade_id</span><br></pre></td></tr></table></figure><p>得到数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">| lob_id | lob_name | trade_id | trade_amount | trade_time     | third_id | merchant_name | merchant_trade_id | merchant_trade_amount | merchant_trade_time |</span><br><span class="line">|--------|----------|----------|--------------|----------------|----------|---------------|-------------------|-----------------------|---------------------|</span><br><span class="line">| 1      | maicai   | 110001   | 1            | 2022/6/1 16:44 | 1        | maicai        | 110001            | 1                     | 2022/6/1 16:44      |</span><br><span class="line">| 2      | maicai   | 110002   | 2            | 2022/6/1 16:44 | 2        | maicai        | 110002            | 2                     | 2022/6/1 16:44      |</span><br><span class="line">| 3      | maicai   | 110003   | 3            | 2022/6/1 16:44 | 3        | maicai        | 110003            | 3                     | 2022/6/1 16:44      |</span><br><span class="line">| 4      | maicai   | 110004   | 4            | 2022/6/1 16:44 | 4        | maicai        | 110004            | 4                     | 2022/6/1 16:44      |</span><br><span class="line">| 5      | maicai   | 110005   | 5            | 2022/6/1 16:44 | 5        | maicai        | 110005            | 5                     | 2022/6/1 16:44      |</span><br><span class="line">| 6      | maicai   | 110006   | 6            | 2022/6/1 16:44 | 6        | maicai        | 110006            | 6                     | 2022/6/1 16:44      |</span><br><span class="line">| 7      | maicai   | 110007   | 7            | 2022/6/1 16:44 | 7        | maicai        | 110007            | 7                     | 2022/6/1 16:44      |</span><br><span class="line">| 8      | maicai   | 110008   | 8            | 2022/6/1 16:44 | 8        | maicai        | 110008            | 8                     | 2022/6/1 16:44      |</span><br><span class="line">| 9      | maicai   | 110009   | 9            | 2022/6/1 16:44 | 9        | maicai        | 110009            | 9                     | 2022/6/1 16:44      |</span><br><span class="line">| 10     | maicai   | 110020   | 20           | 2022/6/1 16:44 | NULL     | NULL          | NULL              | NULL                  | NULL                |</span><br><span class="line">| NULL   | NULL     | NULL     | NULL         | NULL           | 10       | maicai        | 110030            | 30                    | 2022/6/1 16:44      |</span><br></pre></td></tr></table></figure><p>最后只需要判断id列数据是否为空即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="杂文" scheme="https://wangmingco.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>React 学习</title>
    <link href="https://wangmingco.github.io/2022/04/12/%E5%89%8D%E7%AB%AF/REACT%20%E8%AF%AD%E6%B3%95/"/>
    <id>https://wangmingco.github.io/2022/04/12/%E5%89%8D%E7%AB%AF/REACT%20%E8%AF%AD%E6%B3%95/</id>
    <published>2022-04-12T02:21:00.000Z</published>
    <updated>2022-06-29T04:46:31.229Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li>JSX 语法</li><li>组件<ul><li>函数组件<ul><li>没有类组件的生命周期</li><li>函数式组件没有 this</li><li>函数式组件形参是 props 和类组件的 this.props 相同</li><li>hooks 函数组件状态<ul><li><code>const [state, setState] = useState(false);</code> 缓存状态。 在函数中定义一个状态 on, 和一个改变 on 值的方法 setOn().</li><li><code>useEffect(fn, [state])</code> 监听状态，状态变化第一个参数会执行，类似于一个 callback 函数，但是没有返回结果。TODO useEffect 在受控组件中的用途？？？</li><li><code>let f = useCallback(fn, [state])</code> 缓存 fn 函数(fn 默认不执行)。不必每次 render 的时候都创建一遍函数。如果 state 没发生变化，则以后每次调用 f 的时候都不会重新执行 fn</li><li><code>let f = useMemo(fn, [state])</code> 直接执行 fn 函数，然后 useMemo 返回 fn 结果。如果 state 没有发生变化，则以后直接取上次的缓存结果</li><li><code>let ref = useRef()</code> 类似于类组件的 ref</li><li><code>useContext</code> 生产者消费者模型，用于在多个组件间共享数据(看到的例子只有一个生产者，支持多个生产者吗？？？)</li><li><code>useReducer</code> </li></ul></li></ul></li><li>类组件<ul><li>状态<ul><li>setState() 提交状态， 只有通过这个方式修改 state, react 才会重新渲染页面</li><li>this.state.xxx 获取状态</li><li>setState() 同步异步</li></ul></li><li>属性<ul><li>组件传参</li><li>属性获取 this.props.xxx</li><li>属性验证 组件名称.propTypes = {} (需要引入 prop-types)</li><li>默认属性 组件名称.defaultProps = {}</li><li>可以使用 ES6 属性展开 {…obj}</li><li>函数式组件属性支持(但是函数式组件 16.8 之前不支持 state)</li></ul></li><li>ref 获取组件</li></ul></li><li>函数组件<ul><li>箭头函数</li></ul></li><li>事件处理<ul><li>this 问题<ul><li>箭头函数 this 指向外部</li><li>普通函数 this 不好用</li><li>调用传参</li></ul></li></ul></li><li>受控<ul><li>非受控组件 包含 state 的组件，状态组件</li><li>受控组件 只包含 props，不包含 state 的组件，无状态组件 (<input value="123">此时就是受控组件，input 框里面的内容是不可修改的)</li><li>表单<ul><li><code>&lt;input defaultValue=&quot;123&quot;&gt;</code> , 这里如果用 defaultValue 替换 value，将受控组件替换为非受控组件</li><li><code>&lt;input value=&#123;this.state.name&#125; onChange= (evt)=&gt; &#123;setState(&#123;name: evt.target.value&#125;)&#125; &gt;</code> 通过将状态与 value 绑定,</li></ul></li></ul></li><li>生命周期</li></ul></li><li>列表渲染<ul><li>key 值</li></ul></li><li>条件渲染<ul><li>三元操作符，&amp;&amp;操作符</li></ul></li><li>dangerouslySetInnerHTML<ul><li>富文本编辑</li><li>安全性，如何被攻击</li></ul></li></ul><h2 id="ES-6"><a href="#ES-6" class="headerlink" title="ES 6"></a>ES 6</h2><p>对象合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj1 = &#123;</span><br><span class="line">  <span class="attr">a</span> : <span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj2 = &#123;</span><br><span class="line">  <span class="attr">b</span> : <span class="string">&quot;456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj3 = &#123;...obj1, ...obj2&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时obj3就有了obj1和obj2的内容</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;h2 id=&quot;Rea</summary>
      
    
    
    
    <category term="前端" scheme="https://wangmingco.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://wangmingco.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 编译调试 OpenJDK11</title>
    <link href="https://wangmingco.github.io/2022/01/10/Java/jvm/centos%E7%BC%96%E8%AF%91openjdk/"/>
    <id>https://wangmingco.github.io/2022/01/10/Java/jvm/centos%E7%BC%96%E8%AF%91openjdk/</id>
    <published>2022-01-09T16:00:00.000Z</published>
    <updated>2022-07-04T03:16:36.020Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>按照如下过程进行编译(测试机是一台2核4G内存的云虚拟机，编译过程较慢且偶尔会失败，最好是使用一个多核机器进行编译)</p><blockquote><p>本次构建是JDK11当前最新版<a href="https://github.com/openjdk/jdk11u/archive/refs/tags/jdk-11.0.14+8.zip">jdk11u-jdk-11.0.14-8</a>, 构建过程出现问题，参考构建教程 <code>jdk11u-jdk-11.0.14-8/doc/building.html</code>.</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看系统版本</span></span><br><span class="line">cat /proc/version</span><br><span class="line">rpm -q centos-release</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 FreeType</span></span></span><br><span class="line">yum install -y freetype-devel </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 CUPS</span></span></span><br><span class="line">yum install -y cups-devel </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 ALSA</span></span></span><br><span class="line">yum install -y alsa-lib-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 libffi</span></span></span><br><span class="line">yum install -y libffi-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 Autoconf</span></span></span><br><span class="line">yum install -y autoconf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 X11</span></span></span><br><span class="line">yum install -y libxext-dev libx11-dev libXtst-devel libXt-devel libXrender-devel libXi-devel libXrandr-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装 fontconfig</span></span></span><br><span class="line">yum install -y fontconfig</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Boot-JDK, 编译openjdk-11，需要以jdk-11为bootjdk</span></span><br><span class="line">yum install -y java-11-openjdk-devel</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装开发工具</span></span><br><span class="line">yum groupinstall -y &quot;Development Tools&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始编译</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sh ./configure --enable-debug</span></span><br><span class="line">sh ./configure --with-debug-level=slowdebug --with-native-debug-symbols=external</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> make all</span></span><br><span class="line">make images</span><br></pre></td></tr></table></figure><blockquote><p>本次编译使用centos7自带的gcc4.8版本，如果使用高版本，大于文档说的7.4版本，可能会出现编译错误, 那么在运行<code>./configure</code>时打开<code>--disable-warnings-as-errors</code> 配置,即可</p></blockquote><blockquote><p>jdk11u-jdk-11.0.14-8 版本JDK默认是ascii编码，如果想要使用UTF8编码的话，修改 <code>jdk11u-jdk-11.0.14-8/make/common/SetupJavaCompilers.gmk</code> 文件，将<code>-encoding ascii</code> 修改成 <code>-encoding utf-8</code></p></blockquote><p>整个安装编译环境以及编译过程如下:</p><div id="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/centos7_compile_openjdk11.cast"></div><script>AsciinemaPlayer.create("https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/centos7_compile_openjdk11.cast",document.getElementById("https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/centos7_compile_openjdk11.cast"));</script><p>升级GCC11(下面的方式只针对当前session有效)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br><span class="line">sudo yum install devtoolset-11-gcc*</span><br><span class="line">scl enable devtoolset-11 bash</span><br></pre></td></tr></table></figure><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>在vscode中进行远程debug, 在vscode中安装如下插件</p><ul><li>vscode c/c++ 开发支持 <a href="https://github.com/microsoft/vscode-cpptools">C/C++ for Visual Studio Code</a></li><li>Remote-SSH 远程支持 <a href="">Visual Studio Code Remote - SSH</a></li></ul><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/centos7_debug_openjdk11.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>在vscode里可以很方便的修改源码，然后重新编译，debug，yyds</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;h2 id=&quot;编译&quot;</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="jvm" scheme="https://wangmingco.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>北京景点</title>
    <link href="https://wangmingco.github.io/2021/12/09/html/bj_baidu/"/>
    <id>https://wangmingco.github.io/2021/12/09/html/bj_baidu/</id>
    <published>2021-12-09T07:40:00.000Z</published>
    <updated>2021-12-09T08:05:41.190Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/html/bj_baidu.html">北京景点地图</a></p><p>    <div style="width:820px; height:1000px;border:none;text-align:center">        <iframe         allowtransparency="yes"         frameborder="0"         width="820px"         height="1000px"         scrolling="auto"         style="box-shadow: 0px 0px 20px -10px #888;"         src="/html/bj_baidu.html"/>    </div></p>    <p></script></p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/html/bj_baidu.html&quot;&gt;北京景点地图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;div style=&quot;width:820px; height:1000px;border:none;text-align:center&quot;&gt;
        &lt;ifra</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发环境视频</title>
    <link href="https://wangmingco.github.io/2021/06/09/html/videos/"/>
    <id>https://wangmingco.github.io/2021/06/09/html/videos/</id>
    <published>2021-06-09T07:40:00.000Z</published>
    <updated>2022-06-27T03:15:29.460Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p><a href="/html/video.html">开发环境视频</a></p><p>在命令行中设置go的开发环境</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/command-go-dev.mp4?raw=true"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于 .Net 开发API 服务</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/dotnet_api_server.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Goland 开发环境设置</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/goland-dev.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>idea 插件开发环境搭建</p><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/idea_plugin.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于idea 进行性能剖析</p><div id="dplayer4" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer4"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/idea_profiler.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode 设置Docker开发环境</p><div id="dplayer5" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer5"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/vs_docker.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode设置.Net开发环境</p><div id="dplayer6" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer6"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/vscode_dotnet.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>基于VSCode远程开发</p><div id="dplayer7" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer7"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/vscode_remote.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>开发Mac APP</p><div id="dplayer8" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer8"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/xcode_menu_bar_app.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Mac下使用VSCode搭建scheme/lisp 开发环境</p><div id="dplayer9" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer9"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/65271391-1-208.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>Mac下使用VSCode搭建Common Lisp 开发环境</p><div id="dplayer10" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer10"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/65582794-1-208.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> ]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用特定的SSH Key提交GIT</title>
    <link href="https://wangmingco.github.io/2020/11/24/%E6%9D%82%E6%96%87/git-ssh/"/>
    <id>https://wangmingco.github.io/2020/11/24/%E6%9D%82%E6%96%87/git-ssh/</id>
    <published>2020-11-24T12:43:00.000Z</published>
    <updated>2022-05-17T02:02:57.181Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><ol><li>生成新的 ssh key，避免替换新的 sshkey</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -C &quot;xxx@hotmail.com&quot; -f ~/.ssh/id_rsa_gitee -P &quot;&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 /Users/xxx/.ssh/config 文件里添加新的新的 Host</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile /Users/xxx/.ssh/id_rsa_gitee</span><br><span class="line">    IdentitiesOnly yes</span><br></pre></td></tr></table></figure><ol start="3"><li>进入到仓库里，在 git 仓库里设置用户名密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.email &quot;xxx@hotmail.com&quot;</span><br><span class="line">git config user.name &quot;xxx&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li>添加远程仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add backup git@gitee.com:xxx-backup/xxx.201124.git</span><br></pre></td></tr></table></figure><ol start="5"><li>测试</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  xxx git:(master) ✗ git push backup</span><br><span class="line">枚举对象: 478, 完成.</span><br><span class="line">对象计数中: 100% (478/478), 完成.</span><br><span class="line">使用 8 个线程进行压缩</span><br><span class="line">压缩对象中: 100% (324/324), 完成.</span><br><span class="line">写入对象中: 100% (478/478), 2.78 MiB | 5.84 MiB/s, 完成.</span><br><span class="line">总共 478 （差异 147），复用 0 （差异 0）</span><br><span class="line">remote: Resolving deltas: 100% (147/147), done.</span><br><span class="line">remote: Powered by GITEE.COM [GNK-5.0]</span><br><span class="line">To gitee.com:xxx-backup/xxx.201124.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><p>上传脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Get the repos absolute path recursively</span></span><br><span class="line">email=&quot;xxx@hotmail.com&quot;</span><br><span class="line">pwd=&quot;xxx&quot;</span><br><span class="line">cid=&quot;c65e97ab88de932e7c23e9d4b563e5c99b5926a06e26d2e8af26885bd5a6b1da&quot;</span><br><span class="line">csr=&quot;729aeae125864b5577a82629296ce7e389aab8bee5384c25a9fa2c2572064374&quot;</span><br><span class="line">username=&quot;xxx-backup&quot;</span><br><span class="line"></span><br><span class="line">get_repo_paths() &#123;</span><br><span class="line">    find . -type d -name &quot;.git&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get_token() &#123;</span><br><span class="line">    curl -q -X POST --data-urlencode &quot;grant_type=password&quot; --data-urlencode &quot;username=$&#123;email&#125;&quot; --data-urlencode &quot;password=$&#123;pwd&#125;&quot; --data-urlencode &quot;client_id=$&#123;cid&#125;&quot; --data-urlencode &quot;client_secret=$&#123;csr&#125;&quot; --data-urlencode &quot;scope=projects user_info issues notes&quot; https://gitee.com/oauth/token | jq -r &quot;.access_token&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">push() &#123;</span><br><span class="line">    cd &quot;$1&quot;</span><br><span class="line">    local datetime=`date +%y%m%d`</span><br><span class="line">    local git_path=&quot;$&#123;PWD&#125;&quot;</span><br><span class="line">    local local_path=&quot;$&#123;git_path%/.git*&#125;&quot;</span><br><span class="line">    local repo_name=&quot;$&#123;local_path##*/&#125;&quot;</span><br><span class="line">    local remote_path=&quot;git@gitee.com:$&#123;username&#125;/$&#123;repo_name&#125;.git&quot;</span><br><span class="line">    local http_path=&quot;https://gitee.com/$&#123;username&#125;/$&#123;repo_name&#125;.git&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cd &quot;$&#123;local_path&#125;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &quot;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&quot;</span><br><span class="line">    echo &quot;&gt; \`$&#123;repo_name&#125;&#x27;&quot;</span><br><span class="line">    echo &quot;  Local path : $PWD&quot;</span><br><span class="line">    echo &quot;  Remote path: $remote_path&quot;</span><br><span class="line">    echo &quot;  Http path: $http_path&quot;</span><br><span class="line">    echo &quot;  Token: $&#123;access_token&#125;&quot;</span><br><span class="line">    echo &quot;  RepoName: $&#123;repo_name&#125;&quot;</span><br><span class="line">    echo &quot;= = = = = = = = = = = = = = = = = = = = = = = = = = =&quot;</span><br><span class="line">    echo &quot;&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    curl -X POST -s\</span><br><span class="line">         --header &#x27;Content-Type: application/json;charset=UTF-8&#x27; &#x27;https://gitee.com/api/v5/user/repos&#x27;\</span><br><span class="line">         -d &#x27;&#123;&quot;access_token&quot;:&quot;&#x27;$&#123;access_token&#125;&#x27;&quot;,&quot;name&quot;:&quot;&#x27;$&#123;repo_name&#125;&#x27;&quot;,&quot;has_issues&quot;:&quot;true&quot;,&quot;has_wiki&quot;:&quot;true&quot;,&quot;can_comment&quot;:&quot;true&quot;, &quot;private&quot;:&quot;true&quot;&#125;&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    git config user.email &quot;xxx@hotmail.com&quot;</span><br><span class="line">    git config user.name &quot;xxx&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    git remote rm backup</span><br><span class="line">    git remote add backup &quot;$remote_path&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    git push backup</span><br><span class="line">    return_status=$?</span><br><span class="line"></span><br><span class="line">    echo &quot;= = = = = = = = = = = = = = = = = = = = = = = = = = =&quot;</span><br><span class="line"></span><br><span class="line">    return $return_status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">die() &#123;</span><br><span class="line">    echo &quot;&gt; Fatal error!!!&quot;</span><br><span class="line">    exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">    access_token=$(get_token)</span><br><span class="line"></span><br><span class="line">    get_repo_paths | while read p; do</span><br><span class="line">        push &quot;$&#123;p&#125;&quot; || die</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;ol&gt;
&lt;li&gt;生成</summary>
      
    
    
    
    <category term="杂文" scheme="https://wangmingco.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>HttpClient 多线程请求</title>
    <link href="https://wangmingco.github.io/2020/11/05/Java/lib/HttpClient%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%B7%E6%B1%82/"/>
    <id>https://wangmingco.github.io/2020/11/05/Java/lib/HttpClient%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E8%AF%B7%E6%B1%82/</id>
    <published>2020-11-04T16:00:00.000Z</published>
    <updated>2022-06-30T02:42:13.216Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p>写一段客户端测试的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">public class HttpClient &#123;</span><br><span class="line"></span><br><span class="line">   private static final Logger LOGGER = LoggerFactory.getLogger(HttpClient.class);</span><br><span class="line"></span><br><span class="line">   private static final CloseableHttpClient staticClient;</span><br><span class="line">   static &#123;</span><br><span class="line">      RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">            .setSocketTimeout(8000)</span><br><span class="line">            .setConnectTimeout(8000)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      staticClient = HttpClients.custom()</span><br><span class="line">            .setDefaultRequestConfig(requestConfig)</span><br><span class="line">            .useSystemProperties()</span><br><span class="line">            .build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">      TimeUnit.SECONDS.sleep(10);</span><br><span class="line"></span><br><span class="line">      for (int i = 1; i &lt; 20; i++) &#123;</span><br><span class="line">         startRequest(i);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   private static void startRequest(int idx) &#123;</span><br><span class="line">      new Thread(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">         HttpHost httpHost = new HttpHost(&quot;localhost&quot;, 8080);</span><br><span class="line">         HttpRequest httpRequest = new HttpGet(&quot;/&quot; + idx);</span><br><span class="line">         try &#123;</span><br><span class="line">            CloseableHttpClient httpClient = getClient();</span><br><span class="line">            print(httpClient);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            LOGGER.info(&quot;请求开始: &quot; + idx);</span><br><span class="line">            httpClient.execute(httpHost, httpRequest);</span><br><span class="line">            LOGGER.info(&quot;请求结束: &quot; + idx);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">            LOGGER.error(&quot;请求异常: &quot; + idx, e);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   private static CloseableHttpClient getClient() &#123;</span><br><span class="line">      return staticClient;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   private static void print(CloseableHttpClient httpClient) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line"></span><br><span class="line">         Field field = httpClient.getClass().getDeclaredField(&quot;connManager&quot;);</span><br><span class="line">         field.setAccessible(true);</span><br><span class="line"></span><br><span class="line">         PoolingHttpClientConnectionManager clientConnectionManager = (PoolingHttpClientConnectionManager)field.get(httpClient);</span><br><span class="line">         PoolStats stats = clientConnectionManager.getTotalStats();</span><br><span class="line">         System.out.println(&quot;Max : &quot; + stats.getMax()</span><br><span class="line">               + &quot;. Available : &quot; + stats.getAvailable()</span><br><span class="line">               + &quot;. Leased : &quot; + stats.getLeased()</span><br><span class="line">               + &quot;. Pending : &quot; + stats.getPending()</span><br><span class="line">               + &quot;. DefaultMaxPerRoute : &quot; + clientConnectionManager.getDefaultMaxPerRoute()</span><br><span class="line">               + &quot;. MaxTotal : &quot; + clientConnectionManager.getMaxTotal()</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line">         field.setAccessible(false);</span><br><span class="line">      &#125; catch (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端沉睡3秒钟，每次执行这段代码的话，都只会有2个请求执行完成。<br>这是因为在<code>HttpClient</code>的连接池中<code>MaxtTotal</code>， <code>DefaultMaxPerRoute</code>有这么俩个参数，</p><ul><li><code>MaxtTotal</code> 表示连接池中最大的连接数，</li><li><code>DefaultMaxPerRoute</code> 表示某个地址最大的并发连接数。</li></ul><p>比如<code>MaxtTotal</code>为20，<code>DefaultMaxPerRoute</code>为2（这俩个值也是默认值）。<br>现在有10个并发请求，其中4个请求<a href="http://www.baidu.com/">www.baidu.com</a>, 6个请求<a href="http://www.qq.com/">www.qq.com</a>, 如果服务器都阻塞住的话，那么现在的并发连接是4个，baidu2个，qq俩个。<br>如果在<code>RequestConfig#setConnectionRequestTimeout</code>这个没有设置的话，其他的请求线程就会一直阻塞了。</p><p>解决这个问题的话，有三种方案</p><ol><li>设置<code>RequestConfig#setConnectionRequestTimeout</code>这个值，大于0的话，如果到达时间没有可用连接的话，就会抛出异常</li><li>设置<code>System.setProperty(&quot;http.maxConnections&quot;, &quot;20”);</code> 这个值会调大 <code>DefaultMaxPerRoute</code> 这个值</li><li>不要共享<code>HttpClient</code>，如果想要降低new的话，可以使用<code>ThreadLocal</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;写一段客户端测试</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java 三方库" scheme="https://wangmingco.github.io/tags/Java-%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>ssh 防止自动断开</title>
    <link href="https://wangmingco.github.io/2020/11/03/%E6%9D%82%E6%96%87/ssh%20%E9%98%B2%E6%AD%A2%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80/"/>
    <id>https://wangmingco.github.io/2020/11/03/%E6%9D%82%E6%96%87/ssh%20%E9%98%B2%E6%AD%A2%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80/</id>
    <published>2020-11-02T16:00:00.000Z</published>
    <updated>2022-06-27T04:03:21.737Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p>1、$TMOUT 系统环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用以下命令判断是否是否设置了该参数</span></span><br><span class="line">echo $TMOUT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果输出空或0表示不超时，大于0的数字n表示n秒没有收入则超时</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改方法</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------</span></span><br><span class="line">export TMOUT=900</span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将以上900修改为0就是设置不超时</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 让配置立即生效</span></span><br></pre></td></tr></table></figure><p>2、sshd 服务配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/ssh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看sshd_config中关于客户端活动状态的配置</span></span><br><span class="line">grep ClientAlive sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认配置如下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ClientAliveInterval 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ClientAliveCountMax 3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ClientAliveInterval指定了服务器端向客户端请求消息的时间间隔, 默认是0, 不发送。设置60表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开。正常情况下, 客户端不会不响应，使用默认值3即可。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份原配置文件</span></span><br><span class="line">cp sshd_config sshd_config.bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用客户端活动检查，每60秒检查一次，3次不活动断开连接</span></span><br><span class="line">sed -i &quot;s/#ClientAliveInterval 0/ClientAliveInterval 60/g&quot; sshd_config</span><br><span class="line">sed -i &quot;s/#ClientAliveCountMax 3/ClientAliveCountMax 3/g&quot; sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 确认修改</span></span><br><span class="line">grep ClientAlive sshd_config</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比较配置文件差异</span></span><br><span class="line">diff sshd_config sshd_config.bak</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新加载ssd配置，让配置生效</span></span><br><span class="line">service sshd reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;1、$TMOUT</summary>
      
    
    
    
    <category term="杂文" scheme="https://wangmingco.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 线程状态</title>
    <link href="https://wangmingco.github.io/2020/05/13/Java/javase/Java%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
    <id>https://wangmingco.github.io/2020/05/13/Java/javase/Java%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</id>
    <published>2020-05-12T16:00:00.000Z</published>
    <updated>2022-07-04T02:15:54.297Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/140396504">Java 线程状态</a></p></blockquote><p>Java装状态流转如下</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/java_thread_state1.jpg"></p><p>Running这个状态在Java平台中其实是不存在的，图中表示的只是获取了CPU的RUNNABLE状态。上图只是给出了一个大概的流程运转图，图里的有些操作是需要多个线程配合才能完成的，具体的流转过程在下面有详细的解释</p><p>Java线程状态在java.lang.Thread.State 这个枚举类中有描述</p><ul><li><code>NEW</code>：表示还未开始执行的状态RUNNABLE：表示线程是可运行，但目前等待系统运行资源（例如CPU等）</li><li><code>BLOCKED</code>：表示线程目前正在等待monitor lock，被阻塞住了。这种状态下是处于进入<code>synchronized block/method</code> 或者 调用<code>Object.wait()</code>之后重新进入 <code>synchronized block/method</code> 。</li><li><code>WAITING</code>：线程A处于等待操作，等待线程B执行一个特定的操作。当线程A调用了<code>Object.wait()/ Thread.join()/ LockSupport.park()</code> 这些方法后就会进入 <code>WAITING</code>状态</li><li><code>TIMED_WAITING</code>：线程处于一个带有超时时间的 WAITING 状态。当线程A调用了 <code>Thread.sleep()/ Object.wait()/ Thread.join()/ LockSupport.parkNanos()/ LockSupport.parkUntil()</code> 这些方法后就会进入 <code>TIMED_WAITING</code> 状态。</li><li><code>TERMINATED</code>： 表示线程执行完成了。</li></ul><p>Java线程的状态不多，主要的也就是 <code>BLOCKED/WAITING/TIMED_WAITING</code> 这三个状态。</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/java_thread_state2.jpg"></p><p>假设我们现在有AB俩个线程，刚开始这俩个线程都是处于RUNNABLE状态，假设都是运行状态（具体是否在运行取决于CPU调度）。然后俩个线程都要进入一段同步代码块，A成功获取到了监视锁，它进入了代码块继续处于RUNNABLE状态等待CPU调度。但是B获取监视锁失败了，于是就进入了<code>BLOCKED</code>状态，等待A释放监视锁。</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/java_thread_state3.jpg"></p><p>如果我们让A在同步块中执行监视锁对象的<code>wait()</code> 方法，A就会进入<code>WAITING</code>状态，释放监视锁等待B唤醒。B获得锁进入同步块后，调用监视锁对象的<code>notify()</code>方法唤醒A，此时A应该有一个短暂的RUNNABLE状态，然后进入进入<code>BLOCKED</code>状态等待B释放锁。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="JavaSE" scheme="https://wangmingco.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>写一个在线 Java 脚本执行器</title>
    <link href="https://wangmingco.github.io/2020/04/15/%E5%BC%80%E6%BA%90/%E5%86%99%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%20Java%20%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
    <id>https://wangmingco.github.io/2020/04/15/%E5%BC%80%E6%BA%90/%E5%86%99%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%20Java%20%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8C%E5%99%A8/</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2022-07-04T03:20:46.044Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/130425196">写一个在线 Java 脚本执行器</a></p></blockquote><p>在生产环境中，有时候我们想要快速执行一段代码，但是又不得不经历上线的痛苦（分情况哈，有时候这种痛苦是必须的）或者在某些场景中，不能重启避免破坏现场，那么有个在线脚本执行器就最好不过了。于是在工作之余，便写了这么一个 jrc 小工具 （当然市场上可能会有更好的选择，比如阿里巴巴的arthas，大家如果有更习惯的工具，也可以不参考我这个哈）</p><p>这个工具主要就是利用了java自带的javac包里的相关api实现的。先放一段效果图</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/java_srcipt.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>写一个在线Java脚本执行器</p><p>编译代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> JrcResult <span class="title">compile</span><span class="params">(String javaCode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();</span><br><span class="line">        DiagnosticCollector&lt;JavaFileObject&gt; diagnostics = <span class="keyword">new</span> DiagnosticCollector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        JrcJavaFileManager fileManager = JavaFileManagerFactory.getJavaFileManager(compiler.getStandardFileManager(diagnostics, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        ClassInfo classInfo = getClassFileFromJavaSource(javaCode);</span><br><span class="line">        List&lt;JavaFileObject&gt; javaFileObjects = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        javaFileObjects.add(<span class="keyword">new</span> StringJavaFileObject(classInfo.className, javaCode));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用编译选项可以改变默认编译行为。编译选项是一个元素为String类型的Iterable集合</span></span><br><span class="line">        List&lt;String&gt; options = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        options.add(<span class="string">&quot;-encoding&quot;</span>);</span><br><span class="line">        options.add(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        options.add(<span class="string">&quot;-classpath&quot;</span>);</span><br><span class="line">        options.add(classpath);</span><br><span class="line"></span><br><span class="line">        StringWriter outWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        JavaCompiler.CompilationTask task = compiler.getTask(outWriter, fileManager, diagnostics, options, <span class="keyword">null</span>, javaFileObjects);</span><br><span class="line">        <span class="comment">// 编译源程序</span></span><br><span class="line">        <span class="keyword">boolean</span> success = task.call();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整段代码还是比较简单的</p><ol><li>获取系统Java编译器</li><li>获取源码的类信息，比如名称，方法等等</li><li>将源码存储进<code>StringJavaFileObject</code></li><li>设置cp等进行编译</li></ol><p>大体的流程就是这几步就完成了。</p><p>整个过程中的难点是如果我们的工程是基于springboot的话，那么需要遍历springboot里面的文件夹和文件，针对springboot的处理可以参考 SpringBoot Loader 浅析</p><p>下面主要是说一下 对JavaFileManager的处理。在SpringBootLauncher里只是实现了对springboot fat jar的处理，但是具体和JavaCompiler 的融合还是在 SpringBootJavaFileManager 这个里处理的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootJavaFileManager</span> <span class="keyword">extends</span> <span class="title">JrcJavaFileManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SpringBootJavaFileManager.class);</span><br><span class="line"></span><br><span class="line">    SpringBootLauncher springBootLauncher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringBootJavaFileManager</span><span class="params">(StandardJavaFileManager standardManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(standardManager);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            springBootLauncher = <span class="keyword">new</span> SpringBootLauncher();</span><br><span class="line">            springBootLauncher.launch();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">(Location location)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">        ClassLoaderUtil.setClassLoader(<span class="keyword">new</span> JrcLaunchedURLClassLoader(cl));</span><br><span class="line">        <span class="keyword">return</span> cl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;JavaFileObject&gt; <span class="title">list</span><span class="params">(Location location, String packageName, Set set, <span class="keyword">boolean</span> recurse)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String packagePath = packageName.replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        List&lt;SpringBootArchiveEntry&gt; entries = springBootLauncher.getEntries(packagePath);</span><br><span class="line"></span><br><span class="line">        List&lt;JavaFileObject&gt; list = entries.stream().map(it -&gt; <span class="keyword">new</span> JarJavaFileObject(it, JavaFileObject.Kind.CLASS)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        Iterable&lt;JavaFileObject&gt; superList = <span class="keyword">super</span>.list(location, packageName, set, recurse);</span><br><span class="line">        <span class="keyword">if</span> (superList == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (JavaFileObject o : superList) &#123;</span><br><span class="line">            list.add(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 JavaFileObject 转换成className</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> location PLATFORM_CLASS_PATH</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file     /Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home/lib/ct.sym(META-INF/sym/rt.jar/java/lang/Comparable.class)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.Comparable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">inferBinaryName</span><span class="params">(Location location, JavaFileObject file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (file <span class="keyword">instanceof</span> JarJavaFileObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> file.getName();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.inferBinaryName(location, file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在构造<code>SpringBootJavaFileManager</code>实例的时候，开启SpringBoot fat jar的扫描。</li><li>重写 <code>getClassLoader()</code> 获取springboot loader里的 <code>LaunchedURLClassLoader</code> ，并将它设置成全局的classloader，主要是后面在执行方法时使用该classloader加载类</li><li>重写<code>list()</code> 方法，利用<code>SpringBootLauncher</code> 找到springboot fat jar里面的文件和文件夹</li><li>重写<code>inferBinaryName()</code> 方法，这是因为在list()方法中返回的是自定义的<code>JarJavaFileObject</code>，而<code>super.inferBinaryName()</code> 里有个校验，file 必须是 <code>BaseFileObject</code>,因此这里有个判断，如果是<code>JarJavaFileObject类型</code>，直接获取名字返回</li></ol><p>还有一点是对于classloader的处理，因为在执行方法的时候需要将编译的class字节码加载进jvm里，所以自定义了一个classloader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JrcLaunchedURLClassLoader</span> <span class="keyword">implements</span> <span class="title">JrcClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(JrcLaunchedURLClassLoader.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassLoader launchedURLClassLoader;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JrcLaunchedURLClassLoader</span><span class="params">(ClassLoader launchedURLClassLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.launchedURLClassLoader = launchedURLClassLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">defineClass</span><span class="params">(String name, <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> launchedURLClassLoader.loadClass(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method defineClassMethod = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">new</span> Class[]&#123;String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class&#125;);</span><br><span class="line">            <span class="keyword">boolean</span> isAccessible = defineClassMethod.isAccessible();</span><br><span class="line">            <span class="keyword">if</span> (!isAccessible) &#123;</span><br><span class="line">                defineClassMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object result = defineClassMethod.invoke(launchedURLClassLoader, name, b, <span class="number">0</span>, b.length);</span><br><span class="line">            defineClassMethod.setAccessible(isAccessible);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (Class) result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;defineClass name:&#123;&#125;&quot;</span>, name, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;defineClass name:&#123;&#125;&quot;</span>, name, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;defineClass name:&#123;&#125;&quot;</span>, name, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大体的思路就是这样，具体的细节可以参考 jrc</p><p>PS: 当然大家也可以选择不上传java代码，直接将本地编译好的class字节码上传就可以了，这里也就是给大家提供一个思路。</p><p>另外更加产品化的东西可以考虑接入maven api实现依赖包的搜索下载，目前只能提供手动jar包上传方式。 ——-》 这个已经实现了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="开源" scheme="https://wangmingco.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>基于SpringBoot/Vue/ElementUI 构建权限系统</title>
    <link href="https://wangmingco.github.io/2020/04/14/%E5%BC%80%E6%BA%90/%E5%9F%BA%E4%BA%8E%20SpringBoot%20Vue%20ElementUI%20%E6%9E%84%E5%BB%BA%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://wangmingco.github.io/2020/04/14/%E5%BC%80%E6%BA%90/%E5%9F%BA%E4%BA%8E%20SpringBoot%20Vue%20ElementUI%20%E6%9E%84%E5%BB%BA%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-04-13T16:00:00.000Z</published>
    <updated>2022-07-04T03:24:38.638Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/130412007">基于 SpringBoot/Vue/ElementUI 构建权限系统</a></p></blockquote><p>记录一下前几天写的一个权限系统。</p><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/admin.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>整个系统基于RBAC模型构建，提供了前端权限控制(动态路由生成)和后端权限控制(接口访问权限)，其实还应该做一层数据访问权限，但是这和具体的业务结合比较紧凑，因此就没实现。</p><ol><li><code>User</code> 表存储用户登录信息</li><li><code>Role</code> 表存储角色</li><li><code>UserRoleRelation</code> 表存储用户角色关系</li><li><code>BackendPermission</code> 表存储后端权限(当服务器启动时会将所有路径都自动保存在该表里)</li><li><code>RoleBackendPermissionRelation</code> 表存储角色拥有的后端权限</li><li><code>FrontendPermission</code> 表存储前端路由信息.</li><li><code>RoleFrontendPermissionRelation</code> 表存储角色拥有的前端路由信息</li></ol><h2 id="后端系统"><a href="#后端系统" class="headerlink" title="后端系统"></a>后端系统</h2><p>后端系统是基于Springboot+shiro构建的，整个系统的核心就在shiro的配置上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getSystemLogger(ShiroConfig.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SecurityManager securityManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStaticSecurityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Autowired</span> DatabaseRealm shiroDatabaseRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(shiroDatabaseRealm);</span><br><span class="line">        securityManager.setSessionManager(buildSessionManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SessionManager <span class="title">buildSessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setSessionIdCookie(buildCookie());</span><br><span class="line">        sessionManager.setSessionIdCookieEnabled(<span class="keyword">true</span>);</span><br><span class="line">        sessionManager.setSessionIdUrlRewritingEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 全局会话超时时间（单位毫秒），默认30分钟</span></span><br><span class="line">        sessionManager.setGlobalSessionTimeout(AuthConstant.GlobalSessionTimeout);</span><br><span class="line">        <span class="comment">// 是否开启删除无效的session对象  默认为true</span></span><br><span class="line">        sessionManager.setDeleteInvalidSessions(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 是否开启定时调度器进行检测过期session 默认为true</span></span><br><span class="line">        sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置session失效的扫描时间, 清理用户直接关闭浏览器造成的孤立会话 默认30分钟</span></span><br><span class="line">        sessionManager.setSessionValidationInterval(AuthConstant.SessionValidationInterval);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">buildCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(TOKEN_NAME);</span><br><span class="line">        simpleCookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 对服务器生成的TOKEN设置 HttpOnly 属性. 前端无法读写该TOKEN, 提供系统安全, 防止XSS攻击</span></span><br><span class="line">        simpleCookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置浏览器关闭时失效此Cookie</span></span><br><span class="line">        simpleCookie.setMaxAge(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleCookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置接口权限验证, 目前只针对api接口进行权限验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;shiroFilter&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;start shiroFilter setting&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">&quot;/#/dashboard&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/403&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Filter&gt; filtersMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        filtersMap.put(<span class="string">&quot;apiAccessControlFilter&quot;</span>, <span class="keyword">new</span> ApiAccessControlFilter());</span><br><span class="line">        shiroFilterFactoryBean.setFilters(filtersMap);</span><br><span class="line"></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/static/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/#/login/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/api/user/auth/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/api/**&quot;</span>, <span class="string">&quot;apiAccessControlFilter&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;logFilter&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line"></span><br><span class="line">        LOGGER.info(<span class="string">&quot;shirFilter config fineshed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// CORS配置信息</span></span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!SpringUtil.isInProduction(applicationContext)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;进行非生产模式CORS配置&quot;</span>);</span><br><span class="line">            config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">            config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.addExposedHeader(<span class="string">&quot;Set-Cookie&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UrlBasedCorsConfigurationSource configSource = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        configSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(configSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个配置有几个关键的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleCookie simpleCookie = <span class="keyword">new</span> SimpleCookie(TOKEN_NAME);</span><br><span class="line">simpleCookie.setHttpOnly(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>token是存储在cookie中，由后端传给前端的。而且这个cookie前端是不可读的，避免xss攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Filter&gt; filtersMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">filtersMap.put(<span class="string">&quot;apiAccessControlFilter&quot;</span>, <span class="keyword">new</span> ApiAccessControlFilter());</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/api/user/auth/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/api/**&quot;</span>, <span class="string">&quot;apiAccessControlFilter&quot;</span>);</span><br></pre></td></tr></table></figure><p>定义了一个<code>ApiAccessControlFilter</code>，只有当访问以<code>/api/</code>开头的接口时才会受到后端权限控制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!SpringUtil.isInProduction(applicationContext)) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;进行非生产模式CORS配置&quot;</span>);</span><br><span class="line">            config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">            config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            config.addExposedHeader(<span class="string">&quot;Set-Cookie&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了一个是否在生产环境中的判断，因为在开发模式中，前端工程是直接运行在node服务中的，因此要做跨域访问，所以在非生产环境中允许跨域访问。</p><p>后端还有一些其他的功能，比如日志记录，参数校验，请求统计等等，这些非核心功能可以参考最后的工程代码。</p><h2 id="前端系统"><a href="#前端系统" class="headerlink" title="前端系统"></a>前端系统</h2><p>前端系统是基于vue-element-admin 进行二次开发的。</p><p>主要修改的就是cookie的存储，vue-element-admin 默认是通过http response body获取token，但是我修改成了通过header cookie返回，并且cookie默认不可读。</p><p>vue-element-admin 自带</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 登录  </span></span><br><span class="line"><span class="function"><span class="title">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">        commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.token)</span><br><span class="line">        setToken(data.token)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通信前获取token</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>还有一点修改就是前端路由的修改。</p><p>vue-element-admin 默认的是权限控制是在前端代码中控制的，后端只需要返回用户拥有的角色，然后前端根据角色信息找到权限然后生成路由。我修改成了整个前端的路由都是由后端控制返回的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="function"><span class="title">generateRoutes</span>(<span class="params">&#123; commit &#125;, roles</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      getUserFrontendPermissions().then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> routeNodes = response.data.routeNodes</span><br><span class="line">        importComponent(routeNodes)</span><br><span class="line">        </span><br><span class="line">        commit(<span class="string">&#x27;SET_ROUTES&#x27;</span>, routeNodes)</span><br><span class="line">        resolve(routeNodes)</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">importComponent</span>(<span class="params">routeNodes</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> rn <span class="keyword">of</span> routeNodes) &#123;</span><br><span class="line">    <span class="keyword">if</span>(rn.component == <span class="string">&quot;Layout&quot;</span>) &#123;</span><br><span class="line">      rn.component = Layout</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> componentPath = rn.component</span><br><span class="line">      rn.component = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">`@/views/<span class="subst">$&#123;componentPath&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span>(rn.children &amp;&amp; rn.children.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      importComponent(rn.children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要的函数就是importComponent(routeNodes), 采用递归的方式import组件.</p><blockquote><p>这里遇到一点小问题，webpack 编译es6 动态引入 import() 时不能传入变量, 但一定要用变量的时候，可以通过字符串模板来提供部分信息给webpack；例如import(./path/${myFile}), 这样编译时会编译所有./path下的模块. 参考在vue中import()语法为什么不能传入变量?</p></blockquote><p>整体的代码就是这么多吧，当然在整个调试过程中还是花了些时间的，具体的可以参考我的提交记录 admin-solution</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="开源" scheme="https://wangmingco.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>当 Netty 遇上 Spring Boot</title>
    <link href="https://wangmingco.github.io/2019/12/09/%E5%BC%80%E6%BA%90/%E5%BD%93%20Netty%20%E9%81%87%E4%B8%8A%20Spring%20Boot/"/>
    <id>https://wangmingco.github.io/2019/12/09/%E5%BC%80%E6%BA%90/%E5%BD%93%20Netty%20%E9%81%87%E4%B8%8A%20Spring%20Boot/</id>
    <published>2019-12-08T16:00:00.000Z</published>
    <updated>2022-07-04T03:25:22.642Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/96378920">当 Netty 遇上 Spring Boot</a> 本文是最基于项目开始时写的，后期代码重构过几次，但是思路是一致的</p></blockquote><p>当Netty遇上Spring Boot会发生什么呢? 当然是 <a href="https://github.com/wangmingco/netty-spring-boot-starter">netty-spring-boot-starter</a> 啦</p><p>周末有些闲暇时间, 便想将Netty与Spring Boot整合到一起, 看到了各种starter, 那干脆整一个 netty-spring-boot-starter 吧.<br>netty-spring-boot-starter</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"theme":"#FADFA3","video":{"url":"https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/videos/nsb.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> <p>第一版要实现如下功能</p><ol><li>通过<code>@SpringBootApplication</code> 注解启动服务后, Netty服务能够启动起来</li><li>能够识别到类似于<code>GetMapping</code>注解的自定义消息处理注解<code>CommandController</code>和<code>CommandMapping</code></li><li>Netty收到消息后能够转发到Spring上下文中进行方法调用</li></ol><p>嗯, 就是这些….</p><p>根据王总的说法, 我们的小目标建立好了, 接下来咋整呢?</p><p>首先呢, 当然是从网上找个教程啦, 看看starter是咋弄的, google一下找到第一篇文章, 运用Ctrl C/Ctrl V大法, 欧了, 服务起来了, 当然还是得看看大象装冰箱, 总共分几步</p><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;netty.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-写一下配置类-用于自定义application-properties里的参数"><a href="#2-写一下配置类-用于自定义application-properties里的参数" class="headerlink" title="2. 写一下配置类, 用于自定义application.properties里的参数"></a>2. 写一下配置类, 用于自定义<code>application.properties</code>里的参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.boot.netty&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootNettyProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer PORT = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-再把配置类整上-在这里启动Netty服务器"><a href="#3-再把配置类整上-在这里启动Netty服务器" class="headerlink" title="3. 再把配置类整上, 在这里启动Netty服务器"></a>3. 再把配置类整上, 在这里启动Netty服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SpringBootNettyProperties.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootNettyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SpringBootNettyProperties springBootNettyProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(NettyStarter.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NettyStarter <span class="title">nettyStarter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NettyStarter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyStarter</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> SpringBootNettyProperties springBootNettyProperties;</span><br><span class="line">        <span class="keyword">private</span> NettyServer nettyServer;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            NettyServer nettyServer = NettyServer.builder().build();</span><br><span class="line">            nettyServer.start();</span><br><span class="line">            <span class="keyword">this</span>.nettyServer = nettyServer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            nettyServer.stop();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我写了一个内部类NettyStarter, 作为Netty服务启动的入口. 并且把它注册为一个Bean, 因为在客户端程序中, 可能是扫描不到我这个包的, 所以在配置类中, 直接把它注册到容器里.</p><h4 id="4-实现自定义注解扫描"><a href="#4-实现自定义注解扫描" class="headerlink" title="4. 实现自定义注解扫描"></a>4. 实现自定义注解扫描</h4><p>我自己写了俩个注解</p><ul><li><code>CommandController</code> 类似于<code>RestController</code>, 注解在类上, 表示这个类是用来处理Netty消息的</li><li><code>CommandMapping</code> 类似于<code>GetMapping</code>, 注解在方法上, 表示这个方法是用来接收Netty消息的</li></ul><p>然后实现Spring为我们提供的<code>ResourceLoaderAware</code>, <code>ImportBeanDefinitionRegistrar</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandScannerRegistrar</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span>, <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line">       String[] basePackages = annoAttrs.getStringArray(<span class="string">&quot;basePackage&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义的包扫描器</span></span><br><span class="line">        CommandClassPathScanner commandClassPathScanner = <span class="keyword">new</span> CommandClassPathScanner(beanDefinitionRegistry, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//扫描指定路径下的接口</span></span><br><span class="line">        Set&lt;BeanDefinitionHolder&gt; beanDefinitionHolders = commandClassPathScanner.doScan(basePackages);</span><br><span class="line">        registerCommandMapping(beanDefinitionRegistry, beanDefinitionHolders);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerCommandMapping</span><span class="params">(BeanDefinitionRegistry beanDefinitionRegistry, Set&lt;BeanDefinitionHolder&gt; beanDefinitionHolders)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) &#123;</span><br><span class="line">            String beanClassName = beanDefinitionHolder.getBeanDefinition().getBeanClassName();</span><br><span class="line"></span><br><span class="line">            Class beanClass = Class.forName(beanClassName);</span><br><span class="line">            <span class="keyword">for</span> (Method method : beanClass.getMethods()) &#123;</span><br><span class="line">                CommandMapping commandMappingAnnotation = method.getAnnotation(CommandMapping.class);</span><br><span class="line">                List&lt;ParameterInfo&gt; parameterInfoList = handleParameter(method);</span><br><span class="line"></span><br><span class="line">                MethodInfo methodInfo = MethodInfo.builder()</span><br><span class="line">                        .parameterInfoList(parameterInfoList)</span><br><span class="line">                        .targetMethod(method)</span><br><span class="line">                        .targetBeanClass(beanClass)</span><br><span class="line">                        .build();</span><br><span class="line"></span><br><span class="line">                CommandMethodCache.add(String.valueOf(commandMappingAnnotation.id()), methodInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ParameterInfo&gt; <span class="title">handleParameter</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        List&lt;ParameterInfo&gt; parameterInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class parameterType : method.getParameterTypes()) &#123;</span><br><span class="line">            ParameterInfo.ParameterInfoBuilder parameterInfoBuilder = ParameterInfo.builder();</span><br><span class="line">            <span class="keyword">if</span> (GeneratedMessageV3.class.isAssignableFrom(parameterType)) &#123;</span><br><span class="line">                setParser(parameterInfoBuilder, parameterType);</span><br><span class="line">            &#125;</span><br><span class="line">            parameterInfoList.add(parameterInfoBuilder.build());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameterInfoList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setParser</span><span class="params">(ParameterInfo.ParameterInfoBuilder builder, Class&lt;?&gt; parameterType)</span> </span>&#123;</span><br><span class="line">        Field parserField = parameterType.getDeclaredField(<span class="string">&quot;PARSER&quot;</span>);</span><br><span class="line">        parserField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Parser parser = (Parser) parserField.get(parameterType);</span><br><span class="line">        builder.parser(parser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是一段比较核心的代码, 而且也比较长, 我一点一点来说.</p><p><code>ImportBeanDefinitionRegistrar</code> 这个接口是用来做动态注册bean的, 我在<code>registerBeanDefinitions</code> 方法中实现对自定义注解的扫描, 然后注册到<code>beanDefinitionRegistry</code>里.</p><p>对于自定义注解扫描的话, 我继承了<code>ClassPathBeanDefinitionScanner</code>类, 写了一个扫描器, 很简单, 可以直接看我项目里的源码.</p><p>写到这里的时候, 第一个难点出现了, Spring只扫描到了类也就是<code>CommandController</code>, 而没有扫描到<code>CommandMapping</code>, 当时有些心烦意乱就没有去看spring里对于<code>GetMapping</code>等注解的处理, 就直接用反射的方式简单处理了一下, 这点后期可以优化成利用动态代理或者ASM等框架实现, 提高一下性能.</p><p>这里的思路是我把<code>CommandController</code>类里的每个方法都遍历一遍, 如果有<code>CommandMapping</code>注解我就缓存起来, 然后看<code>CommandMapping</code>的方法里是否有Protobuf类, 如果有的话, 我就获取到它的Parser, 也缓存起来, 等到解析消息时候用.</p><p>到这里Spring Boot的处理基本上就完了, 接下来看看Netty里是咋实现的</p><h4 id="5-Netty相关"><a href="#5-Netty相关" class="headerlink" title="5. Netty相关"></a>5. Netty相关</h4><p>首先是启动Netty服务的代码, 很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup bossGroup;</span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup workerGroup;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;Netty Server starting...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">            EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.DEBUG))</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                            ChannelPipeline p = ch.pipeline();</span><br><span class="line">                            p.addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">8081</span>;</span><br><span class="line">            <span class="keyword">if</span> (NettyConfig.getPORT() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                port = NettyConfig.getPORT().getValue();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            b.bind(<span class="string">&quot;localhost&quot;</span>, port).sync();</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;Netty Server listening at:&#123;&#125;&quot;</span>, port);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.bossGroup = bossGroup;</span><br><span class="line">            <span class="keyword">this</span>.workerGroup = workerGroup;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        bossGroup.shutdownGracefully();</span><br><span class="line">        workerGroup.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里省略了使用<code>application.properties</code>配置Netty的部分, 有兴趣可以去看看源码. 而且目前也只是抽象出来<code>ChannelOption</code>部分, 后期还可以添加其他的配置参数.</p><p>服务启动起来了就要看看消息是如何收发的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PACKAGE_SIZE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in.readableBytes() &lt; MIN_PACKAGE_SIZE) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.markReaderIndex();</span><br><span class="line">        <span class="keyword">int</span> messageSize = in.readByte();</span><br><span class="line">        <span class="keyword">int</span> type = in.readByte();</span><br><span class="line">        <span class="keyword">int</span> readableBytes = in.readableBytes();</span><br><span class="line">        <span class="keyword">if</span> (readableBytes &lt; messageSize) &#123;</span><br><span class="line">            in.resetReaderIndex();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MessageType messageType = MessageType.get(type);</span><br><span class="line">        ByteBuf messageByteBuf = in.readBytes(messageSize);</span><br><span class="line">        <span class="keyword">byte</span>[] messageBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[messageSize];</span><br><span class="line">        messageByteBuf.getBytes(<span class="number">0</span>, messageBytes);</span><br><span class="line">        CommandDispatcher.dispatch(ctx, messageType, messageBytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个思路也很简单就看当前可读byte是否够, 够的话就读取, 不够就返回, 等待byte攒够了再处理.</p><p>读取完message后就调用CommandDispatcher进行消息派发.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">public class CommandDispatcher &#123;</span><br><span class="line"></span><br><span class="line">    public static void dispatch(ChannelHandlerContext ctx, MessageType messageType, byte[] messageBytes) &#123;</span><br><span class="line">        MethodInfo methodInfo = CommandMethodCache.getMethodInfo(String.valueOf(messageType.getType()));</span><br><span class="line"></span><br><span class="line">        List&lt;ParameterInfo&gt; parameterInfoList = methodInfo.getParameterInfoList();</span><br><span class="line">        Class targetBeanClass = methodInfo.getTargetBeanClass();</span><br><span class="line">        Method targetMethod = methodInfo.getTargetMethod();</span><br><span class="line"></span><br><span class="line">        // 生成调用方法参数</span><br><span class="line">        List paramters = getParameters(ctx, messageType, messageBytes, parameterInfoList);</span><br><span class="line">        // 调用方法</span><br><span class="line">        Object result = invoke(targetBeanClass, targetMethod, paramters);</span><br><span class="line">        // 调用方法后可能产生应答, 将应答返回给前端</span><br><span class="line">        response(ctx, messageType, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static List getParameters(ChannelHandlerContext ctx, MessageType messageType, byte[] messageBytes, List&lt;ParameterInfo&gt; parameterInfoList) &#123;</span><br><span class="line">        List paramters = new ArrayList();</span><br><span class="line">        for (ParameterInfo parameterInfo : parameterInfoList) &#123;</span><br><span class="line">            switch (messageType) &#123;</span><br><span class="line">                case PROTOBUF: &#123;</span><br><span class="line">                    if (parameterInfo.getParser() != null) &#123;</span><br><span class="line">                        addProtobugParam(messageBytes, paramters, parameterInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                default:</span><br><span class="line">                    throw new IllegalStateException(&quot;Unexpected value: &quot; + messageType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return paramters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void addProtobugParam(byte[] messageBytes, List paramters, ParameterInfo parameterInfo) &#123;</span><br><span class="line">        Parser parser = parameterInfo.getParser();</span><br><span class="line">        paramters.add(parser.parseFrom(messageBytes));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private static Object invoke(Class targetBeanClass, Method targetMethod, List paramters) &#123;</span><br><span class="line">        Object result = null;</span><br><span class="line">        Object methodBean = SpringContext.getBean(targetBeanClass);</span><br><span class="line">        if (paramters.size() &gt; 0) &#123;</span><br><span class="line">            Object[] params = paramters.toArray();</span><br><span class="line">            result = targetMethod.invoke(methodBean, params);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            result = targetMethod.invoke(methodBean);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    private static void response(ChannelHandlerContext ctx, MessageType messageType, Object result) &#123;</span><br><span class="line"></span><br><span class="line">        if (GeneratedMessageV3.class.isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">            GeneratedMessageV3 generatedMessage = (GeneratedMessageV3) result;</span><br><span class="line">            byte[] bytearray = generatedMessage.toByteArray();</span><br><span class="line">            ByteBuf response = ByteBufAllocator.DEFAULT.heapBuffer(bytearray.length)</span><br><span class="line">                    .writeByte(bytearray.length)</span><br><span class="line">                    .writeByte(MessageType.PROTOBUF.getType())</span><br><span class="line">                    .writeBytes(bytearray);</span><br><span class="line">            ctx.writeAndFlush(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>又是一段比较核心的代码, 而且也比较长, 但是思路也是比较简单的—-</p><ol><li>根据消息号拿到我们是上一步缓存的方法和Paser, 进行参数生成. </li><li>拿到生成好的参数之后, 进行方法调用</li><li>判断方法返回值是否需要回写到客户端, 目前是只有protobuf类型的返回值才会回写到客户端</li></ol><p>嗯, 到这里基本上整个逻辑就写完了, 说起来比较简单, 但是在方法转发这一块还是费了点力气 不过还好, 总算是周末的时光没有白过, 整完了.</p><p>整个工程还有一些待优化的点, 比如对于UDP的支持, 后期有时间把这里整理一下..<br>编辑于 2022-02-18 14:57<br>Java 框架<br>Netty<br>Spring Boot<br>评论千万条，友善第一条</p><p>17 条评论<br>默认<br>时间<br>暗香浮动月黄昏<br>暗香浮动月黄昏</p><p>新手提问，请问您用springboot集成的这个netty，可以用来做什么，或者说可以实现什么功能呢<br>2021-03-23<br>· 作者回复了<br>代号One<br>代号One<br>作者<br>比如说在推送服务中心使用<br>02-11<br>金浩彬<br>金浩彬</p><p>大佬求教<br>2021-02-25<br>· 作者回复了<br>代号One<br>代号One<br>作者<br>?<br>2021-08-26<br>maodun<br>maodun</p><p>netty做成starter感觉不太实用。<br>2020-08-04<br>非鬼亦非仙<br>非鬼亦非仙</p><p>有一个疑问，这样整合Netty服务的性能，是否受制于springboot内置的容器Tomcat，如果受制，把Netty整合到springboot启动中，是不是本末倒置？<br>2020-03-07<br>· 作者回复了<br>代号One<br>代号One<br>作者<br>非鬼亦非仙</p><p>springframework核心是个对象容器, 提供IOC, DI等特性, 然后在这个基础之上扩展了AOP, Web, Jpa等其他特性.</p><p>用springboot举个例子, 比如我们有一个很简单的springboot项目, 当运行 SpringApplication.run(XXX.class) 的时候SpringApplication内部会调用createApplicationContext(), 创建出ConfigurableApplicationContext(具体类型是AnnotationConfigServletWebServerApplicationContext). 然后继续调用AbstractApplicationContext的refresh()方法进行spring容器的初始化, 在初始化过程中就会进行IOD, AOP, Web等等功能的实现.</p><p>在AbstractApplicationContext#refresh()中调用onRefresh()方法, ServletWebServerApplicationContext对这个方法重写了, 会调用 createWebServer() , 在这个方法中创建一个Tomcat服务器.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="开源" scheme="https://wangmingco.github.io/categories/%E5%BC%80%E6%BA%90/"/>
    
    
  </entry>
  
  <entry>
    <title>Java String intern() 实现细节</title>
    <link href="https://wangmingco.github.io/2019/07/03/Java/javase/Java%20String%20intern%20%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <id>https://wangmingco.github.io/2019/07/03/Java/javase/Java%20String%20intern%20%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/</id>
    <published>2019-07-02T16:00:00.000Z</published>
    <updated>2022-07-04T01:56:26.175Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/72054668">Java String intern() 实现细节</a></p></blockquote><p>在Java String这个类中有个intern()方法, 该方法是用来将String内部的char数组缓存到JVM内部的字符串常量池中去, 使用方法及方法声明如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String c = <span class="keyword">new</span> String(<span class="string">&quot;123&quot;</span>).intern();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">intern</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>我们看到intern() 方法是个native方法.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/jdk/src/share/native/java/lang/String.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;jvm.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;java_lang_String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jobject JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_java_lang_String_intern</span><span class="params">(JNIEnv *env, jobject <span class="keyword">this</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JVM_InternString</span>(env, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Java_java_lang_String_intern</code> 实现非常简单, 就是直接调用 <code>JVM_InternString()</code> 方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/hotspot/src/share/vm/prims/jvm.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JVM_ENTRY</span>(jstring, <span class="built_in">JVM_InternString</span>(JNIEnv *env, jstring str))</span><br><span class="line">  <span class="built_in">JVMWrapper</span>(<span class="string">&quot;JVM_InternString&quot;</span>);</span><br><span class="line">  JvmtiVMObjectAllocEventCollector oam;</span><br><span class="line">  <span class="keyword">if</span> (str == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  oop string = JNIHandles::<span class="built_in">resolve_non_null</span>(str);</span><br><span class="line">  oop result = StringTable::<span class="built_in">intern</span>(string, CHECK_NULL);</span><br><span class="line">  <span class="keyword">return</span> (jstring) JNIHandles::<span class="built_in">make_local</span>(env, result);</span><br><span class="line">JVM_END</span><br></pre></td></tr></table></figure><p>首先将<code>jstring</code>类型解析成oop类型的字符串, 接着调用<code>StringTable</code>的<code>intern()</code>.</p><p><code>StringTable</code>定义在了<code>symbolTable.hpp</code>文件中, 下来看一下intern()方法的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/hotspot/src/share/vm/classfile/symbolTable.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function">oop <span class="title">StringTable::intern</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* utf8_string, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (utf8_string == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="function">ResourceMark <span class="title">rm</span><span class="params">(THREAD)</span></span>;</span><br><span class="line">  <span class="keyword">int</span> length = UTF8::<span class="built_in">unicode_length</span>(utf8_string);</span><br><span class="line">  jchar* chars = <span class="built_in">NEW_RESOURCE_ARRAY</span>(jchar, length);</span><br><span class="line">  UTF8::<span class="built_in">convert_to_unicode</span>(utf8_string, chars, length);</span><br><span class="line">  Handle string;</span><br><span class="line">  oop result = <span class="built_in">intern</span>(string, chars, length, CHECK_NULL);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一步<code>intern()</code>方法中, 首先将字符数组转化为unicode编码, 然后接着调用下面的intern()方法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">oop <span class="title">StringTable::intern</span><span class="params">(Handle string_or_null, jchar* name,</span></span></span><br><span class="line"><span class="params"><span class="function">                        <span class="keyword">int</span> len, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> hashValue = <span class="built_in">hash_string</span>(name, len);</span><br><span class="line">  <span class="keyword">int</span> index = <span class="built_in">the_table</span>()-&gt;<span class="built_in">hash_to_index</span>(hashValue);</span><br><span class="line">  oop found_string = <span class="built_in">the_table</span>()-&gt;<span class="built_in">lookup</span>(index, name, len, hashValue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Found</span></span><br><span class="line">  <span class="keyword">if</span> (found_string != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="built_in">ensure_string_alive</span>(found_string);</span><br><span class="line">    <span class="keyword">return</span> found_string;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 此处代码省略</span></span><br><span class="line"></span><br><span class="line">  Handle string;</span><br><span class="line">  <span class="comment">// try to reuse the string if possible</span></span><br><span class="line">  <span class="keyword">if</span> (!string_or_null.<span class="built_in">is_null</span>()) &#123;</span><br><span class="line">    string = string_or_null;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    string = java_lang_String::<span class="built_in">create_from_unicode</span>(name, len, CHECK_NULL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... 此处代码省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Grab the StringTable_lock before getting the_table() because it could</span></span><br><span class="line">  <span class="comment">// change at safepoint.</span></span><br><span class="line">  oop added_or_found;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">MutexLocker <span class="title">ml</span><span class="params">(StringTable_lock, THREAD)</span></span>;</span><br><span class="line">    <span class="comment">// Otherwise, add to symbol to table</span></span><br><span class="line">    added_or_found = <span class="built_in">the_table</span>()-&gt;<span class="built_in">basic_add</span>(index, string, name, len,</span><br><span class="line">                                  hashValue, CHECK_NULL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">ensure_string_alive</span>(added_or_found);</span><br><span class="line">  <span class="keyword">return</span> added_or_found;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> StringTable* <span class="title">the_table</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _the_table; &#125;</span><br><span class="line"></span><br><span class="line">StringTable* StringTable::_the_table = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>在上面的逻辑中我们可以看到, 首先是通过<code>the_table()</code>方法找到<code>StringTable</code>, 然后调用<code>lookup()</code>方法, 进行查找, 如果找到的话则直接返回找到的引用.如果找不到的话则调用<code>StringTable#basic_add()</code>方法将其添加. 添加完之后返回其引用地址.</p><p>StringTable的定义如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringTable</span> :</span> <span class="keyword">public</span> RehashableHashtable&lt;oop, mtSymbol&gt; &#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="comment">// The string table</span></span><br><span class="line">  <span class="keyword">static</span> StringTable* _the_table;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">intern</span><span class="params">(Handle string_or_null, jchar* chars, <span class="keyword">int</span> length, TRAPS)</span></span>;</span><br><span class="line">  <span class="function">oop <span class="title">basic_add</span><span class="params">(<span class="keyword">int</span> index, Handle string_or_null, jchar* name, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="keyword">unsigned</span> <span class="keyword">int</span> hashValue, TRAPS)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">oop <span class="title">lookup</span><span class="params">(<span class="keyword">int</span> index, jchar* chars, <span class="keyword">int</span> length, <span class="keyword">unsigned</span> <span class="keyword">int</span> hashValue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// The string table</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> StringTable* <span class="title">the_table</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _the_table; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create_table</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(_the_table == <span class="literal">NULL</span>, <span class="string">&quot;One string table allowed.&quot;</span>);</span><br><span class="line">    _the_table = <span class="keyword">new</span> <span class="built_in">StringTable</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// GC support</span></span><br><span class="line">  <span class="comment">//   Delete pointers to otherwise-unreachable objects.</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unlink</span><span class="params">(BoolObjectClosure* cl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> processed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> removed = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">unlink_or_oops_do</span>(cl, <span class="literal">NULL</span>, &amp;processed, &amp;removed);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Probing</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">lookup</span><span class="params">(Symbol* symbol)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">lookup</span><span class="params">(jchar* chars, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Interning</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">intern</span><span class="params">(Symbol* symbol, TRAPS)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">intern</span><span class="params">(oop string, TRAPS)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> oop <span class="title">intern</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *utf8_string, TRAPS)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Rehash the symbol table if it gets out of balance</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rehash_table</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">needs_rehashing</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> _needs_rehashing; &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// SHARE_VM_CLASSFILE_SYMBOLTABLE_HPP</span></span></span><br></pre></td></tr></table></figure><p>我将一些常见的方法保留了下来, 我们看到<code>StringTable</code>继承自<code>RehashableHashtable</code>. 数据的存储其实还是存储在<code>RehashableHashtable</code>中.</p><p>需要注意的是<code>StringTable</code>内部的<code>_the_table</code>实例及其创建过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> StringTable* _the_table;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">create_table</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(_the_table == <span class="literal">NULL</span>, <span class="string">&quot;One string table allowed.&quot;</span>);</span><br><span class="line">    _the_table = <span class="keyword">new</span> <span class="built_in">StringTable</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>StringTable</code>最终是通过自身的一个静态属性持有.</p><p><code>create_table()</code>是在<code>universe.cpp</code>文件的<code>universe_init()</code>进行调用的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/hotspot/src/share/vm/memory/universe.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function">jint <span class="title">universe_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="comment">// ... 忽略部分代码</span></span><br><span class="line">  JavaClasses::<span class="built_in">compute_hard_coded_offsets</span>();</span><br><span class="line"></span><br><span class="line">  jint status = Universe::<span class="built_in">initialize_heap</span>();</span><br><span class="line">  <span class="keyword">if</span> (status != JNI_OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Metaspace::<span class="built_in">global_initialize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create memory for metadata.  Must be after initializing heap for</span></span><br><span class="line">  <span class="comment">// DumpSharedSpaces.</span></span><br><span class="line">  ClassLoaderData::<span class="built_in">init_null_class_loader_data</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 忽略部分代码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (UseSharedSpaces) &#123;</span><br><span class="line">    <span class="comment">// Read the data structures supporting the shared spaces (shared</span></span><br><span class="line">    <span class="comment">// system dictionary, symbol table, etc.).  After that, access to</span></span><br><span class="line">    <span class="comment">// the file (other than the mapped regions) is no longer needed, and</span></span><br><span class="line">    <span class="comment">// the file is closed. Closing the file does not affect the</span></span><br><span class="line">    <span class="comment">// currently mapped regions.</span></span><br><span class="line">    MetaspaceShared::<span class="built_in">initialize_shared_spaces</span>();</span><br><span class="line">    StringTable::<span class="built_in">create_table</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    SymbolTable::<span class="built_in">create_table</span>();</span><br><span class="line">    StringTable::<span class="built_in">create_table</span>();</span><br><span class="line">    ClassLoader::<span class="built_in">create_package_info_table</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (DumpSharedSpaces) &#123;</span><br><span class="line">      MetaspaceShared::<span class="built_in">prepare_for_dumping</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> JNI_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完<code>StringTable</code>之后, 就可以直接通过<code>StringTable</code>的静态方法对其进行操作了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="JavaSE" scheme="https://wangmingco.github.io/tags/JavaSE/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO原理剖析之 磁盘IO</title>
    <link href="https://wangmingco.github.io/2019/05/28/Java/io/Java%20NIO%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%A3%81%E7%9B%98IO/"/>
    <id>https://wangmingco.github.io/2019/05/28/Java/io/Java%20NIO%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%A3%81%E7%9B%98IO/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2022-07-04T03:00:39.419Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p>网络上有很多写NIO的文章, 但是大多讲的网络那一块, 我想像前俩次那样先从磁盘IO讲起, 然后慢慢过渡到网络IO, 再慢慢地进入socket, epoll, 能有这样一个循序渐进的过程.</p><p>仍然从一个读文件的小demo程序开始入手分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;./10bytes.txt&quot;</span>);</span><br><span class="line">FileChannel channel = inputStream.getChannel();</span><br><span class="line">                <span class="comment">// 分配一个10byte的ByteBuffer.</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">channel.read(byteBuffer);</span><br><span class="line">                <span class="comment">// TODO close</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下getChannel()实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> FileChannel <span class="title">getChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (channel == <span class="keyword">null</span>) &#123;</span><br><span class="line">             channel = FileChannelImpl.open(fd, path, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">this</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> channel;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>getChannel()</code>的源码很简单, 就是直接生成了一个<code>FileChannelImpl</code>实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在openjdk-jdk8u-jdk8u/jdk/src/share/classes/sun/nio/ch/FileChannelImpl.java</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// Used by FileInputStream.getChannel() and RandomAccessFile.getChannel()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileChannel <span class="title">open</span><span class="params">(FileDescriptor fd, String path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   boolean readable, boolean writable,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   Object parent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">FileChannelImpl</span>(fd, path, readable, writable, <span class="literal">false</span>, parent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/nio1.jpg"></p><p>通过上面的UML类图, 可以看到FileChannel主要是定义了一些抽象方法, 真正的读写实现是在FileChannelImpl中实现的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在openjdk-jdk8u-jdk8u/jdk/src/share/classes/sun/nio/ch/FileChannelImpl.java</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(ByteBuffer dst)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="built_in">ensureOpen</span>();</span><br><span class="line">        <span class="keyword">if</span> (!readable)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">NonReadableChannelException</span>();</span><br><span class="line">        <span class="built_in">synchronized</span> (positionLock) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> ti = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">begin</span>();</span><br><span class="line">                ti = threads.<span class="built_in">add</span>();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">isOpen</span>())</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    n = IOUtil.<span class="built_in">read</span>(fd, dst, <span class="number">-1</span>, nd);</span><br><span class="line">                &#125; <span class="keyword">while</span> ((n == IOStatus.INTERRUPTED) &amp;&amp; <span class="built_in">isOpen</span>());</span><br><span class="line">                <span class="keyword">return</span> IOStatus.<span class="built_in">normalize</span>(n);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                threads.<span class="built_in">remove</span>(ti);</span><br><span class="line">                <span class="built_in">end</span>(n &gt; <span class="number">0</span>);</span><br><span class="line">                assert IOStatus.<span class="built_in">check</span>(n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到真正的IO逻辑调用是 <code>IOUtil.read(fd, dst,-1, nd)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在 openjdk-jdk8u-jdk8u/jdk/src/share/classes/sun/nio/ch/IOUtil.java</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(FileDescriptor fd, ByteBuffer dst, <span class="keyword">long</span> position,</span></span></span><br><span class="line"><span class="params"><span class="function">                    NativeDispatcher nd)</span></span></span><br><span class="line"><span class="function">        throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dst.<span class="built_in">isReadOnly</span>())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalArgumentException</span>(<span class="string">&quot;Read-only buffer&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dst instanceof DirectBuffer)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">readIntoNativeBuffer</span>(fd, dst, position, nd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 申请一个临时的DirectBuffer</span></span><br><span class="line">        ByteBuffer bb = Util.<span class="built_in">getTemporaryDirectBuffer</span>(dst.<span class="built_in">remaining</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> n = <span class="built_in">readIntoNativeBuffer</span>(fd, bb, position, nd);</span><br><span class="line">            bb.<span class="built_in">flip</span>();</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">                dst.<span class="built_in">put</span>(bb);</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Util.<span class="built_in">offerFirstTemporaryDirectBuffer</span>(bb);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码可以清楚的看到整个读操作流程:</p><ol><li>如果<code>ByteBuffer</code>是<code>DirectBuffer</code>类型的, 则直接调用<code>readIntoNativeBuffer()</code>函数, 将数据读入进dst里面去</li><li>如果<code>ByteBuffer</code>不是<code>DirectBuffer</code>类型的, 则先申请一个临时的<code>DirectBuffer bb</code></li><li>然后调用<code>readIntoNativeBuffer()</code>函数, 将数据读入到<code>bb</code>里面去</li><li>如果读取到的数量大于0, 则将临时<code>DirectBuffer</code>里的数据拷贝到目标<code>ByteBuffer dst</code>里面去</li><li>最后将<code>DirectBuffer</code>释放掉或者放入一个buffer cache中</li></ol><p>第二步为什么要申请一个临时的directbuffer呢？因为directbuffer不会受到gc的直接管理。如果我们直接使用heapbuffer，当gc的时候会对heapbuffer里面的内容进行移动。</p><p><code>Util.getTemporaryDirectBuffer()</code> 和<code>offerFirstTemporaryDirectBuffer()</code>方法实现如下, 逻辑很简单, 就不解释了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">getTemporaryDirectBuffer</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isBufferTooLarge(size)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ByteBuffer.allocateDirect(size);</span><br><span class="line">    &#125;</span><br><span class="line">    BufferCache cache = bufferCache.get();</span><br><span class="line">    ByteBuffer buf = cache.get(size);</span><br><span class="line">    <span class="keyword">if</span> (buf != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> buf;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// No suitable buffer in the cache so we need to allocate a new</span></span><br><span class="line">        <span class="comment">// one. To avoid the cache growing then we remove the first</span></span><br><span class="line">        <span class="comment">// buffer from the cache and free it.</span></span><br><span class="line">        <span class="keyword">if</span> (!cache.isEmpty()) &#123;</span><br><span class="line">            buf = cache.removeFirst();</span><br><span class="line">            free(buf);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ByteBuffer.allocateDirect(size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">offerFirstTemporaryDirectBuffer</span><span class="params">(ByteBuffer buf)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// If the buffer is too large for the cache we don&#x27;t have to</span></span><br><span class="line">        <span class="comment">// check the cache. We&#x27;ll just free it.</span></span><br><span class="line">        <span class="keyword">if</span> (isBufferTooLarge(buf)) &#123;</span><br><span class="line">            free(buf);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> buf != <span class="keyword">null</span>;</span><br><span class="line">        BufferCache cache = bufferCache.get();</span><br><span class="line">        <span class="keyword">if</span> (!cache.offerFirst(buf)) &#123;</span><br><span class="line">            <span class="comment">// cache is full</span></span><br><span class="line">            free(buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下来看一下<code>readIntoNativeBuffer()</code> 这个方法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readIntoNativeBuffer</span><span class="params">(FileDescriptor fd, ByteBuffer bb,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            <span class="keyword">long</span> position, NativeDispatcher nd)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pos = bb.position();</span><br><span class="line">        <span class="keyword">int</span> lim = bb.limit();</span><br><span class="line">        <span class="keyword">assert</span> (pos &lt;= lim);</span><br><span class="line">        <span class="keyword">int</span> rem = (pos &lt;= lim ? lim - pos : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rem == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (position != -<span class="number">1</span>) &#123;</span><br><span class="line">            n = nd.pread(fd, ((DirectBuffer)bb).address() + pos,</span><br><span class="line">                         rem, position);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n = nd.read(fd, ((DirectBuffer)bb).address() + pos, rem);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">            bb.position(pos + n);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看到最终是通过调用<code>NativeDispatcher</code>的<code>read</code>相关方法实现的读操作.</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/nio2.jpg"></p><p>因为我们是在分析文件IO, 因此直接看一下<code>FileDispatcherImpl</code>的实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/jdk/src/solaris/classes/sun/nio/ch/FileDispatcherImpl.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileDispatcherImpl</span> <span class="title">extends</span> <span class="title">FileDispatcher</span> &#123;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">read0</span>(fd, address, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pread</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len, <span class="keyword">long</span> position)</span></span></span><br><span class="line"><span class="function">        throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pread0</span>(fd, address, len, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">readv</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">readv0</span>(fd, address, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span> throws IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">write0</span>(fd, address, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pwrite</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len, <span class="keyword">long</span> position)</span></span></span><br><span class="line"><span class="function">        throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">pwrite0</span>(fd, address, len, position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">writev</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        throws IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">writev0</span>(fd, address, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// -- Native methods --</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">int</span> <span class="title">read0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        throws IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">int</span> <span class="title">pread0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">long</span> position)</span> throws IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">long</span> <span class="title">readv0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        throws IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">int</span> <span class="title">write0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        throws IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">int</span> <span class="title">pwrite0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="params"><span class="function">                             <span class="keyword">long</span> position)</span> throws IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> native <span class="keyword">long</span> <span class="title">writev0</span><span class="params">(FileDescriptor fd, <span class="keyword">long</span> address, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        throws IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileDispatcherImpl</code>中定义了大量的native方法, 相关的实现还是在native方法中.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u_vscode/jdk/src/solaris/native/sun/nio/ch/FileDispatcherImpl.c</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_sun_nio_ch_FileDispatcherImpl_read0</span><span class="params">(JNIEnv *env, jclass clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">                             jobject fdo, jlong address, jint len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jint fd = <span class="built_in">fdval</span>(env, fdo);</span><br><span class="line">    <span class="keyword">void</span> *buf = (<span class="keyword">void</span> *)<span class="built_in">jlong_to_ptr</span>(address);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">convertReturnVal</span>(env, <span class="built_in">read</span>(fd, buf, len), JNI_TRUE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过和 nd.read(fd,((DirectBuffer)bb).address()+ pos, rem); 这一段程序对比可以得到</p><ol><li><code>fdo</code> 就是 <code>FileDescriptor fd</code></li><li><code>address</code> 就是 <code>((DirectBuffer)bb).address()+ pos</code></li><li><code>len</code> 就是<code>rem</code>, <code>(pos &lt;= lim ? lim - pos :0);</code></li></ol><p><code>read(fd, buf, len)</code> 这段程序就是将剩余的len长度的数据读取进<code>DirectBuffer</code>的剩余的空间中.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openjdk-jdk8u-jdk8u/jdk/src/windows/native/sun/nio/ch/IOUtil.c</span></span><br><span class="line"></span><br><span class="line"><span class="function">jint</span></span><br><span class="line"><span class="function"><span class="title">convertReturnVal</span><span class="params">(JNIEnv *env, jint n, jboolean reading)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>) <span class="comment">/* Number of bytes written */</span></span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (reading) &#123;</span><br><span class="line">            <span class="keyword">return</span> IOS_EOF; <span class="comment">/* EOF is -1 in javaland */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">JNU_ThrowIOExceptionWithLastError</span>(env, <span class="string">&quot;Read/write failed&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> IOS_THROWN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子, 我们可以看出, 在NIO读的时候, 我们应该直接分配一个<code>DirectBytebuffer</code>,而不是分配一个<code>HeapByteBuffer</code>, 那样一来就可以减少一次内存拷贝。</p><hr><p>预告一点东西, <code>FileChannel</code> 并不能像<code>SocketChannel</code>一样可以设置成非阻塞模式, 其实是 <code>SelectableChannel</code> 接口中定义了 <code>configureBlocking()</code> 方法</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/nio3.jpg"></p><hr><p>在刚开始的read方法中有如下一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      begin();</span><br><span class="line">      ti = threads.add();</span><br><span class="line">      <span class="keyword">if</span> (!isOpen())</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">          n = IOUtil.read(fd, dst, -<span class="number">1</span>, nd);</span><br><span class="line">      &#125; <span class="keyword">while</span> ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen());</span><br><span class="line">      <span class="keyword">return</span> IOStatus.normalize(n);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      threads.remove(ti);</span><br><span class="line">      end(n &gt; <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">assert</span> IOStatus.check(n);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>begin();</code> 和 <code>end(n &gt;0);</code> 这俩段代码参考</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;网络上有很多写N</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java IO" scheme="https://wangmingco.github.io/tags/Java-IO/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO 原理剖析之 网络 IO</title>
    <link href="https://wangmingco.github.io/2019/05/27/Java/io/JavaIO%20%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%BD%91%E7%BB%9C%20IO/"/>
    <id>https://wangmingco.github.io/2019/05/27/Java/io/JavaIO%20%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%BD%91%E7%BB%9C%20IO/</id>
    <published>2019-05-26T16:00:00.000Z</published>
    <updated>2022-07-04T02:51:15.703Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/62166017">JavaIO 原理剖析之 网络 IO</a></p></blockquote><p>上篇文章介绍了下磁盘IO的原理, 今天介绍一下网络IO的原理, 但是今天只会介绍IO部分, Socket部分会在后续文章中介绍.</p><p>还是从一个简单的demo开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">socket.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9000</span>));</span><br><span class="line"></span><br><span class="line">InputStream in = socket.getInputStream();</span><br><span class="line">OutputStream out = socket.getOutputStream();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在demo中, 我们new了一个socket实例, 然后用这个实例去连接本地9000端口的socket服务.然后分别拿到了一个输入流和一个输出流.</p><h3 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h3><p>我们看一下获取InputStream的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在Socket类中, 有如下定义:</span></span><br><span class="line"></span><br><span class="line">SocketImpl impl;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isClosed())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Socket is closed&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!isConnected())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Socket is not connected&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (isInputShutdown())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Socket input is shutdown&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Socket s = <span class="keyword">this</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> PrivilegedExceptionAction&lt;InputStream&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> InputStream <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> impl.getInputStream();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.security.PrivilegedActionException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) e.getException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> is;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Socket内部封装了一个SocketImpl实例, 最终通过该实例获取InputStream的. 下面是SocketImpl的继承结构(关于这个socket实现后面会有文章详细讲解).</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/io3.jpg"></p><p>而最终的实现是在AbstractPlainSocketImpl中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AbstractPlainSocketImpl </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (fdLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isClosedOrPending())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Socket Closed&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (shut_rd)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Socket input is shutdown&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (socketInputStream == <span class="keyword">null</span>)</span><br><span class="line">                socketInputStream = <span class="keyword">new</span> SocketInputStream(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> socketInputStream;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在这里可以看到, 如果第一次stream为空的话, 则直接<code>new SocketInputStream().</code></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/io4.jpg"></p><p>真正的的读写操作也就是在<code>SocketInputStream</code>里.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SocketInputStream</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> length, <span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// EOF already encountered</span></span><br><span class="line">        <span class="keyword">if</span> (eof) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// connection reset</span></span><br><span class="line">        <span class="keyword">if</span> (impl.isConnectionReset()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Connection reset&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bounds check</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || off &lt; <span class="number">0</span> || length &gt; b.length - off) &#123;</span><br><span class="line">            <span class="keyword">if</span> (length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;length == &quot;</span> + length</span><br><span class="line">                    + <span class="string">&quot; off == &quot;</span> + off + <span class="string">&quot; buffer length == &quot;</span> + b.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> gotReset = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// acquire file descriptor and do the read</span></span><br><span class="line">        FileDescriptor fd = impl.acquireFD();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            n = socketRead(fd, b, off, length, timeout);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConnectionResetException rstExc) &#123;</span><br><span class="line">            gotReset = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            impl.releaseFD();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * We receive a &quot;connection reset&quot; but there may be bytes still</span></span><br><span class="line"><span class="comment">         * buffered on the socket</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (gotReset) &#123;</span><br><span class="line">            impl.setConnectionResetPending();</span><br><span class="line">            impl.acquireFD();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = socketRead(fd, b, off, length, timeout);</span><br><span class="line">                <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> n;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ConnectionResetException rstExc) &#123;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                impl.releaseFD();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If we get here we are at EOF, the socket has been closed,</span></span><br><span class="line"><span class="comment">         * or the connection has been reset.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (impl.isClosedOrPending()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (impl.isConnectionResetPending()) &#123;</span><br><span class="line">            impl.setConnectionReset();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (impl.isConnectionReset()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Connection reset&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        eof = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">socketRead</span><span class="params">(FileDescriptor fd,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="params"><span class="function">                           <span class="keyword">int</span> timeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socketRead0(fd, b, off, len, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">socketRead0</span><span class="params">(FileDescriptor fd,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len,</span></span></span><br><span class="line"><span class="params"><span class="function">                                   <span class="keyword">int</span> timeout)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>在read过程中, 首先是是否达到文件流末尾, 长度是否符合等校验. 校验完成之后, 通过调用<code>socketRead();</code> 将socket缓冲区的数据读取进b中.</p><p>此时如果发生 <code>ConnectionResetException</code>异常, 对方可能是关闭了连接, 但是内和缓冲区中, 可能还会有数据没有读取完, 则后面再尝试读取一次, 将剩余的内容读取出来.</p><p><code>socketRead()</code>方法最终调用native方法 <code>socketRead0()</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u/jdk/src/solaris/native/java/net/SocketInputStream.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     java_net_SocketInputStream</span></span><br><span class="line"><span class="comment"> * Method:    socketRead0</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/io/FileDescriptor;[BIII)I</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_java_net_SocketInputStream_socketRead0</span><span class="params">(JNIEnv *env, jobject <span class="keyword">this</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            jobject fdObj, jbyteArray data,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            jint off, jint len, jint timeout)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> BUF[MAX_BUFFER_LEN];</span><br><span class="line">    <span class="keyword">char</span> *bufP;</span><br><span class="line">    jint fd, nread;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * If the read is greater than our stack allocated buffer then</span></span><br><span class="line"><span class="comment">     * we allocate from the heap (up to a limit)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; MAX_BUFFER_LEN) &#123;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; MAX_HEAP_BUFFER_LEN) &#123;</span><br><span class="line">            len = MAX_HEAP_BUFFER_LEN;</span><br><span class="line">        &#125;</span><br><span class="line">        bufP = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">size_t</span>)len);</span><br><span class="line">        <span class="keyword">if</span> (bufP == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            bufP = BUF;</span><br><span class="line">            len = MAX_BUFFER_LEN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bufP = BUF;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__solaris__)</span></span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        nread = <span class="built_in">NET_Timeout</span>(fd, timeout);</span><br><span class="line">        <span class="keyword">if</span> (nread &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nread == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">JNU_ThrowByName</span>(env, JNU_JAVANETPKG <span class="string">&quot;SocketTimeoutException&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;Read timed out&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nread == JVM_IO_ERR) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EBADF) &#123;</span><br><span class="line">                     <span class="built_in">JNU_ThrowByName</span>(env, JNU_JAVANETPKG <span class="string">&quot;SocketException&quot;</span>, <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> <span class="keyword">if</span> (errno == ENOMEM) &#123;</span><br><span class="line">                     <span class="built_in">JNU_ThrowOutOfMemoryError</span>(env, <span class="string">&quot;NET_Timeout native heap allocation failed&quot;</span>);</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="built_in">NET_ThrowByNameWithLastError</span>(env, JNU_JAVANETPKG <span class="string">&quot;SocketException&quot;</span>,</span><br><span class="line">                                                  <span class="string">&quot;select/poll failed&quot;</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nread == JVM_IO_INTR) &#123;</span><br><span class="line">                <span class="built_in">JNU_ThrowByName</span>(env, JNU_JAVAIOPKG <span class="string">&quot;InterruptedIOException&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;Operation interrupted&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufP != BUF) &#123;</span><br><span class="line">                <span class="built_in">free</span>(bufP);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nread = <span class="built_in">NET_Read</span>(fd, bufP, len);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">        nread = <span class="built_in">NET_ReadWithTimeout</span>(env, fd, bufP, len, timeout);</span><br><span class="line">        <span class="keyword">if</span> ((*env)-&gt;<span class="built_in">ExceptionCheck</span>(env)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bufP != BUF) &#123;</span><br><span class="line">                <span class="built_in">free</span>(bufP);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nread;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nread = <span class="built_in">NET_Read</span>(fd, bufP, len);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span> (nread &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nread &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in"><span class="keyword">switch</span></span> (errno) &#123;</span><br><span class="line">                <span class="keyword">case</span> ECONNRESET:</span><br><span class="line">                <span class="keyword">case</span> EPIPE:</span><br><span class="line">                    <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;sun/net/ConnectionResetException&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Connection reset&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> EBADF:</span><br><span class="line">                    <span class="built_in">JNU_ThrowByName</span>(env, JNU_JAVANETPKG <span class="string">&quot;SocketException&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> EINTR:</span><br><span class="line">                     <span class="built_in">JNU_ThrowByName</span>(env, JNU_JAVAIOPKG <span class="string">&quot;InterruptedIOException&quot;</span>,</span><br><span class="line">                           <span class="string">&quot;Operation interrupted&quot;</span>);</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="built_in">NET_ThrowByNameWithLastError</span>(env,</span><br><span class="line">                        JNU_JAVANETPKG <span class="string">&quot;SocketException&quot;</span>, <span class="string">&quot;Read failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        (*env)-&gt;<span class="built_in">SetByteArrayRegion</span>(env, data, off, nread, (jbyte *)bufP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bufP != BUF) &#123;</span><br><span class="line">        <span class="built_in">free</span>(bufP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中我们可以看到三个</p><ol><li>首先分配一个<code>MAX_BUFFER_LEN</code>长度的BUF内存</li><li>如果要读取的数据长度小于<code>MAX_BUFFER_LEN</code>, 就用BUF内存进行读取, 否则就<code>malloc((size_t)len);</code>重新申请一块内存出来.</li><li>在solaris系统中(绝大多数实现都是solaris实现) 首先设置<code>NET_Timeout(fd, timeout)</code>, 设置一个读写超时时间, 这个timeout就是我们通过<code>SO_TIMEOUT</code> 设置的值.</li><li>接着调用<code>NET_Read(fd, bufP, len)</code> 将fd的内核socket读缓冲区的数据读入到<code>bufP</code>里.</li><li>接着调用<code>SetByteArrayRegion()</code>; 将c堆内存数据拷贝到jvm堆内存中(这个可以参考上一篇文章)</li><li>最后释放读缓存<code>bufP</code></li></ol><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>在<code>NET_Timeout()</code>函数中, 最终会返回<code>0(已经超时)</code>, <code>-1(socket关闭)</code>, 和触发事件数.</p><ul><li>如果返回的是<code>0</code>, 则抛出 <code>SocketTimeoutException</code>异常, 错误信息为: <code>Read timed out</code></li><li>如果返回的是<code>-1(JVM_IO_ERR)</code>, 再跟进不同的errno进行处理.</li></ul><p>TODO:</p><ul><li><code>EBADF</code>: 抛出<code>SocketException, Socket closed.</code></li><li><code>ENOMEM</code>: 抛出<code>OutOfMemoryError, NET_Timeout native heap allocation failed</code>.</li><li><code>EINTR</code>: 抛出<code>SocketException, Read failed.</code></li></ul><h3 id="NET-Timeout"><a href="#NET-Timeout" class="headerlink" title="NET_Timeout"></a>NET_Timeout</h3><p><code>NET_Timeout(fd, timeout)</code>是如何实现的呢 ?</p><p>在<code>SocketInputStream.c</code> 中引入了<code>net_util.h</code> 头文件, 而在<code>net_util.h</code> 头文件中引入了<code>net_util_md.h</code>, 最终在<code>net_util_md.h</code>找到了<code>NET_Timeout(fd, timeout)</code>定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u/jdk/src/solaris/native/java/net/net_util_md.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NET_Timeout</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentTime = (timeout &gt; <span class="number">0</span>) ? <span class="built_in">NET_GetCurrentTime</span>() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NET_Timeout0</span>(s, timeout, currentTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u_vscode/jdk/src/solaris/native/java/net/linux_close.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Wrapper for poll(s, timeout).</span></span><br><span class="line"><span class="comment"> * Auto restarts with adjusted timeout if interrupted by</span></span><br><span class="line"><span class="comment"> * signal other than our wakeup signal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NET_Timeout0</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">long</span> timeout, <span class="keyword">long</span> currentTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> prevtime = currentTime, newtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">t</span>;</span></span><br><span class="line">    fdEntry_t *fdEntry = <span class="built_in">getFdEntry</span>(s);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Check that fd hasn&#x27;t been closed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (fdEntry == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        errno = EBADF;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">pfd</span>;</span></span><br><span class="line">        <span class="keyword">int</span> rv;</span><br><span class="line">        threadEntry_t self;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Poll the fd. If interrupted by our wakeup signal</span></span><br><span class="line"><span class="comment">         * errno will be set to EBADF.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pfd.fd = s;</span><br><span class="line">        pfd.events = POLLIN | POLLERR;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">startOp</span>(fdEntry, &amp;self);</span><br><span class="line">        rv = <span class="built_in">poll</span>(&amp;pfd, <span class="number">1</span>, timeout);</span><br><span class="line">        <span class="built_in">endOp</span>(fdEntry, &amp;self);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If interrupted then adjust timeout. If timeout</span></span><br><span class="line"><span class="comment">         * has expired return 0 (indicating timeout expired).</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (rv &lt; <span class="number">0</span> &amp;&amp; errno == EINTR) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">gettimeofday</span>(&amp;t, <span class="literal">NULL</span>);</span><br><span class="line">                newtime = t.tv_sec * <span class="number">1000</span>  +  t.tv_usec / <span class="number">1000</span>;</span><br><span class="line">                timeout -= newtime - prevtime;</span><br><span class="line">                <span class="keyword">if</span> (timeout &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prevtime = newtime;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到, 其实是通过poll这种方式来实现的timeout的.</p><p>在<code>pfd</code>上注册<code>POLLIN</code> 和 <code>POLLERR</code>这俩个事件, 一旦有这俩个事件触发或者超时, poll函数就会返回, 表示有可读事件或者有异常信息.</p><ul><li>如果从fd中获取不到<code>fdEntry</code>则说明fd被关闭了, socket被关闭了, 则返回-1;</li><li>接下来是循环中调用<code>poll()</code>系统调用.</li><li>如果rv小于0, 且<code>errno</code>等于<code>EINTR</code>, 则判断是否是真正超时, 否则返回触发是事件数, 同时在函数外针对不同的<code>errno</code>进行不同的处理.</li><li>在计算超时时间时, 如果设置的超时时间大于0的话, 才去计算超时时间, 超时时间如果小于等于0, 则返回0, 否则继续循环调用poll.</li></ul><p><code>NET_Timeout()</code>这个函数最终会返回<code>0(已经超时)</code>, <code>-1(socket关闭)</code>, 和<code>触发事件数</code>.</p><p>poll函数返回值(参考自百度百科)</p><blockquote><p> <code>&gt;0</code>：数组fds中准备好读、写或出错状态的那些socket描述符的总数量；<br> <code>==0</code>：数组fds中没有任何socket描述符准备好读、写，或出错；此时poll超时，超时时间是timeout毫秒；换句话说，如果所检测的socket描述符上没有任何事件发生的话，那么poll()函数会阻塞timeout所指定的毫秒时间长度之后返回，如果timeout==0，那么poll() 函数立即返回而不阻塞，如果timeout==INFTIM，那么poll() 函数会一直阻塞下去，直到所检测的socket描述符上的感兴趣的事件发生是才返回，如果感兴趣的事件永远不发生，那么poll()就会永远阻塞下去；<br><code>-1</code>： poll函数调用失败，同时会自动设置全局变量errno；</p></blockquote><p>errno(参考自C <a href="https://www.runoob.com/cprogramming/c-error-handling.html">错误处理</a>)</p><blockquote><p>C 语言不提供对错误处理的直接支持，但是作为一种系统编程语言，它以返回值的形式允许您访问底层数据。在发生错误时，大多数的 C 或 UNIX 函数调用返回 1 或 NULL，同时会设置一个错误代码 errno，该错误代码是全局变量，表示在函数调用期间发生了错误。您可以在 errno.h 头文件中找到各种各样的错误代码。<br>所以，C 程序员可以通过检查返回值，然后根据返回值决定采取哪种适当的动作。开发人员应该在程序初始化时，把 errno 设置为 0，这是一种良好的编程习惯。0 值表示程序中没有错误。</p></blockquote><h3 id="NET-Read"><a href="#NET-Read" class="headerlink" title="NET_Read"></a>NET_Read</h3><p>下面我们看一下<code>NET_Read(fd, bufP, len)</code>实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u/jdk/src/solaris/native/java/net/linux_close.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Macro to perform a blocking IO operation. Restarts</span></span><br><span class="line"><span class="comment"> * automatically if interrupted by signal (other than</span></span><br><span class="line"><span class="comment"> * our wakeup signal)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCKING_IO_RETURN_INT(FD, FUNC) &#123;      \</span></span><br><span class="line"><span class="meta">    int ret;                                    \</span></span><br><span class="line"><span class="meta">    threadEntry_t self;                         \</span></span><br><span class="line"><span class="meta">    fdEntry_t *fdEntry = getFdEntry(FD);        \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (fdEntry == NULL) &#123;                      \</span></span><br><span class="line"><span class="meta">        errno = EBADF;                          \</span></span><br><span class="line"><span class="meta">        return -1;                              \</span></span><br><span class="line"><span class="meta">    &#125;                                           \</span></span><br><span class="line"><span class="meta">    do &#123;                                        \</span></span><br><span class="line"><span class="meta">        startOp(fdEntry, &amp;self);                \</span></span><br><span class="line"><span class="meta">        ret = FUNC;                             \</span></span><br><span class="line"><span class="meta">        endOp(fdEntry, &amp;self);                  \</span></span><br><span class="line"><span class="meta">    &#125; while (ret == -1 &amp;&amp; errno == EINTR);      \</span></span><br><span class="line"><span class="meta">    return ret;                                 \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NET_Read</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">void</span>* buf, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BLOCKING_IO_RETURN_INT</span>( s, <span class="built_in">recv</span>(s, buf, len, <span class="number">0</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Start a blocking operation :-</span></span><br><span class="line"><span class="comment"> *    Insert thread onto thread list for the fd.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">startOp</span><span class="params">(fdEntry_t *fdEntry, threadEntry_t *self)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    self-&gt;thr = <span class="built_in">pthread_self</span>();</span><br><span class="line">    self-&gt;intr = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;(fdEntry-&gt;lock));</span><br><span class="line">    &#123;</span><br><span class="line">        self-&gt;next = fdEntry-&gt;threads;</span><br><span class="line">        fdEntry-&gt;threads = self;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;(fdEntry-&gt;lock));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * End a blocking operation :-</span></span><br><span class="line"><span class="comment"> *     Remove thread from thread list for the fd</span></span><br><span class="line"><span class="comment"> *     If fd has been interrupted then set errno to EBADF</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">endOp</span></span></span><br><span class="line"><span class="function">    <span class="params">(fdEntry_t *fdEntry, threadEntry_t *self)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> orig_errno = errno;</span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;(fdEntry-&gt;lock));</span><br><span class="line">    &#123;</span><br><span class="line">        threadEntry_t *curr, *prev=<span class="literal">NULL</span>;</span><br><span class="line">        curr = fdEntry-&gt;threads;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr == self) &#123;</span><br><span class="line">                <span class="keyword">if</span> (curr-&gt;intr) &#123;</span><br><span class="line">                    orig_errno = EBADF;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (prev == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                    fdEntry-&gt;threads = curr-&gt;next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    prev-&gt;next = curr-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = curr-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;(fdEntry-&gt;lock));</span><br><span class="line">    errno = orig_errno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>recv 如果读取到的字节数小于0, 需要根据不同的errno进行后续处理:</p><ul><li><code>ECONNRESET``: 抛出异常 </code>ConnectionResetException, Connection reset`.</li><li><code>EBADF</code>: 抛出异常 <code>SocketException, Socket closed</code>. </li><li><code>EINTR</code>: 抛出异常 <code>InterruptedIOException, Operation interrupted</code>.</li><li>都不是则抛出, <code>SocketException, Read failed</code>.</li></ul><h3 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h3><p>看完读, 再看一下<code>OutputStream</code>.</p><p>这次我们也是从<code>AbstractPlainSocketImpl</code>中入手</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span> (fdLock) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isClosedOrPending())</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Socket Closed&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (shut_wr)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Socket output is shutdown&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (socketOutputStream == <span class="keyword">null</span>)</span><br><span class="line">               socketOutputStream = <span class="keyword">new</span> SocketOutputStream(<span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> socketOutputStream;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>嗯,不出所料是个<code>SocketOutputStream</code></p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/io5.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       socketWrite(b, <span class="number">0</span>, b.length);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">socketWrite</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (len &lt;= <span class="number">0</span> || off &lt; <span class="number">0</span> || len &gt; b.length - off) &#123;</span><br><span class="line">           <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="string">&quot;len == &quot;</span> + len</span><br><span class="line">                   + <span class="string">&quot; off == &quot;</span> + off + <span class="string">&quot; buffer length == &quot;</span> + b.length);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       FileDescriptor fd = impl.acquireFD();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           socketWrite0(fd, b, off, len);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SocketException se) &#123;</span><br><span class="line">           <span class="keyword">if</span> (se <span class="keyword">instanceof</span> sun.net.ConnectionResetException) &#123;</span><br><span class="line">               impl.setConnectionResetPending();</span><br><span class="line">               se = <span class="keyword">new</span> SocketException(<span class="string">&quot;Connection reset&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (impl.isClosedOrPending()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">throw</span> se;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           impl.releaseFD();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">socketWrite0</span><span class="params">(FileDescriptor fd, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off,</span></span></span><br><span class="line"><span class="params"><span class="function">                                    <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>最终也是通过<code>socketWrite0()</code> 这个native方法实现的.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u_vscode/jdk/src/solaris/native/java/net/SocketOutputStream.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     java_net_SocketOutputStream</span></span><br><span class="line"><span class="comment"> * Method:    socketWrite0</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/io/FileDescriptor;[BII)V</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_java_net_SocketOutputStream_socketWrite0</span><span class="params">(JNIEnv *env, jobject <span class="keyword">this</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              jobject fdObj,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              jbyteArray data,</span></span></span><br><span class="line"><span class="params"><span class="function">                                              jint off, jint len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *bufP;</span><br><span class="line">    <span class="keyword">char</span> BUF[MAX_BUFFER_LEN];</span><br><span class="line">    <span class="keyword">int</span> buflen;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IS_NULL</span>(fdObj)) &#123;</span><br><span class="line">        <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;java/net/SocketException&quot;</span>, <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fd = (*env)-&gt;<span class="built_in">GetIntField</span>(env, fdObj, IO_fd_fdID);</span><br><span class="line">        <span class="comment">/* Bug 4086704 - If the Socket associated with this file descriptor</span></span><br><span class="line"><span class="comment">         * was closed (sysCloseFD), the the file descriptor is set to -1.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;java/net/SocketException&quot;</span>, <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len &lt;= MAX_BUFFER_LEN) &#123;</span><br><span class="line">        bufP = BUF;</span><br><span class="line">        buflen = MAX_BUFFER_LEN;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buflen = <span class="built_in">min</span>(MAX_HEAP_BUFFER_LEN, len);</span><br><span class="line">        bufP = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((<span class="keyword">size_t</span>)buflen);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* if heap exhausted resort to stack buffer */</span></span><br><span class="line">        <span class="keyword">if</span> (bufP == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            bufP = BUF;</span><br><span class="line">            buflen = MAX_BUFFER_LEN;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> loff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> chunkLen = <span class="built_in">min</span>(buflen, len);</span><br><span class="line">        <span class="keyword">int</span> llen = chunkLen;</span><br><span class="line">        (*env)-&gt;<span class="built_in">GetByteArrayRegion</span>(env, data, off, chunkLen, (jbyte *)bufP);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((*env)-&gt;<span class="built_in">ExceptionCheck</span>(env)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(llen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> n = <span class="built_in">NET_Send</span>(fd, bufP + loff, llen, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    llen -= n;</span><br><span class="line">                    loff += n;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (n == JVM_IO_INTR) &#123;</span><br><span class="line">                    <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;java/io/InterruptedIOException&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (errno == ECONNRESET) &#123;</span><br><span class="line">                        <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;sun/net/ConnectionResetException&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;Connection reset&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">NET_ThrowByNameWithLastError</span>(env, <span class="string">&quot;java/net/SocketException&quot;</span>,</span><br><span class="line">                            <span class="string">&quot;Write failed&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (bufP != BUF) &#123;</span><br><span class="line">                    <span class="built_in">free</span>(bufP);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            len -= chunkLen;</span><br><span class="line">            off += chunkLen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bufP != BUF) &#123;</span><br><span class="line">        <span class="built_in">free</span>(bufP);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在向socket写的时候, 首先需要将jvm堆内的数据拷贝到用户空间c堆的一块内存中, 然后再将c堆的这块内存数据发往fd的socket写缓冲区中.</p><p>下面看一下<code>NET_Send()</code>实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容在: openjdk-jdk8u-jdk8u_vscode/jdk/src/solaris/native/java/net/linux_close.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">NET_Send</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">void</span> *msg, <span class="keyword">int</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">BLOCKING_IO_RETURN_INT</span>( s, <span class="built_in">send</span>(s, msg, len, flags) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCKING_IO_RETURN_INT(FD, FUNC) &#123;      \</span></span><br><span class="line"><span class="meta">    int ret;                                    \</span></span><br><span class="line"><span class="meta">    threadEntry_t self;                         \</span></span><br><span class="line"><span class="meta">    fdEntry_t *fdEntry = getFdEntry(FD);        \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (fdEntry == NULL) &#123;                      \</span></span><br><span class="line"><span class="meta">        errno = EBADF;                          \</span></span><br><span class="line"><span class="meta">        return -1;                              \</span></span><br><span class="line"><span class="meta">    &#125;                                           \</span></span><br><span class="line"><span class="meta">    do &#123;                                        \</span></span><br><span class="line"><span class="meta">        startOp(fdEntry, &amp;self);                \</span></span><br><span class="line"><span class="meta">        ret = FUNC;                             \</span></span><br><span class="line"><span class="meta">        endOp(fdEntry, &amp;self);                  \</span></span><br><span class="line"><span class="meta">    &#125; while (ret == -1 &amp;&amp; errno == EINTR);      \</span></span><br><span class="line"><span class="meta">    return ret;                                 \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><p>最终就是通过调用send这个系统调用, 将c堆的数据写到了内核缓冲区中.</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>下面引用了一段网上对recv, send函数的解释, 但是很多博客站点都有这段说明, 找不到源处了, 如有知道的大大, 请告知一下哈. (引用自<a href="https://www.cnblogs.com/jianqiang2010/archive/2010/08/20/1804598.html">Socket send函数和recv函数详解</a>)</p><blockquote><p>send 函数</p><pre><code>`int send( SOCKET s, const char FAR *buf, int len, int flags );`不论是客户还是服务器应用程序都用send函数来向TCP连接的另一端发送数据。客户程序一般用send函数向服务器发送请求，而服务器则通常用send函数来向客户程序发送应答。该函数的第一个参数指定发送端套接字描述符；第二个参数指明一个存放应用程序要发送数据的缓冲区；第三个参数指明实际要发送的数据的字节数；第四个参数一般置0。这里只描述同步Socket的send函数的执行流程。当调用该函数时，（1）send先比较待发送数据的长度len和套接字s的发送缓冲的长度， 如果len大于s的发送缓冲区的长度，该函数返回SOCKET_ERROR；（2）如果len小于或者等于s的发送缓冲区的长度，那么send先检查协议是否正在发送s的发送缓冲中的数据，如果是就等待协议把数据发送完，如果协议还没有开始发送s的发送缓冲中的数据或者s的发送缓冲中没有数据，那么send就比较s的发送缓冲区的剩余空间和len（3）如果len大于剩余空间大小，send就一直等待协议把s的发送缓冲中的数据发送完（4）如果len小于剩余 空间大小，send就仅仅把buf中的数据copy到剩余空间里（注意并不是send把s的发送缓冲中的数据传到连接的另一端的，而是协议传的，send仅仅是把buf中的数据copy到s的发送缓冲区的剩余空间里）。如果send函数copy数据成功，就返回实际copy的字节数，如果send在copy数据时出现错误，那么send就返回SOCKET_ERROR；如果send在等待协议传送数据时网络断开的话，那么send函数也返回SOCKET_ERROR。要注意send函数把buf中的数据成功copy到s的发送缓冲的剩余空间里后它就返回了，但是此时这些数据并不一定马上被传到连接的另一端。如果协议在后续的传送过程中出现网络错误的话，那么下一个Socket函数就会返回SOCKET_ERROR。（每一个除send外的Socket函数在执 行的最开始总要先等待套接字的发送缓冲中的数据被协议传送完毕才能继续，如果在等待时出现网络错误，那么该Socket函数就返回 SOCKET_ERROR）注意：在Unix系统下，如果send在等待协议传送数据时网络断开的话，调用send的进程会接收到一个SIGPIPE信号，进程对该信号的默认处理是进程终止。通过测试发现，异步socket的send函数在网络刚刚断开时还能发送返回相应的字节数，同时使用select检测也是可写的，但是过几秒钟之后，再send就会出错了，返回-1。select也不能检测出可写了。</code></pre></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java IO" scheme="https://wangmingco.github.io/tags/Java-IO/"/>
    
  </entry>
  
  <entry>
    <title>Java NIO 原理剖析之 DirectBuffer GC</title>
    <link href="https://wangmingco.github.io/2019/05/25/Java/io/Java%20NIO%20%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20DirectBuffer%20GC/"/>
    <id>https://wangmingco.github.io/2019/05/25/Java/io/Java%20NIO%20%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20DirectBuffer%20GC/</id>
    <published>2019-05-24T16:00:00.000Z</published>
    <updated>2022-07-04T02:29:13.805Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/66368628">Java NIO 原理剖析之 DirectBuffer GC</a></p></blockquote><p><code>DirectBuffer</code>直接从Java堆之外申请一块内存, 这块内存是不直接受JVM gc管理的, 也就是说在GC算法中并不会直接操作这块内存. 这块内存的GC是由于<code>DirectBuffer</code>在Java堆中的对象被gc后, 通过一个通知机制, 而将其清理掉的.</p><p>我简单地画了一个时序图</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/directbuffer.jpg"></p><p>在创建<code>DirectBuffer</code>对象的时候, 会一起创建一个<code>Deallocator</code>和<code>Cleaner</code>对象.</p><p><code>Deallocator</code>负责与<code>DirectBuffer</code>相关联的直接内存的清理.</p><p><code>Cleaner</code>是<code>PhantomReference</code>的子类, 这是虚引用类型. 当<code>DirectBuffer</code>对象被回收之后, 就会通知到<code>PhantomReference</code>. 然后由<code>ReferenceHandler</code>调用<code>tryHandlePending()</code>方法进行<code>pending</code>处理. 如果pending不为空, 说明<code>DirectBuffer</code>被回收了, 就可以调用<code>Cleaner</code>的<code>clean()</code>进行回收了.</p><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryHandlePending</span><span class="params">(<span class="keyword">boolean</span> waitForNotify)</span> </span>&#123;</span><br><span class="line">        Reference&lt;Object&gt; r;</span><br><span class="line">        Cleaner c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = pending;</span><br><span class="line">                    c = r <span class="keyword">instanceof</span> Cleaner ? (Cleaner) r : <span class="keyword">null</span>;</span><br><span class="line">                    pending = r.discovered;</span><br><span class="line">                    r.discovered = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (waitForNotify) &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> waitForNotify;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fast path for cleaners</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            c.clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReferenceQueue&lt;? <span class="keyword">super</span> Object&gt; q = r.queue;</span><br><span class="line">        <span class="keyword">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java IO" scheme="https://wangmingco.github.io/tags/Java-IO/"/>
    
  </entry>
  
  <entry>
    <title>JavaIO原理剖析之 磁盘IO</title>
    <link href="https://wangmingco.github.io/2019/05/23/Java/io/JavaIO%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%A3%81%E7%9B%98IO/"/>
    <id>https://wangmingco.github.io/2019/05/23/Java/io/JavaIO%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90%E4%B9%8B%20%E7%A3%81%E7%9B%98IO/</id>
    <published>2019-05-22T16:00:00.000Z</published>
    <updated>2022-07-04T02:37:17.433Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><blockquote><p><a href="https://zhuanlan.zhihu.com/p/62082720">JavaIO原理剖析之 磁盘IO</a></p></blockquote><p>在日常的工作当中, 我们的IO主要涉及俩方面: 文件IO(磁盘IO) 和网络IO. 本文主要是剖析一下Java中文件IO的实现方式.</p><p>下面我们看一个很简单的读文件的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(“xxx.txt<span class="string">&quot;);</span></span><br><span class="line"><span class="string">        byte[] cache = new byte[1024];</span></span><br><span class="line"><span class="string">        in.read(cache);</span></span><br><span class="line"><span class="string">        in.close();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>上面的程序很简单, 打开一个文件, 然后声明一个byte数组, 将文件的内容读取到byte数组中, 最后将文件关闭. so easy..</p><p>下来我们看一下FileInputStream的read源码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> readBytes(b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">readBytes</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><p>我们发现最终调用的native方法. 那真正的魔法就是native方法中了, 打开NetBeans(为什么用NetBeans啊, 因为NetBeans可以打开openjdk工程啊), 我们找一下这个方法,,,, 啊找到了, 在这里 <code>openjdk-jdk8u-jdk8u/jdk/src/share/native/java/io/io_util.c</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容文件路径: openjdk-jdk8u-jdk8u/jdk/src/share/native/java/io/io_util.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 8192</span></span><br><span class="line"></span><br><span class="line"><span class="function">jint</span></span><br><span class="line"><span class="function"><span class="title">readBytes</span><span class="params">(JNIEnv *env, jobject <span class="keyword">this</span>, jbyteArray bytes,</span></span></span><br><span class="line"><span class="params"><span class="function">          jint off, jint len, jfieldID fid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    jint nread;</span><br><span class="line">    <span class="keyword">char</span> stackBuf[BUF_SIZE];</span><br><span class="line">    <span class="keyword">char</span> *buf = <span class="literal">NULL</span>;</span><br><span class="line">    FD fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">IS_NULL</span>(bytes)) &#123;</span><br><span class="line">        <span class="built_in">JNU_ThrowNullPointerException</span>(env, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">outOfBounds</span>(env, off, len, bytes)) &#123;</span><br><span class="line">        <span class="built_in">JNU_ThrowByName</span>(env, <span class="string">&quot;java/lang/IndexOutOfBoundsException&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &gt; BUF_SIZE) &#123;</span><br><span class="line">        buf = <span class="built_in">malloc</span>(len);</span><br><span class="line">        <span class="keyword">if</span> (buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">JNU_ThrowOutOfMemoryError</span>(env, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        buf = stackBuf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd = <span class="built_in">GET_FD</span>(<span class="keyword">this</span>, fid);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">JNU_ThrowIOException</span>(env, <span class="string">&quot;Stream Closed&quot;</span>);</span><br><span class="line">        nread = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nread = <span class="built_in">IO_Read</span>(fd, buf, len);</span><br><span class="line">        <span class="keyword">if</span> (nread &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            (*env)-&gt;<span class="built_in">SetByteArrayRegion</span>(env, bytes, off, nread, (jbyte *)buf);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">JNU_ThrowIOExceptionWithLastError</span>(env, <span class="string">&quot;Read error&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">/* EOF */</span></span><br><span class="line">            nread = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (buf != stackBuf) &#123;</span><br><span class="line">        <span class="built_in">free</span>(buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程经过了下面四步:</p><ol><li><code>char stackBuf[BUF_SIZE]</code>; 申请8192个字符的内存</li><li>如果申请的内存大小大于<code>BUF_SIZE</code>, 则重新申请一块内存出来<code>malloc(len)</code>. 否则使用<code>stackBuf</code>读取数据.</li><li>通过系统调用(<code>IO_Read</code>)将磁盘上的数据读入到<code>buf</code>中.</li><li>如果读取的数据大于0, 则将<code>buf</code>拷贝到bytes中.</li></ol><p>IO_Read定义在</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容文件路径: openjdk-jdk8u-jdk8u/jdk/src/solaris/native/java/io/io_util_md.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO_Read handleRead</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RESTARTABLE(_cmd, _result) do &#123; \</span></span><br><span class="line"><span class="meta">    do &#123; \</span></span><br><span class="line"><span class="meta">        _result = _cmd; \</span></span><br><span class="line"><span class="meta">    &#125; while((_result == -1) &amp;&amp; (errno == EINTR)); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下列内容文件路径: openjdk-jdk8u-jdk8u/jdk/src/solaris/native/java/io/io_util_md.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span></span></span><br><span class="line"><span class="function"><span class="title">handleRead</span><span class="params">(FD fd, <span class="keyword">void</span> *buf, jint len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> result;</span><br><span class="line">    <span class="built_in">RESTARTABLE</span>(<span class="built_in">read</span>(fd, buf, len), result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个IO的读过程到这里就结束了, 我们总结一下:</p><p>整个读过程总共分配了俩块内存, 一块在jvm中分配的一块在c heap中分配的. 首先通过系统调用read方法, 将磁盘上面的内容拷贝到c heap中那块内存中, 然后再将c heap堆中内存内容拷贝到jvm heap中. 整个过程可以用下面的图表示</p><p>常常说地阻塞式io就是这种，就是阻塞在了read这个系统调用上，下面就是阻塞io模型</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/io1.jpg"></p><p>下面这张图点出了read系统调用的整个过程</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javase/io2.jpg"></p><p>当发起read调用之后，线程阻塞在这里，但是线程却退出了CPU的占用，此时由dma负责将磁盘的数据拷贝到内核读缓冲区中，然后再由CPU将内核读缓冲区的数据拷贝到用户空间内存中。</p><p>对了, 最后看一下<code>SetByteArrayRegion</code>, 最后也是通过<code>memcpy</code>, 进行内存拷贝.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下列内容文件路径: openjdk-jdk8u-jdk8u_vscode/hotspot/src/share/vm/prims</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> USDT2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFINE_SETSCALARARRAYREGION(ElementTag,ElementType,Result, Tag) \</span></span><br><span class="line"><span class="meta">  DT_VOID_RETURN_MARK_DECL(Set##Result##ArrayRegion);\</span></span><br><span class="line"><span class="meta">\</span></span><br><span class="line"><span class="meta">JNI_ENTRY(void, \</span></span><br><span class="line"><span class="meta">jni_Set##Result##ArrayRegion(JNIEnv *env, ElementType##Array array, jsize start, \</span></span><br><span class="line"><span class="meta">             jsize len, const ElementType *buf)) \</span></span><br><span class="line"><span class="meta">  JNIWrapper(<span class="meta-string">&quot;Set&quot;</span> XSTR(Result) <span class="meta-string">&quot;ArrayRegion&quot;</span>); \</span></span><br><span class="line"><span class="meta">  DTRACE_PROBE5(hotspot_jni, Set##Result##ArrayRegion__entry, env, array, start, len, buf);\</span></span><br><span class="line"><span class="meta">  DT_VOID_RETURN_MARK(Set##Result##ArrayRegion); \</span></span><br><span class="line"><span class="meta">  typeArrayOop dst = typeArrayOop(JNIHandles::resolve_non_null(array)); \</span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">if</span> (start <span class="meta-string">&lt; 0 || len &lt; 0 || ((unsigned int)start + (unsigned int)len &gt;</span> (unsigned int)dst-&gt;length())) &#123; \</span></span><br><span class="line"><span class="meta">    THROW(vmSymbols::java_lang_ArrayIndexOutOfBoundsException()); \</span></span><br><span class="line"><span class="meta">  &#125; <span class="meta-keyword">else</span> &#123; \</span></span><br><span class="line"><span class="meta">    <span class="meta-keyword">if</span> (len &gt; 0) &#123; \</span></span><br><span class="line"><span class="meta">      int sc = TypeArrayKlass::cast(dst-&gt;klass())-&gt;log2_element_size(); \</span></span><br><span class="line"><span class="meta">      memcpy((u_char*) dst-&gt;Tag##_at_addr(start), \</span></span><br><span class="line"><span class="meta">             (u_char*) buf, \</span></span><br><span class="line"><span class="meta">             len &lt;&lt; sc);    \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">  &#125; \</span></span><br><span class="line"><span class="meta">JNI_END</span></span><br></pre></td></tr></table></figure><p>上面Java 读文件就说完了, 下面说一下Java的读缓存BufferedInputStream.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= count) &#123;</span><br><span class="line">        fill();</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= count)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getBufIfOpen()[pos++] &amp; <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = getBufIfOpen();</span><br><span class="line">    <span class="keyword">if</span> (markpos &lt; <span class="number">0</span>)</span><br><span class="line">        pos = <span class="number">0</span>;            <span class="comment">/* no mark: throw away the buffer */</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pos &gt;= buffer.length)  <span class="comment">/* no room left in buffer */</span></span><br><span class="line">        <span class="keyword">if</span> (markpos &gt; <span class="number">0</span>) &#123;  <span class="comment">/* can throw away early part of the buffer */</span></span><br><span class="line">            <span class="keyword">int</span> sz = pos - markpos;</span><br><span class="line">            System.arraycopy(buffer, markpos, buffer, <span class="number">0</span>, sz);</span><br><span class="line">            pos = sz;</span><br><span class="line">            markpos = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (buffer.length &gt;= marklimit) &#123;</span><br><span class="line">            markpos = -<span class="number">1</span>;   <span class="comment">/* buffer got too big, invalidate mark */</span></span><br><span class="line">            pos = <span class="number">0</span>;        <span class="comment">/* drop buffer contents */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (buffer.length &gt;= MAX_BUFFER_SIZE) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError(<span class="string">&quot;Required array size too large&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            <span class="comment">/* grow buffer */</span></span><br><span class="line">            <span class="keyword">int</span> nsz = (pos &lt;= MAX_BUFFER_SIZE - pos) ?</span><br><span class="line">                    pos * <span class="number">2</span> : MAX_BUFFER_SIZE;</span><br><span class="line">            <span class="keyword">if</span> (nsz &gt; marklimit)</span><br><span class="line">                nsz = marklimit;</span><br><span class="line">            <span class="keyword">byte</span> nbuf[] = <span class="keyword">new</span> <span class="keyword">byte</span>[nsz];</span><br><span class="line">            System.arraycopy(buffer, <span class="number">0</span>, nbuf, <span class="number">0</span>, pos);</span><br><span class="line">            <span class="keyword">if</span> (!bufUpdater.compareAndSet(<span class="keyword">this</span>, buffer, nbuf)) &#123;</span><br><span class="line">                <span class="comment">// Can&#x27;t replace buf if there was an async close.</span></span><br><span class="line">                <span class="comment">// Note: This would need to be changed if fill()</span></span><br><span class="line">                <span class="comment">// is ever made accessible to multiple threads.</span></span><br><span class="line">                <span class="comment">// But for now, the only way CAS can fail is via close.</span></span><br><span class="line">                <span class="comment">// assert buf == null;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Stream closed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            buffer = nbuf;</span><br><span class="line">        &#125;</span><br><span class="line">    count = pos;</span><br><span class="line">    <span class="keyword">int</span> n = getInIfOpen().read(buffer, pos, buffer.length - pos);</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">        count = n + pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到其实 <code>BufferedInputStream</code> 为我们做的只是一个’预读’的操作, 如果我们要读取100个字节的数据, 它会预先帮我读取200个字节, 缓存起来, 下次我们需要下一百个字节的数据的时候, 它就会直接从已经缓冲过的cache中进行读取, 而不用再进行一次IO操作了.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java IO" scheme="https://wangmingco.github.io/tags/Java-IO/"/>
    
  </entry>
  
  <entry>
    <title>CGLib 动态代理 原理解析</title>
    <link href="https://wangmingco.github.io/2019/05/21/Java/lib/CGLib%20Proxy/"/>
    <id>https://wangmingco.github.io/2019/05/21/Java/lib/CGLib%20Proxy/</id>
    <published>2019-05-20T16:00:00.000Z</published>
    <updated>2022-07-04T01:44:52.061Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/asciinema-player.js"></script><link rel="stylesheet" type="text/css" href="/assets/asciinema-player.css" /><p><a href="https://zhuanlan.zhihu.com/p/63272694">CGLib 动态代理 原理解析</a></p><p>首先来看一段CGLib代理的测试代码(<code>MethodInterceptor</code>的测试, 其他类型这里不做展开了). <code>Util</code>类的代码在后面给出的码云片段中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">List list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">enhancer.setSuperclass(A.class);</span><br><span class="line">enhancer.setCallback((MethodInterceptor) (obj, method, args1, proxy) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;proxy start : &quot;</span> + proxy.getClass() + <span class="string">&quot;: &quot;</span> + obj.getClass());</span><br><span class="line">Util.printCreateInfo(list.get(<span class="number">0</span>));</span><br><span class="line">Object res2 = proxy.invokeSuper(obj, args1);</span><br><span class="line">System.out.println(<span class="string">&quot;proxy over&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">A proxy = (A) enhancer.create();</span><br><span class="line">list.add(proxy);</span><br><span class="line">System.out.println(proxy.getClass().getName().replaceAll(<span class="string">&quot;\\.&quot;</span>, <span class="string">&quot;/&quot;</span>));</span><br><span class="line">proxy.printHi();</span><br><span class="line">proxy.printFinalHi();</span><br><span class="line"></span><br><span class="line">Util.printClassInfo(proxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printFinalHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的输出结果除了测试动态代理生效结果外, 还将动态代理生成的类名也输出出来了. 这些类名信息, 在后面的分析中会用到.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Current Pid is:<span class="number">54801</span></span><br><span class="line">co/wangming/cglib/methodinterceptor/MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc</span><br><span class="line">proxy start : <span class="class"><span class="keyword">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class">*****************<span class="title">CreateInfo</span>***********************</span></span><br><span class="line"><span class="class"><span class="title">Proxy</span> <span class="title">Class</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">CreateInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">CreateInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c1</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">equals</span>$1$<span class="title">Proxy</span> <span class="title">CreateInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">CreateInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">equals</span>$1$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c1</span>: <span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">equals</span>$1$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">toString</span>$2$<span class="title">Proxy</span> <span class="title">CreateInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">CreateInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">toString</span>$2$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c1</span>: <span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">toString</span>$2$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">hashCode</span>$3$<span class="title">Proxy</span> <span class="title">CreateInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">CreateInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">hashCode</span>$3$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c1</span>: <span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">hashCode</span>$3$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">clone</span>$4$<span class="title">Proxy</span> <span class="title">CreateInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">CreateInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">clone</span>$4$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c1</span>: <span class="title">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">clone</span>$4$<span class="title">Proxy</span> <span class="title">CreateInfo</span> <span class="title">c2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class">*****************<span class="title">CreateInfo</span>***********************</span></span><br><span class="line"><span class="class"><span class="title">hi</span></span></span><br><span class="line"><span class="class"><span class="title">proxy</span> <span class="title">over</span></span></span><br><span class="line"><span class="class"><span class="title">hi</span></span></span><br><span class="line"><span class="class">*****************<span class="title">FastClassInfo</span>***********************</span></span><br><span class="line"><span class="class"><span class="title">Proxy</span> <span class="title">Class</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">FastClassInfo</span> : <span class="title">class</span> <span class="title">net</span>.<span class="title">sf</span>.<span class="title">cglib</span>.<span class="title">proxy</span>.<span class="title">MethodProxy</span>$<span class="title">FastClassInfo</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">FastClass</span> <span class="title">f1</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">FastClassByCGLIB</span>$$65<span class="title">f2d708</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">FastClass</span> <span class="title">f2</span>: <span class="title">class</span> <span class="title">co</span>.<span class="title">wangming</span>.<span class="title">cglib</span>.<span class="title">methodinterceptor</span>.<span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span>$$<span class="title">FastClassByCGLIB</span>$$19<span class="title">e0f1ba</span></span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">FastClass</span> <span class="title">i1</span>: 0</span></span><br><span class="line"><span class="class"><span class="title">CGLIB</span>$<span class="title">printHi</span>$0$<span class="title">Proxy</span> <span class="title">FastClass</span> <span class="title">i2</span>: 14</span></span><br><span class="line"><span class="class">----&gt;</span></span><br><span class="line"><span class="class">----&gt;</span></span><br><span class="line"><span class="class">----&gt;</span></span><br><span class="line"><span class="class">----&gt;</span></span><br><span class="line"><span class="class">****************<span class="title">FastClassInfo</span>************************</span></span><br></pre></td></tr></table></figure><p>由于生成的代理类的代码过于长, 而知乎没有折叠功能, 所以我将这个代码片段放到了码云上面 . A的代理类的名称是: <code>MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc</code> 生成的类在底部</p><p>从<code>printHi()</code>方法入手, 看看它的代理是怎么实现的.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc类内部, 有下面俩个和printHi方法相关的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// printHi()的反射对应的Method对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Method CGLIB$printHi$<span class="number">0</span>$Method;</span><br><span class="line"><span class="comment">// printHi()方法CGLib实现的代理对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> MethodProxy CGLIB$printHi$<span class="number">0</span>$Proxy;</span><br><span class="line"><span class="comment">// 在demo里设置的callback</span></span><br><span class="line"><span class="keyword">private</span> MethodInterceptor CGLIB$CALLBACK_0;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在实例化对象的时候, 会调用CGLIB$BIND_CALLBACKS()方法. </span></span><br><span class="line"><span class="keyword">public</span> MethodInterceptorTest$A$$EnhancerByCGLIB$$9805b321() &#123;</span><br><span class="line">        CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> CGLIB$BIND_CALLBACKS(Object var0) &#123;</span><br><span class="line">        MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc var1 = (MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc)var0;</span><br><span class="line">        <span class="keyword">if</span> (!var1.CGLIB$BOUND) &#123;</span><br><span class="line">            var1.CGLIB$BOUND = <span class="keyword">true</span>;</span><br><span class="line">            Object var10000 = CGLIB$THREAD_CALLBACKS.get();</span><br><span class="line">            <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                var10000 = CGLIB$STATIC_CALLBACKS;</span><br><span class="line">                <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            var1.CGLIB$CALLBACK_0 = (MethodInterceptor)((Callback[])var10000)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在类加载的时候会调用CGLIB$STATICHOOK1()方法, 该方法主要是对上面说到的那俩个类的属性进行初始化操作</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        CGLIB$STATICHOOK1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> CGLIB$STATICHOOK1() &#123;</span><br><span class="line">        CGLIB$THREAD_CALLBACKS = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line">        CGLIB$emptyArgs = <span class="keyword">new</span> Object[<span class="number">0</span>];</span><br><span class="line">        Class var0 = Class.forName(<span class="string">&quot;co.wangming.cglib.methodinterceptor.MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc&quot;</span>);</span><br><span class="line">        Class var1;</span><br><span class="line">        CGLIB$printHi$<span class="number">0</span>$Method = ReflectUtils.findMethods(<span class="keyword">new</span> String[]&#123;<span class="string">&quot;printHi&quot;</span>, <span class="string">&quot;()V&quot;</span>&#125;, (var1).getDeclaredMethods())[<span class="number">0</span>];</span><br><span class="line">        CGLIB$printHi$<span class="number">0</span>$Proxy = MethodProxy.create(var1, var0, <span class="string">&quot;()V&quot;</span>, <span class="string">&quot;printHi&quot;</span>, <span class="string">&quot;CGLIB$printHi$0&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理子类生成的printHi()的代理方法. </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果没有设置callback对象, 也就是不用代理, 则直接调用原生方法</span></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var10000.intercept(<span class="keyword">this</span>, CGLIB$printHi$<span class="number">0</span>$Method, CGLIB$emptyArgs, CGLIB$printHi$<span class="number">0</span>$Proxy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.printHi();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>上面简单分析了代理子类的实现, 但是这都不是重点, 真正的魔法在callback里面. demo里面callback是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enhancer.setCallback((MethodInterceptor) (obj, method, args1, proxy) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;proxy start : &quot;</span> + proxy.getClass() + <span class="string">&quot;: &quot;</span> + obj.getClass());</span><br><span class="line">Object res = proxy.invokeSuper(obj, args);</span><br><span class="line">System.out.println(<span class="string">&quot;proxy over&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>proxy参数的类型是<code>MethodProxy</code>类型, <code>MethodProxy</code>有俩个<code>invoke</code>方法:</p><ul><li><code>invoke(Object obj, Object[] args)</code>: obj参数不能是<code>MethodInterceptor#intercept()</code>方法的第一个参数obj对象, 否则会造成栈溢出</li><li><code>invokeSuper(Object obj, Object[] args)</code>: obj参数必须是<code>MethodInterceptor#intercept()</code>方法的第一个参数obj对象</li></ul><p>在使用<code>MethodInterceptor</code>的时候, 一定要注意上面这俩点, 下面我们就从<code>invoke/invokeSuper</code>方法入手, 分析一下.</p><p>由于这一块的源码过多, 我就不一一都贴出来了, 我画了俩张图帮大家理顺一下.</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javalib/cglib1.jpg"><br><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javalib/cglib2.jpg"></p><p><code>MethodProxy</code>类里面有一个<code>CreateInfo</code>对象. <code>CreateInfo</code>内部有俩个<code>Class</code>对象, 分别是</p><ul><li>c1: 目标类的Class对象</li><li>c2: 目标类的强化类的Class对象, 也就是CGLib生成的目标类的代理子类</li></ul><p>CGLib会利用<code>CreateInfo</code>对象去构建出<code>FastClassInfo</code>这个对象. 构建过程就是通过<code>CreateInfo</code>的c1/c2去分别构建出<code>FastClassInfo</code>里面的<code>FastClass</code>类型的f1/f2.</p><p>也就是说, 真正的是构建了俩个<code>FastClass</code>对象出来. <code>FastClass</code>对象是通过<code>FastClass</code>内部类<code>Generator</code>进行构建的. 而内部类<code>Generator</code>是将构建过程交给了它的父类<code>AbstractClassGenerator#generate()</code>方法的.</p><p><code>AbstractClassGenerator#generate()</code>又是通过其内部类<code>GeneratorStrategy</code>的对象执行了构建. 最终实现构建的是<code>FastClass#Generator()</code>的<code>generateClass()</code>方法, 该方法实例化了一个<code>FastClassEmitter</code>对象, <code>FastClassEmitter</code>对象内部就是通过ASM去构建Class对象的.</p><p>invoke/invokeSuper方法实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建FastClassInfo</span></span><br><span class="line">            init();</span><br><span class="line">            FastClassInfo fci = fastClassInfo;</span><br><span class="line">            <span class="keyword">return</span> fci.f1.invoke(fci.i1, obj, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fastClassInfo.i1 &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Protected method: &quot;</span> + sig1);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invokeSuper</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建FastClassInfo</span></span><br><span class="line">            init();</span><br><span class="line">            FastClassInfo fci = fastClassInfo;</span><br><span class="line">            <span class="keyword">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>init()方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (initLock)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">if</span> (fastClassInfo == <span class="keyword">null</span>)</span><br><span class="line">             &#123;</span><br><span class="line">                 CreateInfo ci = createInfo;</span><br><span class="line"></span><br><span class="line">                 FastClassInfo fci = <span class="keyword">new</span> FastClassInfo();</span><br><span class="line">                 fci.f1 = helper(ci, ci.c1);</span><br><span class="line">                 fci.f2 = helper(ci, ci.c2);</span><br><span class="line">                 <span class="comment">// 根据方法签名, 找到方法所在位置索引, 这个值会在FastClass的子类中用到</span></span><br><span class="line">                 fci.i1 = fci.f1.getIndex(sig1);</span><br><span class="line">                 fci.i2 = fci.f2.getIndex(sig2);</span><br><span class="line">                 fastClassInfo = fci;</span><br><span class="line">                 createInfo = <span class="keyword">null</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>针对<code>init()</code>方法的过程可以参考一下下面的时序图</p><p><img src="https://raw.githubusercontent.com/wangmingco/wangmingco.github.io/main/static/images/javalib/cglib3.jpg"></p><p>可以看出来, 整个CGLib的核心就在于这个<code>FastClass</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Class type;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FastClass</code>是一个抽象类, CGLib在运行时通过<code>FastClass</code>内的<code>Generator</code>这个内部类将其子类动态生成出来, 然后再利用<code>ClassLoader</code>将生成的子类加载进JVM里面去.</p><p>其实, CGLib会为我们生成很多个代理类, 不单单是目标类的子类, 例如上文提到的FastClass f1, FastClass f2的子类是不同的.</p><ul><li><code>MethodInterceptorTest$A$$FastClassByCGLIB$$65f2d708</code> : <code>FastClassInfo#f1</code>, <code>MethodProxy的invoke()</code>方法进行调用</li><li><code>MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc$$FastClassByCGLIB$$19e0f1ba</code> : <code>FastClassInfo#f2</code>, <code>MethodProxy</code>的<code>invokeSuper()</code>方法进行调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">FastClassByCGLIB</span>$$65<span class="title">f2d708</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        A var10000 = (A)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10000.printHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                var10000.printFinalHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                A.printStaticHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Boolean(var10000.equals(var3[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">return</span> var10000.toString();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Integer(var10000.hashCode());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在刚开始的demo中, 如果进行如下调用, 会发生递归.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eznhancer.setCallback((MethodInterceptor) (obj, method, args1, proxy) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;proxy start : &quot;</span> + proxy.getClass() + <span class="string">&quot;: &quot;</span> + obj.getClass());</span><br><span class="line">Util.printCreateInfo(list.get(<span class="number">0</span>));</span><br><span class="line">Object res2 = proxy.invoke(obj, args1); <span class="comment">// 注意,这里将invokeSuper()换成了invoke()</span></span><br><span class="line">System.out.println(<span class="string">&quot;proxy over&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> res2;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这是因为(FastClassInfo#i1 的值为0, 因此var1为0, 刚开始的运行日志有输出 )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">FastClassByCGLIB</span>$$65<span class="title">f2d708</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        A var10000 = (A)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">             <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                var10000.printHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的var10000就是obj, 那么流畅就成了又会去调用<code>MethodInterceptorTest$A$$EnhancerByCGLIB$$b5ca7abc</code>的<code>printHi()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">printHi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="comment">// 如果没有设置callback对象, 也就是不用代理, 则直接调用原生方法</span></span><br><span class="line">        <span class="keyword">if</span> (var10000 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var10000.intercept(<span class="keyword">this</span>, CGLIB$printHi$<span class="number">0</span>$Method, CGLIB$emptyArgs, CGLIB$printHi$<span class="number">0</span>$Proxy);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.printHi();</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>因此当调用<code>MethodProxy</code>的<code>invoke()</code>方法时, 必须不能是<code>MethodInterceptor#intercept</code>的第一个obj参数.</p><p>而invokeSuper就不会有这个问题, FastClassInfo#i2的值为 14,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptorTest</span>$<span class="title">A</span>$$<span class="title">EnhancerByCGLIB</span>$$<span class="title">b5ca7abc</span>$$<span class="title">FastClassByCGLIB</span>$$19<span class="title">e0f1ba</span> <span class="keyword">extends</span> <span class="title">FastClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(<span class="keyword">int</span> var1, Object var2, Object[] var3)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        b5ca7abc var10000 = (b5ca7abc)var2;</span><br><span class="line">        <span class="keyword">int</span> var10001 = var1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span>(var10001) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                var10000.printHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">                var10000.CGLIB$printHi$<span class="number">0</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">                var10000.printFinalHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">                A.printStaticHi();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot find matching method/constructor&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>因此执行的是<code>var10000.CGLIB$printHi$0()</code>这个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> CGLIB$printHi$<span class="number">0</span>() &#123;</span><br><span class="line">       <span class="keyword">super</span>.printHi();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是直接调用A的<code>printHi()</code>方法进行调用.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;script src=&quot;/assets/asciinema-player.js&quot;&gt;&lt;/script&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/assets/asciinema-player.css&quot; /&gt;
&lt;p&gt;&lt;a href=</summary>
      
    
    
    
    <category term="Java" scheme="https://wangmingco.github.io/categories/Java/"/>
    
    
    <category term="Java 三方库" scheme="https://wangmingco.github.io/tags/Java-%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
</feed>
